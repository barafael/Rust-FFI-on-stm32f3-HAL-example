/* automatically generated by rust-bindgen 0.54.1 */

#[no_std]
mod libc { pub type c_uint = u32;        pub type c_int = i32;        pub type c_char = i8;        pub type c_uchar = u8;        pub type c_short = i16;        pub type c_ushort = u16;        pub type c_long = i64;        pub type c_ulong = u64;        pub type c_schar = i8;        pub type c_longlong = i64;        pub type c_ulonglong = u64;pub enum c_void {}}

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __STM32F3_CMSIS_VERSION_MAIN: u32 = 2;
pub const __STM32F3_CMSIS_VERSION_SUB1: u32 = 3;
pub const __STM32F3_CMSIS_VERSION_SUB2: u32 = 4;
pub const __STM32F3_CMSIS_VERSION_RC: u32 = 0;
pub const __STM32F3_CMSIS_VERSION: u32 = 33752064;
pub const __CM4_REV: u32 = 1;
pub const __MPU_PRESENT: u32 = 1;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __FPU_PRESENT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __CM_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM_CMSIS_VERSION_SUB: u32 = 1;
pub const __CM_CMSIS_VERSION: u32 = 327681;
pub const __CM4_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM4_CMSIS_VERSION_SUB: u32 = 1;
pub const __CM4_CMSIS_VERSION: u32 = 327681;
pub const __CORTEX_M: u32 = 4;
pub const __FPU_USED: u32 = 0;
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const APSR_Q_Pos: u32 = 27;
pub const APSR_Q_Msk: u32 = 134217728;
pub const APSR_GE_Pos: u32 = 16;
pub const APSR_GE_Msk: u32 = 983040;
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_Q_Pos: u32 = 27;
pub const xPSR_Q_Msk: u32 = 134217728;
pub const xPSR_ICI_IT_2_Pos: u32 = 25;
pub const xPSR_ICI_IT_2_Msk: u32 = 100663296;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_GE_Pos: u32 = 16;
pub const xPSR_GE_Msk: u32 = 983040;
pub const xPSR_ICI_IT_1_Pos: u32 = 10;
pub const xPSR_ICI_IT_1_Msk: u32 = 64512;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
pub const CONTROL_FPCA_Pos: u32 = 2;
pub const CONTROL_FPCA_Msk: u32 = 4;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
pub const NVIC_STIR_INTID_Pos: u32 = 0;
pub const NVIC_STIR_INTID_Msk: u32 = 511;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_CFSR_MMARVALID_Pos: u32 = 7;
pub const SCB_CFSR_MMARVALID_Msk: u32 = 128;
pub const SCB_CFSR_MLSPERR_Pos: u32 = 5;
pub const SCB_CFSR_MLSPERR_Msk: u32 = 32;
pub const SCB_CFSR_MSTKERR_Pos: u32 = 4;
pub const SCB_CFSR_MSTKERR_Msk: u32 = 16;
pub const SCB_CFSR_MUNSTKERR_Pos: u32 = 3;
pub const SCB_CFSR_MUNSTKERR_Msk: u32 = 8;
pub const SCB_CFSR_DACCVIOL_Pos: u32 = 1;
pub const SCB_CFSR_DACCVIOL_Msk: u32 = 2;
pub const SCB_CFSR_IACCVIOL_Pos: u32 = 0;
pub const SCB_CFSR_IACCVIOL_Msk: u32 = 1;
pub const SCB_CFSR_BFARVALID_Pos: u32 = 15;
pub const SCB_CFSR_BFARVALID_Msk: u32 = 32768;
pub const SCB_CFSR_LSPERR_Pos: u32 = 13;
pub const SCB_CFSR_LSPERR_Msk: u32 = 8192;
pub const SCB_CFSR_STKERR_Pos: u32 = 12;
pub const SCB_CFSR_STKERR_Msk: u32 = 4096;
pub const SCB_CFSR_UNSTKERR_Pos: u32 = 11;
pub const SCB_CFSR_UNSTKERR_Msk: u32 = 2048;
pub const SCB_CFSR_IMPRECISERR_Pos: u32 = 10;
pub const SCB_CFSR_IMPRECISERR_Msk: u32 = 1024;
pub const SCB_CFSR_PRECISERR_Pos: u32 = 9;
pub const SCB_CFSR_PRECISERR_Msk: u32 = 512;
pub const SCB_CFSR_IBUSERR_Pos: u32 = 8;
pub const SCB_CFSR_IBUSERR_Msk: u32 = 256;
pub const SCB_CFSR_DIVBYZERO_Pos: u32 = 25;
pub const SCB_CFSR_DIVBYZERO_Msk: u32 = 33554432;
pub const SCB_CFSR_UNALIGNED_Pos: u32 = 24;
pub const SCB_CFSR_UNALIGNED_Msk: u32 = 16777216;
pub const SCB_CFSR_NOCP_Pos: u32 = 19;
pub const SCB_CFSR_NOCP_Msk: u32 = 524288;
pub const SCB_CFSR_INVPC_Pos: u32 = 18;
pub const SCB_CFSR_INVPC_Msk: u32 = 262144;
pub const SCB_CFSR_INVSTATE_Pos: u32 = 17;
pub const SCB_CFSR_INVSTATE_Msk: u32 = 131072;
pub const SCB_CFSR_UNDEFINSTR_Pos: u32 = 16;
pub const SCB_CFSR_UNDEFINSTR_Msk: u32 = 65536;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SCnSCB_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const SCnSCB_ICTR_INTLINESNUM_Msk: u32 = 15;
pub const SCnSCB_ACTLR_DISOOFP_Pos: u32 = 9;
pub const SCnSCB_ACTLR_DISOOFP_Msk: u32 = 512;
pub const SCnSCB_ACTLR_DISFPCA_Pos: u32 = 8;
pub const SCnSCB_ACTLR_DISFPCA_Msk: u32 = 256;
pub const SCnSCB_ACTLR_DISFOLD_Pos: u32 = 2;
pub const SCnSCB_ACTLR_DISFOLD_Msk: u32 = 4;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 4294967295;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_TraceBusID_Pos: u32 = 16;
pub const ITM_TCR_TraceBusID_Msk: u32 = 8323072;
pub const ITM_TCR_GTSFREQ_Pos: u32 = 10;
pub const ITM_TCR_GTSFREQ_Msk: u32 = 3072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_IWR_ATVALIDM_Pos: u32 = 0;
pub const ITM_IWR_ATVALIDM_Msk: u32 = 1;
pub const ITM_IRR_ATREADYM_Pos: u32 = 0;
pub const ITM_IRR_ATREADYM_Msk: u32 = 1;
pub const ITM_IMCR_INTEGRATION_Pos: u32 = 0;
pub const ITM_IMCR_INTEGRATION_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const DWT_CTRL_NUMCOMP_Pos: u32 = 28;
pub const DWT_CTRL_NUMCOMP_Msk: u32 = 4026531840;
pub const DWT_CTRL_NOTRCPKT_Pos: u32 = 27;
pub const DWT_CTRL_NOTRCPKT_Msk: u32 = 134217728;
pub const DWT_CTRL_NOEXTTRIG_Pos: u32 = 26;
pub const DWT_CTRL_NOEXTTRIG_Msk: u32 = 67108864;
pub const DWT_CTRL_NOCYCCNT_Pos: u32 = 25;
pub const DWT_CTRL_NOCYCCNT_Msk: u32 = 33554432;
pub const DWT_CTRL_NOPRFCNT_Pos: u32 = 24;
pub const DWT_CTRL_NOPRFCNT_Msk: u32 = 16777216;
pub const DWT_CTRL_CYCEVTENA_Pos: u32 = 22;
pub const DWT_CTRL_CYCEVTENA_Msk: u32 = 4194304;
pub const DWT_CTRL_FOLDEVTENA_Pos: u32 = 21;
pub const DWT_CTRL_FOLDEVTENA_Msk: u32 = 2097152;
pub const DWT_CTRL_LSUEVTENA_Pos: u32 = 20;
pub const DWT_CTRL_LSUEVTENA_Msk: u32 = 1048576;
pub const DWT_CTRL_SLEEPEVTENA_Pos: u32 = 19;
pub const DWT_CTRL_SLEEPEVTENA_Msk: u32 = 524288;
pub const DWT_CTRL_EXCEVTENA_Pos: u32 = 18;
pub const DWT_CTRL_EXCEVTENA_Msk: u32 = 262144;
pub const DWT_CTRL_CPIEVTENA_Pos: u32 = 17;
pub const DWT_CTRL_CPIEVTENA_Msk: u32 = 131072;
pub const DWT_CTRL_EXCTRCENA_Pos: u32 = 16;
pub const DWT_CTRL_EXCTRCENA_Msk: u32 = 65536;
pub const DWT_CTRL_PCSAMPLENA_Pos: u32 = 12;
pub const DWT_CTRL_PCSAMPLENA_Msk: u32 = 4096;
pub const DWT_CTRL_SYNCTAP_Pos: u32 = 10;
pub const DWT_CTRL_SYNCTAP_Msk: u32 = 3072;
pub const DWT_CTRL_CYCTAP_Pos: u32 = 9;
pub const DWT_CTRL_CYCTAP_Msk: u32 = 512;
pub const DWT_CTRL_POSTINIT_Pos: u32 = 5;
pub const DWT_CTRL_POSTINIT_Msk: u32 = 480;
pub const DWT_CTRL_POSTPRESET_Pos: u32 = 1;
pub const DWT_CTRL_POSTPRESET_Msk: u32 = 30;
pub const DWT_CTRL_CYCCNTENA_Pos: u32 = 0;
pub const DWT_CTRL_CYCCNTENA_Msk: u32 = 1;
pub const DWT_CPICNT_CPICNT_Pos: u32 = 0;
pub const DWT_CPICNT_CPICNT_Msk: u32 = 255;
pub const DWT_EXCCNT_EXCCNT_Pos: u32 = 0;
pub const DWT_EXCCNT_EXCCNT_Msk: u32 = 255;
pub const DWT_SLEEPCNT_SLEEPCNT_Pos: u32 = 0;
pub const DWT_SLEEPCNT_SLEEPCNT_Msk: u32 = 255;
pub const DWT_LSUCNT_LSUCNT_Pos: u32 = 0;
pub const DWT_LSUCNT_LSUCNT_Msk: u32 = 255;
pub const DWT_FOLDCNT_FOLDCNT_Pos: u32 = 0;
pub const DWT_FOLDCNT_FOLDCNT_Msk: u32 = 255;
pub const DWT_MASK_MASK_Pos: u32 = 0;
pub const DWT_MASK_MASK_Msk: u32 = 31;
pub const DWT_FUNCTION_MATCHED_Pos: u32 = 24;
pub const DWT_FUNCTION_MATCHED_Msk: u32 = 16777216;
pub const DWT_FUNCTION_DATAVADDR1_Pos: u32 = 16;
pub const DWT_FUNCTION_DATAVADDR1_Msk: u32 = 983040;
pub const DWT_FUNCTION_DATAVADDR0_Pos: u32 = 12;
pub const DWT_FUNCTION_DATAVADDR0_Msk: u32 = 61440;
pub const DWT_FUNCTION_DATAVSIZE_Pos: u32 = 10;
pub const DWT_FUNCTION_DATAVSIZE_Msk: u32 = 3072;
pub const DWT_FUNCTION_LNK1ENA_Pos: u32 = 9;
pub const DWT_FUNCTION_LNK1ENA_Msk: u32 = 512;
pub const DWT_FUNCTION_DATAVMATCH_Pos: u32 = 8;
pub const DWT_FUNCTION_DATAVMATCH_Msk: u32 = 256;
pub const DWT_FUNCTION_CYCMATCH_Pos: u32 = 7;
pub const DWT_FUNCTION_CYCMATCH_Msk: u32 = 128;
pub const DWT_FUNCTION_EMITRANGE_Pos: u32 = 5;
pub const DWT_FUNCTION_EMITRANGE_Msk: u32 = 32;
pub const DWT_FUNCTION_FUNCTION_Pos: u32 = 0;
pub const DWT_FUNCTION_FUNCTION_Msk: u32 = 15;
pub const TPI_ACPR_PRESCALER_Pos: u32 = 0;
pub const TPI_ACPR_PRESCALER_Msk: u32 = 8191;
pub const TPI_SPPR_TXMODE_Pos: u32 = 0;
pub const TPI_SPPR_TXMODE_Msk: u32 = 3;
pub const TPI_FFSR_FtNonStop_Pos: u32 = 3;
pub const TPI_FFSR_FtNonStop_Msk: u32 = 8;
pub const TPI_FFSR_TCPresent_Pos: u32 = 2;
pub const TPI_FFSR_TCPresent_Msk: u32 = 4;
pub const TPI_FFSR_FtStopped_Pos: u32 = 1;
pub const TPI_FFSR_FtStopped_Msk: u32 = 2;
pub const TPI_FFSR_FlInProg_Pos: u32 = 0;
pub const TPI_FFSR_FlInProg_Msk: u32 = 1;
pub const TPI_FFCR_TrigIn_Pos: u32 = 8;
pub const TPI_FFCR_TrigIn_Msk: u32 = 256;
pub const TPI_FFCR_EnFCont_Pos: u32 = 1;
pub const TPI_FFCR_EnFCont_Msk: u32 = 2;
pub const TPI_TRIGGER_TRIGGER_Pos: u32 = 0;
pub const TPI_TRIGGER_TRIGGER_Msk: u32 = 1;
pub const TPI_FIFO0_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO0_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO0_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO0_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO0_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO0_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO0_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO0_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO0_ETM2_Pos: u32 = 16;
pub const TPI_FIFO0_ETM2_Msk: u32 = 16711680;
pub const TPI_FIFO0_ETM1_Pos: u32 = 8;
pub const TPI_FIFO0_ETM1_Msk: u32 = 65280;
pub const TPI_FIFO0_ETM0_Pos: u32 = 0;
pub const TPI_FIFO0_ETM0_Msk: u32 = 255;
pub const TPI_ITATBCTR2_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR2_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY1_Msk: u32 = 1;
pub const TPI_FIFO1_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO1_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO1_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO1_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO1_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO1_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO1_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO1_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO1_ITM2_Pos: u32 = 16;
pub const TPI_FIFO1_ITM2_Msk: u32 = 16711680;
pub const TPI_FIFO1_ITM1_Pos: u32 = 8;
pub const TPI_FIFO1_ITM1_Msk: u32 = 65280;
pub const TPI_FIFO1_ITM0_Pos: u32 = 0;
pub const TPI_FIFO1_ITM0_Msk: u32 = 255;
pub const TPI_ITATBCTR0_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR0_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY1_Msk: u32 = 1;
pub const TPI_ITCTRL_Mode_Pos: u32 = 0;
pub const TPI_ITCTRL_Mode_Msk: u32 = 3;
pub const TPI_DEVID_NRZVALID_Pos: u32 = 11;
pub const TPI_DEVID_NRZVALID_Msk: u32 = 2048;
pub const TPI_DEVID_MANCVALID_Pos: u32 = 10;
pub const TPI_DEVID_MANCVALID_Msk: u32 = 1024;
pub const TPI_DEVID_PTINVALID_Pos: u32 = 9;
pub const TPI_DEVID_PTINVALID_Msk: u32 = 512;
pub const TPI_DEVID_MinBufSz_Pos: u32 = 6;
pub const TPI_DEVID_MinBufSz_Msk: u32 = 448;
pub const TPI_DEVID_AsynClkIn_Pos: u32 = 5;
pub const TPI_DEVID_AsynClkIn_Msk: u32 = 32;
pub const TPI_DEVID_NrTraceInput_Pos: u32 = 0;
pub const TPI_DEVID_NrTraceInput_Msk: u32 = 31;
pub const TPI_DEVTYPE_SubType_Pos: u32 = 4;
pub const TPI_DEVTYPE_SubType_Msk: u32 = 15;
pub const TPI_DEVTYPE_MajorType_Pos: u32 = 0;
pub const TPI_DEVTYPE_MajorType_Msk: u32 = 15;
pub const MPU_TYPE_RALIASES: u32 = 4;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 5;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967264;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const FPU_FPCCR_ASPEN_Pos: u32 = 31;
pub const FPU_FPCCR_ASPEN_Msk: u32 = 2147483648;
pub const FPU_FPCCR_LSPEN_Pos: u32 = 30;
pub const FPU_FPCCR_LSPEN_Msk: u32 = 1073741824;
pub const FPU_FPCCR_MONRDY_Pos: u32 = 8;
pub const FPU_FPCCR_MONRDY_Msk: u32 = 256;
pub const FPU_FPCCR_BFRDY_Pos: u32 = 6;
pub const FPU_FPCCR_BFRDY_Msk: u32 = 64;
pub const FPU_FPCCR_MMRDY_Pos: u32 = 5;
pub const FPU_FPCCR_MMRDY_Msk: u32 = 32;
pub const FPU_FPCCR_HFRDY_Pos: u32 = 4;
pub const FPU_FPCCR_HFRDY_Msk: u32 = 16;
pub const FPU_FPCCR_THREAD_Pos: u32 = 3;
pub const FPU_FPCCR_THREAD_Msk: u32 = 8;
pub const FPU_FPCCR_USER_Pos: u32 = 1;
pub const FPU_FPCCR_USER_Msk: u32 = 2;
pub const FPU_FPCCR_LSPACT_Pos: u32 = 0;
pub const FPU_FPCCR_LSPACT_Msk: u32 = 1;
pub const FPU_FPCAR_ADDRESS_Pos: u32 = 3;
pub const FPU_FPCAR_ADDRESS_Msk: u32 = 4294967288;
pub const FPU_FPDSCR_AHP_Pos: u32 = 26;
pub const FPU_FPDSCR_AHP_Msk: u32 = 67108864;
pub const FPU_FPDSCR_DN_Pos: u32 = 25;
pub const FPU_FPDSCR_DN_Msk: u32 = 33554432;
pub const FPU_FPDSCR_FZ_Pos: u32 = 24;
pub const FPU_FPDSCR_FZ_Msk: u32 = 16777216;
pub const FPU_FPDSCR_RMode_Pos: u32 = 22;
pub const FPU_FPDSCR_RMode_Msk: u32 = 12582912;
pub const FPU_MVFR0_FP_rounding_modes_Pos: u32 = 28;
pub const FPU_MVFR0_FP_rounding_modes_Msk: u32 = 4026531840;
pub const FPU_MVFR0_Short_vectors_Pos: u32 = 24;
pub const FPU_MVFR0_Short_vectors_Msk: u32 = 251658240;
pub const FPU_MVFR0_Square_root_Pos: u32 = 20;
pub const FPU_MVFR0_Square_root_Msk: u32 = 15728640;
pub const FPU_MVFR0_Divide_Pos: u32 = 16;
pub const FPU_MVFR0_Divide_Msk: u32 = 983040;
pub const FPU_MVFR0_FP_excep_trapping_Pos: u32 = 12;
pub const FPU_MVFR0_FP_excep_trapping_Msk: u32 = 61440;
pub const FPU_MVFR0_Double_precision_Pos: u32 = 8;
pub const FPU_MVFR0_Double_precision_Msk: u32 = 3840;
pub const FPU_MVFR0_Single_precision_Pos: u32 = 4;
pub const FPU_MVFR0_Single_precision_Msk: u32 = 240;
pub const FPU_MVFR0_A_SIMD_registers_Pos: u32 = 0;
pub const FPU_MVFR0_A_SIMD_registers_Msk: u32 = 15;
pub const FPU_MVFR1_FP_fused_MAC_Pos: u32 = 28;
pub const FPU_MVFR1_FP_fused_MAC_Msk: u32 = 4026531840;
pub const FPU_MVFR1_FP_HPFP_Pos: u32 = 24;
pub const FPU_MVFR1_FP_HPFP_Msk: u32 = 251658240;
pub const FPU_MVFR1_D_NaN_mode_Pos: u32 = 4;
pub const FPU_MVFR1_D_NaN_mode_Msk: u32 = 240;
pub const FPU_MVFR1_FtZ_mode_Pos: u32 = 0;
pub const FPU_MVFR1_FtZ_mode_Msk: u32 = 15;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const FPU_BASE: u32 = 3758157616;
pub const NVIC_USER_IRQ_OFFSET: u32 = 16;
pub const EXC_RETURN_HANDLER: u32 = 4294967281;
pub const EXC_RETURN_THREAD_MSP: u32 = 4294967289;
pub const EXC_RETURN_THREAD_PSP: u32 = 4294967293;
pub const EXC_RETURN_HANDLER_FPU: u32 = 4294967265;
pub const EXC_RETURN_THREAD_MSP_FPU: u32 = 4294967273;
pub const EXC_RETURN_THREAD_PSP_FPU: u32 = 4294967277;
pub const ARM_MPU_AP_NONE: u32 = 0;
pub const ARM_MPU_AP_PRIV: u32 = 1;
pub const ARM_MPU_AP_URO: u32 = 2;
pub const ARM_MPU_AP_FULL: u32 = 3;
pub const ARM_MPU_AP_PRO: u32 = 5;
pub const ARM_MPU_AP_RO: u32 = 6;
pub const ARM_MPU_CACHEP_NOCACHE: u32 = 0;
pub const ARM_MPU_CACHEP_WB_WRA: u32 = 1;
pub const ARM_MPU_CACHEP_WT_NWA: u32 = 2;
pub const ARM_MPU_CACHEP_WB_NWA: u32 = 3;
pub const FLASH_BASE: u32 = 134217728;
pub const CCMDATARAM_BASE: u32 = 268435456;
pub const SRAM_BASE: u32 = 536870912;
pub const PERIPH_BASE: u32 = 1073741824;
pub const SRAM_BB_BASE: u32 = 570425344;
pub const PERIPH_BB_BASE: u32 = 1107296256;
pub const APB1PERIPH_BASE: u32 = 1073741824;
pub const APB2PERIPH_BASE: u32 = 1073807360;
pub const AHB1PERIPH_BASE: u32 = 1073872896;
pub const AHB2PERIPH_BASE: u32 = 1207959552;
pub const AHB3PERIPH_BASE: u32 = 1342177280;
pub const TIM2_BASE: u32 = 1073741824;
pub const TIM3_BASE: u32 = 1073742848;
pub const TIM4_BASE: u32 = 1073743872;
pub const TIM6_BASE: u32 = 1073745920;
pub const TIM7_BASE: u32 = 1073746944;
pub const RTC_BASE: u32 = 1073752064;
pub const WWDG_BASE: u32 = 1073753088;
pub const IWDG_BASE: u32 = 1073754112;
pub const I2S2ext_BASE: u32 = 1073755136;
pub const SPI2_BASE: u32 = 1073756160;
pub const SPI3_BASE: u32 = 1073757184;
pub const I2S3ext_BASE: u32 = 1073758208;
pub const USART2_BASE: u32 = 1073759232;
pub const USART3_BASE: u32 = 1073760256;
pub const UART4_BASE: u32 = 1073761280;
pub const UART5_BASE: u32 = 1073762304;
pub const I2C1_BASE: u32 = 1073763328;
pub const I2C2_BASE: u32 = 1073764352;
pub const USB_BASE: u32 = 1073765376;
pub const USB_PMAADDR: u32 = 1073766400;
pub const CAN_BASE: u32 = 1073767424;
pub const PWR_BASE: u32 = 1073770496;
pub const DAC1_BASE: u32 = 1073771520;
pub const DAC_BASE: u32 = 1073771520;
pub const SYSCFG_BASE: u32 = 1073807360;
pub const COMP1_BASE: u32 = 1073807388;
pub const COMP2_BASE: u32 = 1073807392;
pub const COMP3_BASE: u32 = 1073807396;
pub const COMP4_BASE: u32 = 1073807400;
pub const COMP5_BASE: u32 = 1073807404;
pub const COMP6_BASE: u32 = 1073807408;
pub const COMP7_BASE: u32 = 1073807412;
pub const COMP_BASE: u32 = 1073807388;
pub const OPAMP1_BASE: u32 = 1073807416;
pub const OPAMP2_BASE: u32 = 1073807420;
pub const OPAMP3_BASE: u32 = 1073807424;
pub const OPAMP4_BASE: u32 = 1073807428;
pub const OPAMP_BASE: u32 = 1073807416;
pub const EXTI_BASE: u32 = 1073808384;
pub const TIM1_BASE: u32 = 1073818624;
pub const SPI1_BASE: u32 = 1073819648;
pub const TIM8_BASE: u32 = 1073820672;
pub const USART1_BASE: u32 = 1073821696;
pub const TIM15_BASE: u32 = 1073823744;
pub const TIM16_BASE: u32 = 1073824768;
pub const TIM17_BASE: u32 = 1073825792;
pub const DMA1_BASE: u32 = 1073872896;
pub const DMA1_Channel1_BASE: u32 = 1073872904;
pub const DMA1_Channel2_BASE: u32 = 1073872924;
pub const DMA1_Channel3_BASE: u32 = 1073872944;
pub const DMA1_Channel4_BASE: u32 = 1073872964;
pub const DMA1_Channel5_BASE: u32 = 1073872984;
pub const DMA1_Channel6_BASE: u32 = 1073873004;
pub const DMA1_Channel7_BASE: u32 = 1073873024;
pub const DMA2_BASE: u32 = 1073873920;
pub const DMA2_Channel1_BASE: u32 = 1073873928;
pub const DMA2_Channel2_BASE: u32 = 1073873948;
pub const DMA2_Channel3_BASE: u32 = 1073873968;
pub const DMA2_Channel4_BASE: u32 = 1073873988;
pub const DMA2_Channel5_BASE: u32 = 1073874008;
pub const RCC_BASE: u32 = 1073876992;
pub const FLASH_R_BASE: u32 = 1073881088;
pub const OB_BASE: u32 = 536868864;
pub const FLASHSIZE_BASE: u32 = 536868812;
pub const UID_BASE: u32 = 536868780;
pub const CRC_BASE: u32 = 1073885184;
pub const TSC_BASE: u32 = 1073889280;
pub const GPIOA_BASE: u32 = 1207959552;
pub const GPIOB_BASE: u32 = 1207960576;
pub const GPIOC_BASE: u32 = 1207961600;
pub const GPIOD_BASE: u32 = 1207962624;
pub const GPIOE_BASE: u32 = 1207963648;
pub const GPIOF_BASE: u32 = 1207964672;
pub const ADC1_BASE: u32 = 1342177280;
pub const ADC2_BASE: u32 = 1342177536;
pub const ADC1_2_COMMON_BASE: u32 = 1342178048;
pub const ADC3_BASE: u32 = 1342178304;
pub const ADC4_BASE: u32 = 1342178560;
pub const ADC3_4_COMMON_BASE: u32 = 1342179072;
pub const DBGMCU_BASE: u32 = 3758366720;
pub const ADC_ISR_ADRDY_Pos: u32 = 0;
pub const ADC_ISR_ADRDY_Msk: u32 = 1;
pub const ADC_ISR_ADRDY: u32 = 1;
pub const ADC_ISR_EOSMP_Pos: u32 = 1;
pub const ADC_ISR_EOSMP_Msk: u32 = 2;
pub const ADC_ISR_EOSMP: u32 = 2;
pub const ADC_ISR_EOC_Pos: u32 = 2;
pub const ADC_ISR_EOC_Msk: u32 = 4;
pub const ADC_ISR_EOC: u32 = 4;
pub const ADC_ISR_EOS_Pos: u32 = 3;
pub const ADC_ISR_EOS_Msk: u32 = 8;
pub const ADC_ISR_EOS: u32 = 8;
pub const ADC_ISR_OVR_Pos: u32 = 4;
pub const ADC_ISR_OVR_Msk: u32 = 16;
pub const ADC_ISR_OVR: u32 = 16;
pub const ADC_ISR_JEOC_Pos: u32 = 5;
pub const ADC_ISR_JEOC_Msk: u32 = 32;
pub const ADC_ISR_JEOC: u32 = 32;
pub const ADC_ISR_JEOS_Pos: u32 = 6;
pub const ADC_ISR_JEOS_Msk: u32 = 64;
pub const ADC_ISR_JEOS: u32 = 64;
pub const ADC_ISR_AWD1_Pos: u32 = 7;
pub const ADC_ISR_AWD1_Msk: u32 = 128;
pub const ADC_ISR_AWD1: u32 = 128;
pub const ADC_ISR_AWD2_Pos: u32 = 8;
pub const ADC_ISR_AWD2_Msk: u32 = 256;
pub const ADC_ISR_AWD2: u32 = 256;
pub const ADC_ISR_AWD3_Pos: u32 = 9;
pub const ADC_ISR_AWD3_Msk: u32 = 512;
pub const ADC_ISR_AWD3: u32 = 512;
pub const ADC_ISR_JQOVF_Pos: u32 = 10;
pub const ADC_ISR_JQOVF_Msk: u32 = 1024;
pub const ADC_ISR_JQOVF: u32 = 1024;
pub const ADC_ISR_ADRD: u32 = 1;
pub const ADC_IER_ADRDYIE_Pos: u32 = 0;
pub const ADC_IER_ADRDYIE_Msk: u32 = 1;
pub const ADC_IER_ADRDYIE: u32 = 1;
pub const ADC_IER_EOSMPIE_Pos: u32 = 1;
pub const ADC_IER_EOSMPIE_Msk: u32 = 2;
pub const ADC_IER_EOSMPIE: u32 = 2;
pub const ADC_IER_EOCIE_Pos: u32 = 2;
pub const ADC_IER_EOCIE_Msk: u32 = 4;
pub const ADC_IER_EOCIE: u32 = 4;
pub const ADC_IER_EOSIE_Pos: u32 = 3;
pub const ADC_IER_EOSIE_Msk: u32 = 8;
pub const ADC_IER_EOSIE: u32 = 8;
pub const ADC_IER_OVRIE_Pos: u32 = 4;
pub const ADC_IER_OVRIE_Msk: u32 = 16;
pub const ADC_IER_OVRIE: u32 = 16;
pub const ADC_IER_JEOCIE_Pos: u32 = 5;
pub const ADC_IER_JEOCIE_Msk: u32 = 32;
pub const ADC_IER_JEOCIE: u32 = 32;
pub const ADC_IER_JEOSIE_Pos: u32 = 6;
pub const ADC_IER_JEOSIE_Msk: u32 = 64;
pub const ADC_IER_JEOSIE: u32 = 64;
pub const ADC_IER_AWD1IE_Pos: u32 = 7;
pub const ADC_IER_AWD1IE_Msk: u32 = 128;
pub const ADC_IER_AWD1IE: u32 = 128;
pub const ADC_IER_AWD2IE_Pos: u32 = 8;
pub const ADC_IER_AWD2IE_Msk: u32 = 256;
pub const ADC_IER_AWD2IE: u32 = 256;
pub const ADC_IER_AWD3IE_Pos: u32 = 9;
pub const ADC_IER_AWD3IE_Msk: u32 = 512;
pub const ADC_IER_AWD3IE: u32 = 512;
pub const ADC_IER_JQOVFIE_Pos: u32 = 10;
pub const ADC_IER_JQOVFIE_Msk: u32 = 1024;
pub const ADC_IER_JQOVFIE: u32 = 1024;
pub const ADC_IER_RDY: u32 = 1;
pub const ADC_IER_EOSMP: u32 = 2;
pub const ADC_IER_EOC: u32 = 4;
pub const ADC_IER_EOS: u32 = 8;
pub const ADC_IER_OVR: u32 = 16;
pub const ADC_IER_JEOC: u32 = 32;
pub const ADC_IER_JEOS: u32 = 64;
pub const ADC_IER_AWD1: u32 = 128;
pub const ADC_IER_AWD2: u32 = 256;
pub const ADC_IER_AWD3: u32 = 512;
pub const ADC_IER_JQOVF: u32 = 1024;
pub const ADC_CR_ADEN_Pos: u32 = 0;
pub const ADC_CR_ADEN_Msk: u32 = 1;
pub const ADC_CR_ADEN: u32 = 1;
pub const ADC_CR_ADDIS_Pos: u32 = 1;
pub const ADC_CR_ADDIS_Msk: u32 = 2;
pub const ADC_CR_ADDIS: u32 = 2;
pub const ADC_CR_ADSTART_Pos: u32 = 2;
pub const ADC_CR_ADSTART_Msk: u32 = 4;
pub const ADC_CR_ADSTART: u32 = 4;
pub const ADC_CR_JADSTART_Pos: u32 = 3;
pub const ADC_CR_JADSTART_Msk: u32 = 8;
pub const ADC_CR_JADSTART: u32 = 8;
pub const ADC_CR_ADSTP_Pos: u32 = 4;
pub const ADC_CR_ADSTP_Msk: u32 = 16;
pub const ADC_CR_ADSTP: u32 = 16;
pub const ADC_CR_JADSTP_Pos: u32 = 5;
pub const ADC_CR_JADSTP_Msk: u32 = 32;
pub const ADC_CR_JADSTP: u32 = 32;
pub const ADC_CR_ADVREGEN_Pos: u32 = 28;
pub const ADC_CR_ADVREGEN_Msk: u32 = 805306368;
pub const ADC_CR_ADVREGEN: u32 = 805306368;
pub const ADC_CR_ADVREGEN_0: u32 = 268435456;
pub const ADC_CR_ADVREGEN_1: u32 = 536870912;
pub const ADC_CR_ADCALDIF_Pos: u32 = 30;
pub const ADC_CR_ADCALDIF_Msk: u32 = 1073741824;
pub const ADC_CR_ADCALDIF: u32 = 1073741824;
pub const ADC_CR_ADCAL_Pos: u32 = 31;
pub const ADC_CR_ADCAL_Msk: u32 = 2147483648;
pub const ADC_CR_ADCAL: u32 = 2147483648;
pub const ADC_CFGR_DMAEN_Pos: u32 = 0;
pub const ADC_CFGR_DMAEN_Msk: u32 = 1;
pub const ADC_CFGR_DMAEN: u32 = 1;
pub const ADC_CFGR_DMACFG_Pos: u32 = 1;
pub const ADC_CFGR_DMACFG_Msk: u32 = 2;
pub const ADC_CFGR_DMACFG: u32 = 2;
pub const ADC_CFGR_RES_Pos: u32 = 3;
pub const ADC_CFGR_RES_Msk: u32 = 24;
pub const ADC_CFGR_RES: u32 = 24;
pub const ADC_CFGR_RES_0: u32 = 8;
pub const ADC_CFGR_RES_1: u32 = 16;
pub const ADC_CFGR_ALIGN_Pos: u32 = 5;
pub const ADC_CFGR_ALIGN_Msk: u32 = 32;
pub const ADC_CFGR_ALIGN: u32 = 32;
pub const ADC_CFGR_EXTSEL_Pos: u32 = 6;
pub const ADC_CFGR_EXTSEL_Msk: u32 = 960;
pub const ADC_CFGR_EXTSEL: u32 = 960;
pub const ADC_CFGR_EXTSEL_0: u32 = 64;
pub const ADC_CFGR_EXTSEL_1: u32 = 128;
pub const ADC_CFGR_EXTSEL_2: u32 = 256;
pub const ADC_CFGR_EXTSEL_3: u32 = 512;
pub const ADC_CFGR_EXTEN_Pos: u32 = 10;
pub const ADC_CFGR_EXTEN_Msk: u32 = 3072;
pub const ADC_CFGR_EXTEN: u32 = 3072;
pub const ADC_CFGR_EXTEN_0: u32 = 1024;
pub const ADC_CFGR_EXTEN_1: u32 = 2048;
pub const ADC_CFGR_OVRMOD_Pos: u32 = 12;
pub const ADC_CFGR_OVRMOD_Msk: u32 = 4096;
pub const ADC_CFGR_OVRMOD: u32 = 4096;
pub const ADC_CFGR_CONT_Pos: u32 = 13;
pub const ADC_CFGR_CONT_Msk: u32 = 8192;
pub const ADC_CFGR_CONT: u32 = 8192;
pub const ADC_CFGR_AUTDLY_Pos: u32 = 14;
pub const ADC_CFGR_AUTDLY_Msk: u32 = 16384;
pub const ADC_CFGR_AUTDLY: u32 = 16384;
pub const ADC_CFGR_DISCEN_Pos: u32 = 16;
pub const ADC_CFGR_DISCEN_Msk: u32 = 65536;
pub const ADC_CFGR_DISCEN: u32 = 65536;
pub const ADC_CFGR_DISCNUM_Pos: u32 = 17;
pub const ADC_CFGR_DISCNUM_Msk: u32 = 917504;
pub const ADC_CFGR_DISCNUM: u32 = 917504;
pub const ADC_CFGR_DISCNUM_0: u32 = 131072;
pub const ADC_CFGR_DISCNUM_1: u32 = 262144;
pub const ADC_CFGR_DISCNUM_2: u32 = 524288;
pub const ADC_CFGR_JDISCEN_Pos: u32 = 20;
pub const ADC_CFGR_JDISCEN_Msk: u32 = 1048576;
pub const ADC_CFGR_JDISCEN: u32 = 1048576;
pub const ADC_CFGR_JQM_Pos: u32 = 21;
pub const ADC_CFGR_JQM_Msk: u32 = 2097152;
pub const ADC_CFGR_JQM: u32 = 2097152;
pub const ADC_CFGR_AWD1SGL_Pos: u32 = 22;
pub const ADC_CFGR_AWD1SGL_Msk: u32 = 4194304;
pub const ADC_CFGR_AWD1SGL: u32 = 4194304;
pub const ADC_CFGR_AWD1EN_Pos: u32 = 23;
pub const ADC_CFGR_AWD1EN_Msk: u32 = 8388608;
pub const ADC_CFGR_AWD1EN: u32 = 8388608;
pub const ADC_CFGR_JAWD1EN_Pos: u32 = 24;
pub const ADC_CFGR_JAWD1EN_Msk: u32 = 16777216;
pub const ADC_CFGR_JAWD1EN: u32 = 16777216;
pub const ADC_CFGR_JAUTO_Pos: u32 = 25;
pub const ADC_CFGR_JAUTO_Msk: u32 = 33554432;
pub const ADC_CFGR_JAUTO: u32 = 33554432;
pub const ADC_CFGR_AWD1CH_Pos: u32 = 26;
pub const ADC_CFGR_AWD1CH_Msk: u32 = 2080374784;
pub const ADC_CFGR_AWD1CH: u32 = 2080374784;
pub const ADC_CFGR_AWD1CH_0: u32 = 67108864;
pub const ADC_CFGR_AWD1CH_1: u32 = 134217728;
pub const ADC_CFGR_AWD1CH_2: u32 = 268435456;
pub const ADC_CFGR_AWD1CH_3: u32 = 536870912;
pub const ADC_CFGR_AWD1CH_4: u32 = 1073741824;
pub const ADC_CFGR_AUTOFF_Pos: u32 = 15;
pub const ADC_CFGR_AUTOFF_Msk: u32 = 32768;
pub const ADC_CFGR_AUTOFF: u32 = 32768;
pub const ADC_SMPR1_SMP0_Pos: u32 = 0;
pub const ADC_SMPR1_SMP0_Msk: u32 = 7;
pub const ADC_SMPR1_SMP0: u32 = 7;
pub const ADC_SMPR1_SMP0_0: u32 = 1;
pub const ADC_SMPR1_SMP0_1: u32 = 2;
pub const ADC_SMPR1_SMP0_2: u32 = 4;
pub const ADC_SMPR1_SMP1_Pos: u32 = 3;
pub const ADC_SMPR1_SMP1_Msk: u32 = 56;
pub const ADC_SMPR1_SMP1: u32 = 56;
pub const ADC_SMPR1_SMP1_0: u32 = 8;
pub const ADC_SMPR1_SMP1_1: u32 = 16;
pub const ADC_SMPR1_SMP1_2: u32 = 32;
pub const ADC_SMPR1_SMP2_Pos: u32 = 6;
pub const ADC_SMPR1_SMP2_Msk: u32 = 448;
pub const ADC_SMPR1_SMP2: u32 = 448;
pub const ADC_SMPR1_SMP2_0: u32 = 64;
pub const ADC_SMPR1_SMP2_1: u32 = 128;
pub const ADC_SMPR1_SMP2_2: u32 = 256;
pub const ADC_SMPR1_SMP3_Pos: u32 = 9;
pub const ADC_SMPR1_SMP3_Msk: u32 = 3584;
pub const ADC_SMPR1_SMP3: u32 = 3584;
pub const ADC_SMPR1_SMP3_0: u32 = 512;
pub const ADC_SMPR1_SMP3_1: u32 = 1024;
pub const ADC_SMPR1_SMP3_2: u32 = 2048;
pub const ADC_SMPR1_SMP4_Pos: u32 = 12;
pub const ADC_SMPR1_SMP4_Msk: u32 = 28672;
pub const ADC_SMPR1_SMP4: u32 = 28672;
pub const ADC_SMPR1_SMP4_0: u32 = 4096;
pub const ADC_SMPR1_SMP4_1: u32 = 8192;
pub const ADC_SMPR1_SMP4_2: u32 = 16384;
pub const ADC_SMPR1_SMP5_Pos: u32 = 15;
pub const ADC_SMPR1_SMP5_Msk: u32 = 229376;
pub const ADC_SMPR1_SMP5: u32 = 229376;
pub const ADC_SMPR1_SMP5_0: u32 = 32768;
pub const ADC_SMPR1_SMP5_1: u32 = 65536;
pub const ADC_SMPR1_SMP5_2: u32 = 131072;
pub const ADC_SMPR1_SMP6_Pos: u32 = 18;
pub const ADC_SMPR1_SMP6_Msk: u32 = 1835008;
pub const ADC_SMPR1_SMP6: u32 = 1835008;
pub const ADC_SMPR1_SMP6_0: u32 = 262144;
pub const ADC_SMPR1_SMP6_1: u32 = 524288;
pub const ADC_SMPR1_SMP6_2: u32 = 1048576;
pub const ADC_SMPR1_SMP7_Pos: u32 = 21;
pub const ADC_SMPR1_SMP7_Msk: u32 = 14680064;
pub const ADC_SMPR1_SMP7: u32 = 14680064;
pub const ADC_SMPR1_SMP7_0: u32 = 2097152;
pub const ADC_SMPR1_SMP7_1: u32 = 4194304;
pub const ADC_SMPR1_SMP7_2: u32 = 8388608;
pub const ADC_SMPR1_SMP8_Pos: u32 = 24;
pub const ADC_SMPR1_SMP8_Msk: u32 = 117440512;
pub const ADC_SMPR1_SMP8: u32 = 117440512;
pub const ADC_SMPR1_SMP8_0: u32 = 16777216;
pub const ADC_SMPR1_SMP8_1: u32 = 33554432;
pub const ADC_SMPR1_SMP8_2: u32 = 67108864;
pub const ADC_SMPR1_SMP9_Pos: u32 = 27;
pub const ADC_SMPR1_SMP9_Msk: u32 = 939524096;
pub const ADC_SMPR1_SMP9: u32 = 939524096;
pub const ADC_SMPR1_SMP9_0: u32 = 134217728;
pub const ADC_SMPR1_SMP9_1: u32 = 268435456;
pub const ADC_SMPR1_SMP9_2: u32 = 536870912;
pub const ADC_SMPR2_SMP10_Pos: u32 = 0;
pub const ADC_SMPR2_SMP10_Msk: u32 = 7;
pub const ADC_SMPR2_SMP10: u32 = 7;
pub const ADC_SMPR2_SMP10_0: u32 = 1;
pub const ADC_SMPR2_SMP10_1: u32 = 2;
pub const ADC_SMPR2_SMP10_2: u32 = 4;
pub const ADC_SMPR2_SMP11_Pos: u32 = 3;
pub const ADC_SMPR2_SMP11_Msk: u32 = 56;
pub const ADC_SMPR2_SMP11: u32 = 56;
pub const ADC_SMPR2_SMP11_0: u32 = 8;
pub const ADC_SMPR2_SMP11_1: u32 = 16;
pub const ADC_SMPR2_SMP11_2: u32 = 32;
pub const ADC_SMPR2_SMP12_Pos: u32 = 6;
pub const ADC_SMPR2_SMP12_Msk: u32 = 448;
pub const ADC_SMPR2_SMP12: u32 = 448;
pub const ADC_SMPR2_SMP12_0: u32 = 64;
pub const ADC_SMPR2_SMP12_1: u32 = 128;
pub const ADC_SMPR2_SMP12_2: u32 = 256;
pub const ADC_SMPR2_SMP13_Pos: u32 = 9;
pub const ADC_SMPR2_SMP13_Msk: u32 = 3584;
pub const ADC_SMPR2_SMP13: u32 = 3584;
pub const ADC_SMPR2_SMP13_0: u32 = 512;
pub const ADC_SMPR2_SMP13_1: u32 = 1024;
pub const ADC_SMPR2_SMP13_2: u32 = 2048;
pub const ADC_SMPR2_SMP14_Pos: u32 = 12;
pub const ADC_SMPR2_SMP14_Msk: u32 = 28672;
pub const ADC_SMPR2_SMP14: u32 = 28672;
pub const ADC_SMPR2_SMP14_0: u32 = 4096;
pub const ADC_SMPR2_SMP14_1: u32 = 8192;
pub const ADC_SMPR2_SMP14_2: u32 = 16384;
pub const ADC_SMPR2_SMP15_Pos: u32 = 15;
pub const ADC_SMPR2_SMP15_Msk: u32 = 229376;
pub const ADC_SMPR2_SMP15: u32 = 229376;
pub const ADC_SMPR2_SMP15_0: u32 = 32768;
pub const ADC_SMPR2_SMP15_1: u32 = 65536;
pub const ADC_SMPR2_SMP15_2: u32 = 131072;
pub const ADC_SMPR2_SMP16_Pos: u32 = 18;
pub const ADC_SMPR2_SMP16_Msk: u32 = 1835008;
pub const ADC_SMPR2_SMP16: u32 = 1835008;
pub const ADC_SMPR2_SMP16_0: u32 = 262144;
pub const ADC_SMPR2_SMP16_1: u32 = 524288;
pub const ADC_SMPR2_SMP16_2: u32 = 1048576;
pub const ADC_SMPR2_SMP17_Pos: u32 = 21;
pub const ADC_SMPR2_SMP17_Msk: u32 = 14680064;
pub const ADC_SMPR2_SMP17: u32 = 14680064;
pub const ADC_SMPR2_SMP17_0: u32 = 2097152;
pub const ADC_SMPR2_SMP17_1: u32 = 4194304;
pub const ADC_SMPR2_SMP17_2: u32 = 8388608;
pub const ADC_SMPR2_SMP18_Pos: u32 = 24;
pub const ADC_SMPR2_SMP18_Msk: u32 = 117440512;
pub const ADC_SMPR2_SMP18: u32 = 117440512;
pub const ADC_SMPR2_SMP18_0: u32 = 16777216;
pub const ADC_SMPR2_SMP18_1: u32 = 33554432;
pub const ADC_SMPR2_SMP18_2: u32 = 67108864;
pub const ADC_TR1_LT1_Pos: u32 = 0;
pub const ADC_TR1_LT1_Msk: u32 = 4095;
pub const ADC_TR1_LT1: u32 = 4095;
pub const ADC_TR1_LT1_0: u32 = 1;
pub const ADC_TR1_LT1_1: u32 = 2;
pub const ADC_TR1_LT1_2: u32 = 4;
pub const ADC_TR1_LT1_3: u32 = 8;
pub const ADC_TR1_LT1_4: u32 = 16;
pub const ADC_TR1_LT1_5: u32 = 32;
pub const ADC_TR1_LT1_6: u32 = 64;
pub const ADC_TR1_LT1_7: u32 = 128;
pub const ADC_TR1_LT1_8: u32 = 256;
pub const ADC_TR1_LT1_9: u32 = 512;
pub const ADC_TR1_LT1_10: u32 = 1024;
pub const ADC_TR1_LT1_11: u32 = 2048;
pub const ADC_TR1_HT1_Pos: u32 = 16;
pub const ADC_TR1_HT1_Msk: u32 = 268369920;
pub const ADC_TR1_HT1: u32 = 268369920;
pub const ADC_TR1_HT1_0: u32 = 65536;
pub const ADC_TR1_HT1_1: u32 = 131072;
pub const ADC_TR1_HT1_2: u32 = 262144;
pub const ADC_TR1_HT1_3: u32 = 524288;
pub const ADC_TR1_HT1_4: u32 = 1048576;
pub const ADC_TR1_HT1_5: u32 = 2097152;
pub const ADC_TR1_HT1_6: u32 = 4194304;
pub const ADC_TR1_HT1_7: u32 = 8388608;
pub const ADC_TR1_HT1_8: u32 = 16777216;
pub const ADC_TR1_HT1_9: u32 = 33554432;
pub const ADC_TR1_HT1_10: u32 = 67108864;
pub const ADC_TR1_HT1_11: u32 = 134217728;
pub const ADC_TR2_LT2_Pos: u32 = 0;
pub const ADC_TR2_LT2_Msk: u32 = 255;
pub const ADC_TR2_LT2: u32 = 255;
pub const ADC_TR2_LT2_0: u32 = 1;
pub const ADC_TR2_LT2_1: u32 = 2;
pub const ADC_TR2_LT2_2: u32 = 4;
pub const ADC_TR2_LT2_3: u32 = 8;
pub const ADC_TR2_LT2_4: u32 = 16;
pub const ADC_TR2_LT2_5: u32 = 32;
pub const ADC_TR2_LT2_6: u32 = 64;
pub const ADC_TR2_LT2_7: u32 = 128;
pub const ADC_TR2_HT2_Pos: u32 = 16;
pub const ADC_TR2_HT2_Msk: u32 = 16711680;
pub const ADC_TR2_HT2: u32 = 16711680;
pub const ADC_TR2_HT2_0: u32 = 65536;
pub const ADC_TR2_HT2_1: u32 = 131072;
pub const ADC_TR2_HT2_2: u32 = 262144;
pub const ADC_TR2_HT2_3: u32 = 524288;
pub const ADC_TR2_HT2_4: u32 = 1048576;
pub const ADC_TR2_HT2_5: u32 = 2097152;
pub const ADC_TR2_HT2_6: u32 = 4194304;
pub const ADC_TR2_HT2_7: u32 = 8388608;
pub const ADC_TR3_LT3_Pos: u32 = 0;
pub const ADC_TR3_LT3_Msk: u32 = 255;
pub const ADC_TR3_LT3: u32 = 255;
pub const ADC_TR3_LT3_0: u32 = 1;
pub const ADC_TR3_LT3_1: u32 = 2;
pub const ADC_TR3_LT3_2: u32 = 4;
pub const ADC_TR3_LT3_3: u32 = 8;
pub const ADC_TR3_LT3_4: u32 = 16;
pub const ADC_TR3_LT3_5: u32 = 32;
pub const ADC_TR3_LT3_6: u32 = 64;
pub const ADC_TR3_LT3_7: u32 = 128;
pub const ADC_TR3_HT3_Pos: u32 = 16;
pub const ADC_TR3_HT3_Msk: u32 = 16711680;
pub const ADC_TR3_HT3: u32 = 16711680;
pub const ADC_TR3_HT3_0: u32 = 65536;
pub const ADC_TR3_HT3_1: u32 = 131072;
pub const ADC_TR3_HT3_2: u32 = 262144;
pub const ADC_TR3_HT3_3: u32 = 524288;
pub const ADC_TR3_HT3_4: u32 = 1048576;
pub const ADC_TR3_HT3_5: u32 = 2097152;
pub const ADC_TR3_HT3_6: u32 = 4194304;
pub const ADC_TR3_HT3_7: u32 = 8388608;
pub const ADC_SQR1_L_Pos: u32 = 0;
pub const ADC_SQR1_L_Msk: u32 = 15;
pub const ADC_SQR1_L: u32 = 15;
pub const ADC_SQR1_L_0: u32 = 1;
pub const ADC_SQR1_L_1: u32 = 2;
pub const ADC_SQR1_L_2: u32 = 4;
pub const ADC_SQR1_L_3: u32 = 8;
pub const ADC_SQR1_SQ1_Pos: u32 = 6;
pub const ADC_SQR1_SQ1_Msk: u32 = 1984;
pub const ADC_SQR1_SQ1: u32 = 1984;
pub const ADC_SQR1_SQ1_0: u32 = 64;
pub const ADC_SQR1_SQ1_1: u32 = 128;
pub const ADC_SQR1_SQ1_2: u32 = 256;
pub const ADC_SQR1_SQ1_3: u32 = 512;
pub const ADC_SQR1_SQ1_4: u32 = 1024;
pub const ADC_SQR1_SQ2_Pos: u32 = 12;
pub const ADC_SQR1_SQ2_Msk: u32 = 126976;
pub const ADC_SQR1_SQ2: u32 = 126976;
pub const ADC_SQR1_SQ2_0: u32 = 4096;
pub const ADC_SQR1_SQ2_1: u32 = 8192;
pub const ADC_SQR1_SQ2_2: u32 = 16384;
pub const ADC_SQR1_SQ2_3: u32 = 32768;
pub const ADC_SQR1_SQ2_4: u32 = 65536;
pub const ADC_SQR1_SQ3_Pos: u32 = 18;
pub const ADC_SQR1_SQ3_Msk: u32 = 8126464;
pub const ADC_SQR1_SQ3: u32 = 8126464;
pub const ADC_SQR1_SQ3_0: u32 = 262144;
pub const ADC_SQR1_SQ3_1: u32 = 524288;
pub const ADC_SQR1_SQ3_2: u32 = 1048576;
pub const ADC_SQR1_SQ3_3: u32 = 2097152;
pub const ADC_SQR1_SQ3_4: u32 = 4194304;
pub const ADC_SQR1_SQ4_Pos: u32 = 24;
pub const ADC_SQR1_SQ4_Msk: u32 = 520093696;
pub const ADC_SQR1_SQ4: u32 = 520093696;
pub const ADC_SQR1_SQ4_0: u32 = 16777216;
pub const ADC_SQR1_SQ4_1: u32 = 33554432;
pub const ADC_SQR1_SQ4_2: u32 = 67108864;
pub const ADC_SQR1_SQ4_3: u32 = 134217728;
pub const ADC_SQR1_SQ4_4: u32 = 268435456;
pub const ADC_SQR2_SQ5_Pos: u32 = 0;
pub const ADC_SQR2_SQ5_Msk: u32 = 31;
pub const ADC_SQR2_SQ5: u32 = 31;
pub const ADC_SQR2_SQ5_0: u32 = 1;
pub const ADC_SQR2_SQ5_1: u32 = 2;
pub const ADC_SQR2_SQ5_2: u32 = 4;
pub const ADC_SQR2_SQ5_3: u32 = 8;
pub const ADC_SQR2_SQ5_4: u32 = 16;
pub const ADC_SQR2_SQ6_Pos: u32 = 6;
pub const ADC_SQR2_SQ6_Msk: u32 = 1984;
pub const ADC_SQR2_SQ6: u32 = 1984;
pub const ADC_SQR2_SQ6_0: u32 = 64;
pub const ADC_SQR2_SQ6_1: u32 = 128;
pub const ADC_SQR2_SQ6_2: u32 = 256;
pub const ADC_SQR2_SQ6_3: u32 = 512;
pub const ADC_SQR2_SQ6_4: u32 = 1024;
pub const ADC_SQR2_SQ7_Pos: u32 = 12;
pub const ADC_SQR2_SQ7_Msk: u32 = 126976;
pub const ADC_SQR2_SQ7: u32 = 126976;
pub const ADC_SQR2_SQ7_0: u32 = 4096;
pub const ADC_SQR2_SQ7_1: u32 = 8192;
pub const ADC_SQR2_SQ7_2: u32 = 16384;
pub const ADC_SQR2_SQ7_3: u32 = 32768;
pub const ADC_SQR2_SQ7_4: u32 = 65536;
pub const ADC_SQR2_SQ8_Pos: u32 = 18;
pub const ADC_SQR2_SQ8_Msk: u32 = 8126464;
pub const ADC_SQR2_SQ8: u32 = 8126464;
pub const ADC_SQR2_SQ8_0: u32 = 262144;
pub const ADC_SQR2_SQ8_1: u32 = 524288;
pub const ADC_SQR2_SQ8_2: u32 = 1048576;
pub const ADC_SQR2_SQ8_3: u32 = 2097152;
pub const ADC_SQR2_SQ8_4: u32 = 4194304;
pub const ADC_SQR2_SQ9_Pos: u32 = 24;
pub const ADC_SQR2_SQ9_Msk: u32 = 520093696;
pub const ADC_SQR2_SQ9: u32 = 520093696;
pub const ADC_SQR2_SQ9_0: u32 = 16777216;
pub const ADC_SQR2_SQ9_1: u32 = 33554432;
pub const ADC_SQR2_SQ9_2: u32 = 67108864;
pub const ADC_SQR2_SQ9_3: u32 = 134217728;
pub const ADC_SQR2_SQ9_4: u32 = 268435456;
pub const ADC_SQR3_SQ10_Pos: u32 = 0;
pub const ADC_SQR3_SQ10_Msk: u32 = 31;
pub const ADC_SQR3_SQ10: u32 = 31;
pub const ADC_SQR3_SQ10_0: u32 = 1;
pub const ADC_SQR3_SQ10_1: u32 = 2;
pub const ADC_SQR3_SQ10_2: u32 = 4;
pub const ADC_SQR3_SQ10_3: u32 = 8;
pub const ADC_SQR3_SQ10_4: u32 = 16;
pub const ADC_SQR3_SQ11_Pos: u32 = 6;
pub const ADC_SQR3_SQ11_Msk: u32 = 1984;
pub const ADC_SQR3_SQ11: u32 = 1984;
pub const ADC_SQR3_SQ11_0: u32 = 64;
pub const ADC_SQR3_SQ11_1: u32 = 128;
pub const ADC_SQR3_SQ11_2: u32 = 256;
pub const ADC_SQR3_SQ11_3: u32 = 512;
pub const ADC_SQR3_SQ11_4: u32 = 1024;
pub const ADC_SQR3_SQ12_Pos: u32 = 12;
pub const ADC_SQR3_SQ12_Msk: u32 = 126976;
pub const ADC_SQR3_SQ12: u32 = 126976;
pub const ADC_SQR3_SQ12_0: u32 = 4096;
pub const ADC_SQR3_SQ12_1: u32 = 8192;
pub const ADC_SQR3_SQ12_2: u32 = 16384;
pub const ADC_SQR3_SQ12_3: u32 = 32768;
pub const ADC_SQR3_SQ12_4: u32 = 65536;
pub const ADC_SQR3_SQ13_Pos: u32 = 18;
pub const ADC_SQR3_SQ13_Msk: u32 = 8126464;
pub const ADC_SQR3_SQ13: u32 = 8126464;
pub const ADC_SQR3_SQ13_0: u32 = 262144;
pub const ADC_SQR3_SQ13_1: u32 = 524288;
pub const ADC_SQR3_SQ13_2: u32 = 1048576;
pub const ADC_SQR3_SQ13_3: u32 = 2097152;
pub const ADC_SQR3_SQ13_4: u32 = 4194304;
pub const ADC_SQR3_SQ14_Pos: u32 = 24;
pub const ADC_SQR3_SQ14_Msk: u32 = 520093696;
pub const ADC_SQR3_SQ14: u32 = 520093696;
pub const ADC_SQR3_SQ14_0: u32 = 16777216;
pub const ADC_SQR3_SQ14_1: u32 = 33554432;
pub const ADC_SQR3_SQ14_2: u32 = 67108864;
pub const ADC_SQR3_SQ14_3: u32 = 134217728;
pub const ADC_SQR3_SQ14_4: u32 = 268435456;
pub const ADC_SQR4_SQ15_Pos: u32 = 0;
pub const ADC_SQR4_SQ15_Msk: u32 = 31;
pub const ADC_SQR4_SQ15: u32 = 31;
pub const ADC_SQR4_SQ15_0: u32 = 1;
pub const ADC_SQR4_SQ15_1: u32 = 2;
pub const ADC_SQR4_SQ15_2: u32 = 4;
pub const ADC_SQR4_SQ15_3: u32 = 8;
pub const ADC_SQR4_SQ15_4: u32 = 16;
pub const ADC_SQR4_SQ16_Pos: u32 = 6;
pub const ADC_SQR4_SQ16_Msk: u32 = 1984;
pub const ADC_SQR4_SQ16: u32 = 1984;
pub const ADC_SQR4_SQ16_0: u32 = 64;
pub const ADC_SQR4_SQ16_1: u32 = 128;
pub const ADC_SQR4_SQ16_2: u32 = 256;
pub const ADC_SQR4_SQ16_3: u32 = 512;
pub const ADC_SQR4_SQ16_4: u32 = 1024;
pub const ADC_DR_RDATA_Pos: u32 = 0;
pub const ADC_DR_RDATA_Msk: u32 = 65535;
pub const ADC_DR_RDATA: u32 = 65535;
pub const ADC_DR_RDATA_0: u32 = 1;
pub const ADC_DR_RDATA_1: u32 = 2;
pub const ADC_DR_RDATA_2: u32 = 4;
pub const ADC_DR_RDATA_3: u32 = 8;
pub const ADC_DR_RDATA_4: u32 = 16;
pub const ADC_DR_RDATA_5: u32 = 32;
pub const ADC_DR_RDATA_6: u32 = 64;
pub const ADC_DR_RDATA_7: u32 = 128;
pub const ADC_DR_RDATA_8: u32 = 256;
pub const ADC_DR_RDATA_9: u32 = 512;
pub const ADC_DR_RDATA_10: u32 = 1024;
pub const ADC_DR_RDATA_11: u32 = 2048;
pub const ADC_DR_RDATA_12: u32 = 4096;
pub const ADC_DR_RDATA_13: u32 = 8192;
pub const ADC_DR_RDATA_14: u32 = 16384;
pub const ADC_DR_RDATA_15: u32 = 32768;
pub const ADC_JSQR_JL_Pos: u32 = 0;
pub const ADC_JSQR_JL_Msk: u32 = 3;
pub const ADC_JSQR_JL: u32 = 3;
pub const ADC_JSQR_JL_0: u32 = 1;
pub const ADC_JSQR_JL_1: u32 = 2;
pub const ADC_JSQR_JEXTSEL_Pos: u32 = 2;
pub const ADC_JSQR_JEXTSEL_Msk: u32 = 60;
pub const ADC_JSQR_JEXTSEL: u32 = 60;
pub const ADC_JSQR_JEXTSEL_0: u32 = 4;
pub const ADC_JSQR_JEXTSEL_1: u32 = 8;
pub const ADC_JSQR_JEXTSEL_2: u32 = 16;
pub const ADC_JSQR_JEXTSEL_3: u32 = 32;
pub const ADC_JSQR_JEXTEN_Pos: u32 = 6;
pub const ADC_JSQR_JEXTEN_Msk: u32 = 192;
pub const ADC_JSQR_JEXTEN: u32 = 192;
pub const ADC_JSQR_JEXTEN_0: u32 = 64;
pub const ADC_JSQR_JEXTEN_1: u32 = 128;
pub const ADC_JSQR_JSQ1_Pos: u32 = 8;
pub const ADC_JSQR_JSQ1_Msk: u32 = 7936;
pub const ADC_JSQR_JSQ1: u32 = 7936;
pub const ADC_JSQR_JSQ1_0: u32 = 256;
pub const ADC_JSQR_JSQ1_1: u32 = 512;
pub const ADC_JSQR_JSQ1_2: u32 = 1024;
pub const ADC_JSQR_JSQ1_3: u32 = 2048;
pub const ADC_JSQR_JSQ1_4: u32 = 4096;
pub const ADC_JSQR_JSQ2_Pos: u32 = 14;
pub const ADC_JSQR_JSQ2_Msk: u32 = 507904;
pub const ADC_JSQR_JSQ2: u32 = 507904;
pub const ADC_JSQR_JSQ2_0: u32 = 16384;
pub const ADC_JSQR_JSQ2_1: u32 = 32768;
pub const ADC_JSQR_JSQ2_2: u32 = 65536;
pub const ADC_JSQR_JSQ2_3: u32 = 131072;
pub const ADC_JSQR_JSQ2_4: u32 = 262144;
pub const ADC_JSQR_JSQ3_Pos: u32 = 20;
pub const ADC_JSQR_JSQ3_Msk: u32 = 32505856;
pub const ADC_JSQR_JSQ3: u32 = 32505856;
pub const ADC_JSQR_JSQ3_0: u32 = 1048576;
pub const ADC_JSQR_JSQ3_1: u32 = 2097152;
pub const ADC_JSQR_JSQ3_2: u32 = 4194304;
pub const ADC_JSQR_JSQ3_3: u32 = 8388608;
pub const ADC_JSQR_JSQ3_4: u32 = 16777216;
pub const ADC_JSQR_JSQ4_Pos: u32 = 26;
pub const ADC_JSQR_JSQ4_Msk: u32 = 2080374784;
pub const ADC_JSQR_JSQ4: u32 = 2080374784;
pub const ADC_JSQR_JSQ4_0: u32 = 67108864;
pub const ADC_JSQR_JSQ4_1: u32 = 134217728;
pub const ADC_JSQR_JSQ4_2: u32 = 268435456;
pub const ADC_JSQR_JSQ4_3: u32 = 536870912;
pub const ADC_JSQR_JSQ4_4: u32 = 1073741824;
pub const ADC_OFR1_OFFSET1_Pos: u32 = 0;
pub const ADC_OFR1_OFFSET1_Msk: u32 = 4095;
pub const ADC_OFR1_OFFSET1: u32 = 4095;
pub const ADC_OFR1_OFFSET1_0: u32 = 1;
pub const ADC_OFR1_OFFSET1_1: u32 = 2;
pub const ADC_OFR1_OFFSET1_2: u32 = 4;
pub const ADC_OFR1_OFFSET1_3: u32 = 8;
pub const ADC_OFR1_OFFSET1_4: u32 = 16;
pub const ADC_OFR1_OFFSET1_5: u32 = 32;
pub const ADC_OFR1_OFFSET1_6: u32 = 64;
pub const ADC_OFR1_OFFSET1_7: u32 = 128;
pub const ADC_OFR1_OFFSET1_8: u32 = 256;
pub const ADC_OFR1_OFFSET1_9: u32 = 512;
pub const ADC_OFR1_OFFSET1_10: u32 = 1024;
pub const ADC_OFR1_OFFSET1_11: u32 = 2048;
pub const ADC_OFR1_OFFSET1_CH_Pos: u32 = 26;
pub const ADC_OFR1_OFFSET1_CH_Msk: u32 = 2080374784;
pub const ADC_OFR1_OFFSET1_CH: u32 = 2080374784;
pub const ADC_OFR1_OFFSET1_CH_0: u32 = 67108864;
pub const ADC_OFR1_OFFSET1_CH_1: u32 = 134217728;
pub const ADC_OFR1_OFFSET1_CH_2: u32 = 268435456;
pub const ADC_OFR1_OFFSET1_CH_3: u32 = 536870912;
pub const ADC_OFR1_OFFSET1_CH_4: u32 = 1073741824;
pub const ADC_OFR1_OFFSET1_EN_Pos: u32 = 31;
pub const ADC_OFR1_OFFSET1_EN_Msk: u32 = 2147483648;
pub const ADC_OFR1_OFFSET1_EN: u32 = 2147483648;
pub const ADC_OFR2_OFFSET2_Pos: u32 = 0;
pub const ADC_OFR2_OFFSET2_Msk: u32 = 4095;
pub const ADC_OFR2_OFFSET2: u32 = 4095;
pub const ADC_OFR2_OFFSET2_0: u32 = 1;
pub const ADC_OFR2_OFFSET2_1: u32 = 2;
pub const ADC_OFR2_OFFSET2_2: u32 = 4;
pub const ADC_OFR2_OFFSET2_3: u32 = 8;
pub const ADC_OFR2_OFFSET2_4: u32 = 16;
pub const ADC_OFR2_OFFSET2_5: u32 = 32;
pub const ADC_OFR2_OFFSET2_6: u32 = 64;
pub const ADC_OFR2_OFFSET2_7: u32 = 128;
pub const ADC_OFR2_OFFSET2_8: u32 = 256;
pub const ADC_OFR2_OFFSET2_9: u32 = 512;
pub const ADC_OFR2_OFFSET2_10: u32 = 1024;
pub const ADC_OFR2_OFFSET2_11: u32 = 2048;
pub const ADC_OFR2_OFFSET2_CH_Pos: u32 = 26;
pub const ADC_OFR2_OFFSET2_CH_Msk: u32 = 2080374784;
pub const ADC_OFR2_OFFSET2_CH: u32 = 2080374784;
pub const ADC_OFR2_OFFSET2_CH_0: u32 = 67108864;
pub const ADC_OFR2_OFFSET2_CH_1: u32 = 134217728;
pub const ADC_OFR2_OFFSET2_CH_2: u32 = 268435456;
pub const ADC_OFR2_OFFSET2_CH_3: u32 = 536870912;
pub const ADC_OFR2_OFFSET2_CH_4: u32 = 1073741824;
pub const ADC_OFR2_OFFSET2_EN_Pos: u32 = 31;
pub const ADC_OFR2_OFFSET2_EN_Msk: u32 = 2147483648;
pub const ADC_OFR2_OFFSET2_EN: u32 = 2147483648;
pub const ADC_OFR3_OFFSET3_Pos: u32 = 0;
pub const ADC_OFR3_OFFSET3_Msk: u32 = 4095;
pub const ADC_OFR3_OFFSET3: u32 = 4095;
pub const ADC_OFR3_OFFSET3_0: u32 = 1;
pub const ADC_OFR3_OFFSET3_1: u32 = 2;
pub const ADC_OFR3_OFFSET3_2: u32 = 4;
pub const ADC_OFR3_OFFSET3_3: u32 = 8;
pub const ADC_OFR3_OFFSET3_4: u32 = 16;
pub const ADC_OFR3_OFFSET3_5: u32 = 32;
pub const ADC_OFR3_OFFSET3_6: u32 = 64;
pub const ADC_OFR3_OFFSET3_7: u32 = 128;
pub const ADC_OFR3_OFFSET3_8: u32 = 256;
pub const ADC_OFR3_OFFSET3_9: u32 = 512;
pub const ADC_OFR3_OFFSET3_10: u32 = 1024;
pub const ADC_OFR3_OFFSET3_11: u32 = 2048;
pub const ADC_OFR3_OFFSET3_CH_Pos: u32 = 26;
pub const ADC_OFR3_OFFSET3_CH_Msk: u32 = 2080374784;
pub const ADC_OFR3_OFFSET3_CH: u32 = 2080374784;
pub const ADC_OFR3_OFFSET3_CH_0: u32 = 67108864;
pub const ADC_OFR3_OFFSET3_CH_1: u32 = 134217728;
pub const ADC_OFR3_OFFSET3_CH_2: u32 = 268435456;
pub const ADC_OFR3_OFFSET3_CH_3: u32 = 536870912;
pub const ADC_OFR3_OFFSET3_CH_4: u32 = 1073741824;
pub const ADC_OFR3_OFFSET3_EN_Pos: u32 = 31;
pub const ADC_OFR3_OFFSET3_EN_Msk: u32 = 2147483648;
pub const ADC_OFR3_OFFSET3_EN: u32 = 2147483648;
pub const ADC_OFR4_OFFSET4_Pos: u32 = 0;
pub const ADC_OFR4_OFFSET4_Msk: u32 = 4095;
pub const ADC_OFR4_OFFSET4: u32 = 4095;
pub const ADC_OFR4_OFFSET4_0: u32 = 1;
pub const ADC_OFR4_OFFSET4_1: u32 = 2;
pub const ADC_OFR4_OFFSET4_2: u32 = 4;
pub const ADC_OFR4_OFFSET4_3: u32 = 8;
pub const ADC_OFR4_OFFSET4_4: u32 = 16;
pub const ADC_OFR4_OFFSET4_5: u32 = 32;
pub const ADC_OFR4_OFFSET4_6: u32 = 64;
pub const ADC_OFR4_OFFSET4_7: u32 = 128;
pub const ADC_OFR4_OFFSET4_8: u32 = 256;
pub const ADC_OFR4_OFFSET4_9: u32 = 512;
pub const ADC_OFR4_OFFSET4_10: u32 = 1024;
pub const ADC_OFR4_OFFSET4_11: u32 = 2048;
pub const ADC_OFR4_OFFSET4_CH_Pos: u32 = 26;
pub const ADC_OFR4_OFFSET4_CH_Msk: u32 = 2080374784;
pub const ADC_OFR4_OFFSET4_CH: u32 = 2080374784;
pub const ADC_OFR4_OFFSET4_CH_0: u32 = 67108864;
pub const ADC_OFR4_OFFSET4_CH_1: u32 = 134217728;
pub const ADC_OFR4_OFFSET4_CH_2: u32 = 268435456;
pub const ADC_OFR4_OFFSET4_CH_3: u32 = 536870912;
pub const ADC_OFR4_OFFSET4_CH_4: u32 = 1073741824;
pub const ADC_OFR4_OFFSET4_EN_Pos: u32 = 31;
pub const ADC_OFR4_OFFSET4_EN_Msk: u32 = 2147483648;
pub const ADC_OFR4_OFFSET4_EN: u32 = 2147483648;
pub const ADC_JDR1_JDATA_Pos: u32 = 0;
pub const ADC_JDR1_JDATA_Msk: u32 = 65535;
pub const ADC_JDR1_JDATA: u32 = 65535;
pub const ADC_JDR1_JDATA_0: u32 = 1;
pub const ADC_JDR1_JDATA_1: u32 = 2;
pub const ADC_JDR1_JDATA_2: u32 = 4;
pub const ADC_JDR1_JDATA_3: u32 = 8;
pub const ADC_JDR1_JDATA_4: u32 = 16;
pub const ADC_JDR1_JDATA_5: u32 = 32;
pub const ADC_JDR1_JDATA_6: u32 = 64;
pub const ADC_JDR1_JDATA_7: u32 = 128;
pub const ADC_JDR1_JDATA_8: u32 = 256;
pub const ADC_JDR1_JDATA_9: u32 = 512;
pub const ADC_JDR1_JDATA_10: u32 = 1024;
pub const ADC_JDR1_JDATA_11: u32 = 2048;
pub const ADC_JDR1_JDATA_12: u32 = 4096;
pub const ADC_JDR1_JDATA_13: u32 = 8192;
pub const ADC_JDR1_JDATA_14: u32 = 16384;
pub const ADC_JDR1_JDATA_15: u32 = 32768;
pub const ADC_JDR2_JDATA_Pos: u32 = 0;
pub const ADC_JDR2_JDATA_Msk: u32 = 65535;
pub const ADC_JDR2_JDATA: u32 = 65535;
pub const ADC_JDR2_JDATA_0: u32 = 1;
pub const ADC_JDR2_JDATA_1: u32 = 2;
pub const ADC_JDR2_JDATA_2: u32 = 4;
pub const ADC_JDR2_JDATA_3: u32 = 8;
pub const ADC_JDR2_JDATA_4: u32 = 16;
pub const ADC_JDR2_JDATA_5: u32 = 32;
pub const ADC_JDR2_JDATA_6: u32 = 64;
pub const ADC_JDR2_JDATA_7: u32 = 128;
pub const ADC_JDR2_JDATA_8: u32 = 256;
pub const ADC_JDR2_JDATA_9: u32 = 512;
pub const ADC_JDR2_JDATA_10: u32 = 1024;
pub const ADC_JDR2_JDATA_11: u32 = 2048;
pub const ADC_JDR2_JDATA_12: u32 = 4096;
pub const ADC_JDR2_JDATA_13: u32 = 8192;
pub const ADC_JDR2_JDATA_14: u32 = 16384;
pub const ADC_JDR2_JDATA_15: u32 = 32768;
pub const ADC_JDR3_JDATA_Pos: u32 = 0;
pub const ADC_JDR3_JDATA_Msk: u32 = 65535;
pub const ADC_JDR3_JDATA: u32 = 65535;
pub const ADC_JDR3_JDATA_0: u32 = 1;
pub const ADC_JDR3_JDATA_1: u32 = 2;
pub const ADC_JDR3_JDATA_2: u32 = 4;
pub const ADC_JDR3_JDATA_3: u32 = 8;
pub const ADC_JDR3_JDATA_4: u32 = 16;
pub const ADC_JDR3_JDATA_5: u32 = 32;
pub const ADC_JDR3_JDATA_6: u32 = 64;
pub const ADC_JDR3_JDATA_7: u32 = 128;
pub const ADC_JDR3_JDATA_8: u32 = 256;
pub const ADC_JDR3_JDATA_9: u32 = 512;
pub const ADC_JDR3_JDATA_10: u32 = 1024;
pub const ADC_JDR3_JDATA_11: u32 = 2048;
pub const ADC_JDR3_JDATA_12: u32 = 4096;
pub const ADC_JDR3_JDATA_13: u32 = 8192;
pub const ADC_JDR3_JDATA_14: u32 = 16384;
pub const ADC_JDR3_JDATA_15: u32 = 32768;
pub const ADC_JDR4_JDATA_Pos: u32 = 0;
pub const ADC_JDR4_JDATA_Msk: u32 = 65535;
pub const ADC_JDR4_JDATA: u32 = 65535;
pub const ADC_JDR4_JDATA_0: u32 = 1;
pub const ADC_JDR4_JDATA_1: u32 = 2;
pub const ADC_JDR4_JDATA_2: u32 = 4;
pub const ADC_JDR4_JDATA_3: u32 = 8;
pub const ADC_JDR4_JDATA_4: u32 = 16;
pub const ADC_JDR4_JDATA_5: u32 = 32;
pub const ADC_JDR4_JDATA_6: u32 = 64;
pub const ADC_JDR4_JDATA_7: u32 = 128;
pub const ADC_JDR4_JDATA_8: u32 = 256;
pub const ADC_JDR4_JDATA_9: u32 = 512;
pub const ADC_JDR4_JDATA_10: u32 = 1024;
pub const ADC_JDR4_JDATA_11: u32 = 2048;
pub const ADC_JDR4_JDATA_12: u32 = 4096;
pub const ADC_JDR4_JDATA_13: u32 = 8192;
pub const ADC_JDR4_JDATA_14: u32 = 16384;
pub const ADC_JDR4_JDATA_15: u32 = 32768;
pub const ADC_AWD2CR_AWD2CH_Pos: u32 = 1;
pub const ADC_AWD2CR_AWD2CH_Msk: u32 = 524286;
pub const ADC_AWD2CR_AWD2CH: u32 = 524286;
pub const ADC_AWD2CR_AWD2CH_0: u32 = 2;
pub const ADC_AWD2CR_AWD2CH_1: u32 = 4;
pub const ADC_AWD2CR_AWD2CH_2: u32 = 8;
pub const ADC_AWD2CR_AWD2CH_3: u32 = 16;
pub const ADC_AWD2CR_AWD2CH_4: u32 = 32;
pub const ADC_AWD2CR_AWD2CH_5: u32 = 64;
pub const ADC_AWD2CR_AWD2CH_6: u32 = 128;
pub const ADC_AWD2CR_AWD2CH_7: u32 = 256;
pub const ADC_AWD2CR_AWD2CH_8: u32 = 512;
pub const ADC_AWD2CR_AWD2CH_9: u32 = 1024;
pub const ADC_AWD2CR_AWD2CH_10: u32 = 2048;
pub const ADC_AWD2CR_AWD2CH_11: u32 = 4096;
pub const ADC_AWD2CR_AWD2CH_12: u32 = 8192;
pub const ADC_AWD2CR_AWD2CH_13: u32 = 16384;
pub const ADC_AWD2CR_AWD2CH_14: u32 = 32768;
pub const ADC_AWD2CR_AWD2CH_15: u32 = 65536;
pub const ADC_AWD2CR_AWD2CH_16: u32 = 131072;
pub const ADC_AWD2CR_AWD2CH_17: u32 = 262144;
pub const ADC_AWD3CR_AWD3CH_Pos: u32 = 1;
pub const ADC_AWD3CR_AWD3CH_Msk: u32 = 524286;
pub const ADC_AWD3CR_AWD3CH: u32 = 524286;
pub const ADC_AWD3CR_AWD3CH_0: u32 = 2;
pub const ADC_AWD3CR_AWD3CH_1: u32 = 4;
pub const ADC_AWD3CR_AWD3CH_2: u32 = 8;
pub const ADC_AWD3CR_AWD3CH_3: u32 = 16;
pub const ADC_AWD3CR_AWD3CH_4: u32 = 32;
pub const ADC_AWD3CR_AWD3CH_5: u32 = 64;
pub const ADC_AWD3CR_AWD3CH_6: u32 = 128;
pub const ADC_AWD3CR_AWD3CH_7: u32 = 256;
pub const ADC_AWD3CR_AWD3CH_8: u32 = 512;
pub const ADC_AWD3CR_AWD3CH_9: u32 = 1024;
pub const ADC_AWD3CR_AWD3CH_10: u32 = 2048;
pub const ADC_AWD3CR_AWD3CH_11: u32 = 4096;
pub const ADC_AWD3CR_AWD3CH_12: u32 = 8192;
pub const ADC_AWD3CR_AWD3CH_13: u32 = 16384;
pub const ADC_AWD3CR_AWD3CH_14: u32 = 32768;
pub const ADC_AWD3CR_AWD3CH_15: u32 = 65536;
pub const ADC_AWD3CR_AWD3CH_16: u32 = 131072;
pub const ADC_AWD3CR_AWD3CH_17: u32 = 262144;
pub const ADC_DIFSEL_DIFSEL_Pos: u32 = 1;
pub const ADC_DIFSEL_DIFSEL_Msk: u32 = 524286;
pub const ADC_DIFSEL_DIFSEL: u32 = 524286;
pub const ADC_DIFSEL_DIFSEL_0: u32 = 2;
pub const ADC_DIFSEL_DIFSEL_1: u32 = 4;
pub const ADC_DIFSEL_DIFSEL_2: u32 = 8;
pub const ADC_DIFSEL_DIFSEL_3: u32 = 16;
pub const ADC_DIFSEL_DIFSEL_4: u32 = 32;
pub const ADC_DIFSEL_DIFSEL_5: u32 = 64;
pub const ADC_DIFSEL_DIFSEL_6: u32 = 128;
pub const ADC_DIFSEL_DIFSEL_7: u32 = 256;
pub const ADC_DIFSEL_DIFSEL_8: u32 = 512;
pub const ADC_DIFSEL_DIFSEL_9: u32 = 1024;
pub const ADC_DIFSEL_DIFSEL_10: u32 = 2048;
pub const ADC_DIFSEL_DIFSEL_11: u32 = 4096;
pub const ADC_DIFSEL_DIFSEL_12: u32 = 8192;
pub const ADC_DIFSEL_DIFSEL_13: u32 = 16384;
pub const ADC_DIFSEL_DIFSEL_14: u32 = 32768;
pub const ADC_DIFSEL_DIFSEL_15: u32 = 65536;
pub const ADC_DIFSEL_DIFSEL_16: u32 = 131072;
pub const ADC_DIFSEL_DIFSEL_17: u32 = 262144;
pub const ADC_CALFACT_CALFACT_S_Pos: u32 = 0;
pub const ADC_CALFACT_CALFACT_S_Msk: u32 = 127;
pub const ADC_CALFACT_CALFACT_S: u32 = 127;
pub const ADC_CALFACT_CALFACT_S_0: u32 = 1;
pub const ADC_CALFACT_CALFACT_S_1: u32 = 2;
pub const ADC_CALFACT_CALFACT_S_2: u32 = 4;
pub const ADC_CALFACT_CALFACT_S_3: u32 = 8;
pub const ADC_CALFACT_CALFACT_S_4: u32 = 16;
pub const ADC_CALFACT_CALFACT_S_5: u32 = 32;
pub const ADC_CALFACT_CALFACT_S_6: u32 = 64;
pub const ADC_CALFACT_CALFACT_D_Pos: u32 = 16;
pub const ADC_CALFACT_CALFACT_D_Msk: u32 = 8323072;
pub const ADC_CALFACT_CALFACT_D: u32 = 8323072;
pub const ADC_CALFACT_CALFACT_D_0: u32 = 65536;
pub const ADC_CALFACT_CALFACT_D_1: u32 = 131072;
pub const ADC_CALFACT_CALFACT_D_2: u32 = 262144;
pub const ADC_CALFACT_CALFACT_D_3: u32 = 524288;
pub const ADC_CALFACT_CALFACT_D_4: u32 = 1048576;
pub const ADC_CALFACT_CALFACT_D_5: u32 = 2097152;
pub const ADC_CALFACT_CALFACT_D_6: u32 = 4194304;
pub const ADC12_CSR_ADRDY_MST_Pos: u32 = 0;
pub const ADC12_CSR_ADRDY_MST_Msk: u32 = 1;
pub const ADC12_CSR_ADRDY_MST: u32 = 1;
pub const ADC12_CSR_ADRDY_EOSMP_MST_Pos: u32 = 1;
pub const ADC12_CSR_ADRDY_EOSMP_MST_Msk: u32 = 2;
pub const ADC12_CSR_ADRDY_EOSMP_MST: u32 = 2;
pub const ADC12_CSR_ADRDY_EOC_MST_Pos: u32 = 2;
pub const ADC12_CSR_ADRDY_EOC_MST_Msk: u32 = 4;
pub const ADC12_CSR_ADRDY_EOC_MST: u32 = 4;
pub const ADC12_CSR_ADRDY_EOS_MST_Pos: u32 = 3;
pub const ADC12_CSR_ADRDY_EOS_MST_Msk: u32 = 8;
pub const ADC12_CSR_ADRDY_EOS_MST: u32 = 8;
pub const ADC12_CSR_ADRDY_OVR_MST_Pos: u32 = 4;
pub const ADC12_CSR_ADRDY_OVR_MST_Msk: u32 = 16;
pub const ADC12_CSR_ADRDY_OVR_MST: u32 = 16;
pub const ADC12_CSR_ADRDY_JEOC_MST_Pos: u32 = 5;
pub const ADC12_CSR_ADRDY_JEOC_MST_Msk: u32 = 32;
pub const ADC12_CSR_ADRDY_JEOC_MST: u32 = 32;
pub const ADC12_CSR_ADRDY_JEOS_MST_Pos: u32 = 6;
pub const ADC12_CSR_ADRDY_JEOS_MST_Msk: u32 = 64;
pub const ADC12_CSR_ADRDY_JEOS_MST: u32 = 64;
pub const ADC12_CSR_AWD1_MST_Pos: u32 = 7;
pub const ADC12_CSR_AWD1_MST_Msk: u32 = 128;
pub const ADC12_CSR_AWD1_MST: u32 = 128;
pub const ADC12_CSR_AWD2_MST_Pos: u32 = 8;
pub const ADC12_CSR_AWD2_MST_Msk: u32 = 256;
pub const ADC12_CSR_AWD2_MST: u32 = 256;
pub const ADC12_CSR_AWD3_MST_Pos: u32 = 9;
pub const ADC12_CSR_AWD3_MST_Msk: u32 = 512;
pub const ADC12_CSR_AWD3_MST: u32 = 512;
pub const ADC12_CSR_JQOVF_MST_Pos: u32 = 10;
pub const ADC12_CSR_JQOVF_MST_Msk: u32 = 1024;
pub const ADC12_CSR_JQOVF_MST: u32 = 1024;
pub const ADC12_CSR_ADRDY_SLV_Pos: u32 = 16;
pub const ADC12_CSR_ADRDY_SLV_Msk: u32 = 65536;
pub const ADC12_CSR_ADRDY_SLV: u32 = 65536;
pub const ADC12_CSR_ADRDY_EOSMP_SLV_Pos: u32 = 17;
pub const ADC12_CSR_ADRDY_EOSMP_SLV_Msk: u32 = 131072;
pub const ADC12_CSR_ADRDY_EOSMP_SLV: u32 = 131072;
pub const ADC12_CSR_ADRDY_EOC_SLV_Pos: u32 = 18;
pub const ADC12_CSR_ADRDY_EOC_SLV_Msk: u32 = 262144;
pub const ADC12_CSR_ADRDY_EOC_SLV: u32 = 262144;
pub const ADC12_CSR_ADRDY_EOS_SLV_Pos: u32 = 19;
pub const ADC12_CSR_ADRDY_EOS_SLV_Msk: u32 = 524288;
pub const ADC12_CSR_ADRDY_EOS_SLV: u32 = 524288;
pub const ADC12_CSR_ADRDY_OVR_SLV_Pos: u32 = 20;
pub const ADC12_CSR_ADRDY_OVR_SLV_Msk: u32 = 1048576;
pub const ADC12_CSR_ADRDY_OVR_SLV: u32 = 1048576;
pub const ADC12_CSR_ADRDY_JEOC_SLV_Pos: u32 = 21;
pub const ADC12_CSR_ADRDY_JEOC_SLV_Msk: u32 = 2097152;
pub const ADC12_CSR_ADRDY_JEOC_SLV: u32 = 2097152;
pub const ADC12_CSR_ADRDY_JEOS_SLV_Pos: u32 = 22;
pub const ADC12_CSR_ADRDY_JEOS_SLV_Msk: u32 = 4194304;
pub const ADC12_CSR_ADRDY_JEOS_SLV: u32 = 4194304;
pub const ADC12_CSR_AWD1_SLV_Pos: u32 = 23;
pub const ADC12_CSR_AWD1_SLV_Msk: u32 = 8388608;
pub const ADC12_CSR_AWD1_SLV: u32 = 8388608;
pub const ADC12_CSR_AWD2_SLV_Pos: u32 = 24;
pub const ADC12_CSR_AWD2_SLV_Msk: u32 = 16777216;
pub const ADC12_CSR_AWD2_SLV: u32 = 16777216;
pub const ADC12_CSR_AWD3_SLV_Pos: u32 = 25;
pub const ADC12_CSR_AWD3_SLV_Msk: u32 = 33554432;
pub const ADC12_CSR_AWD3_SLV: u32 = 33554432;
pub const ADC12_CSR_JQOVF_SLV_Pos: u32 = 26;
pub const ADC12_CSR_JQOVF_SLV_Msk: u32 = 67108864;
pub const ADC12_CSR_JQOVF_SLV: u32 = 67108864;
pub const ADC34_CSR_ADRDY_MST_Pos: u32 = 0;
pub const ADC34_CSR_ADRDY_MST_Msk: u32 = 1;
pub const ADC34_CSR_ADRDY_MST: u32 = 1;
pub const ADC34_CSR_ADRDY_EOSMP_MST_Pos: u32 = 1;
pub const ADC34_CSR_ADRDY_EOSMP_MST_Msk: u32 = 2;
pub const ADC34_CSR_ADRDY_EOSMP_MST: u32 = 2;
pub const ADC34_CSR_ADRDY_EOC_MST_Pos: u32 = 2;
pub const ADC34_CSR_ADRDY_EOC_MST_Msk: u32 = 4;
pub const ADC34_CSR_ADRDY_EOC_MST: u32 = 4;
pub const ADC34_CSR_ADRDY_EOS_MST_Pos: u32 = 3;
pub const ADC34_CSR_ADRDY_EOS_MST_Msk: u32 = 8;
pub const ADC34_CSR_ADRDY_EOS_MST: u32 = 8;
pub const ADC34_CSR_ADRDY_OVR_MST_Pos: u32 = 4;
pub const ADC34_CSR_ADRDY_OVR_MST_Msk: u32 = 16;
pub const ADC34_CSR_ADRDY_OVR_MST: u32 = 16;
pub const ADC34_CSR_ADRDY_JEOC_MST_Pos: u32 = 5;
pub const ADC34_CSR_ADRDY_JEOC_MST_Msk: u32 = 32;
pub const ADC34_CSR_ADRDY_JEOC_MST: u32 = 32;
pub const ADC34_CSR_ADRDY_JEOS_MST_Pos: u32 = 6;
pub const ADC34_CSR_ADRDY_JEOS_MST_Msk: u32 = 64;
pub const ADC34_CSR_ADRDY_JEOS_MST: u32 = 64;
pub const ADC34_CSR_AWD1_MST_Pos: u32 = 7;
pub const ADC34_CSR_AWD1_MST_Msk: u32 = 128;
pub const ADC34_CSR_AWD1_MST: u32 = 128;
pub const ADC34_CSR_AWD2_MST_Pos: u32 = 8;
pub const ADC34_CSR_AWD2_MST_Msk: u32 = 256;
pub const ADC34_CSR_AWD2_MST: u32 = 256;
pub const ADC34_CSR_AWD3_MST_Pos: u32 = 9;
pub const ADC34_CSR_AWD3_MST_Msk: u32 = 512;
pub const ADC34_CSR_AWD3_MST: u32 = 512;
pub const ADC34_CSR_JQOVF_MST_Pos: u32 = 10;
pub const ADC34_CSR_JQOVF_MST_Msk: u32 = 1024;
pub const ADC34_CSR_JQOVF_MST: u32 = 1024;
pub const ADC34_CSR_ADRDY_SLV_Pos: u32 = 16;
pub const ADC34_CSR_ADRDY_SLV_Msk: u32 = 65536;
pub const ADC34_CSR_ADRDY_SLV: u32 = 65536;
pub const ADC34_CSR_ADRDY_EOSMP_SLV_Pos: u32 = 17;
pub const ADC34_CSR_ADRDY_EOSMP_SLV_Msk: u32 = 131072;
pub const ADC34_CSR_ADRDY_EOSMP_SLV: u32 = 131072;
pub const ADC34_CSR_ADRDY_EOC_SLV_Pos: u32 = 18;
pub const ADC34_CSR_ADRDY_EOC_SLV_Msk: u32 = 262144;
pub const ADC34_CSR_ADRDY_EOC_SLV: u32 = 262144;
pub const ADC34_CSR_ADRDY_EOS_SLV_Pos: u32 = 19;
pub const ADC34_CSR_ADRDY_EOS_SLV_Msk: u32 = 524288;
pub const ADC34_CSR_ADRDY_EOS_SLV: u32 = 524288;
pub const ADC34_CSR_ADRDY_JEOC_SLV_Pos: u32 = 21;
pub const ADC34_CSR_ADRDY_JEOC_SLV_Msk: u32 = 2097152;
pub const ADC34_CSR_ADRDY_JEOC_SLV: u32 = 2097152;
pub const ADC34_CSR_ADRDY_JEOS_SLV_Pos: u32 = 22;
pub const ADC34_CSR_ADRDY_JEOS_SLV_Msk: u32 = 4194304;
pub const ADC34_CSR_ADRDY_JEOS_SLV: u32 = 4194304;
pub const ADC34_CSR_AWD1_SLV_Pos: u32 = 23;
pub const ADC34_CSR_AWD1_SLV_Msk: u32 = 8388608;
pub const ADC34_CSR_AWD1_SLV: u32 = 8388608;
pub const ADC34_CSR_AWD2_SLV_Pos: u32 = 24;
pub const ADC34_CSR_AWD2_SLV_Msk: u32 = 16777216;
pub const ADC34_CSR_AWD2_SLV: u32 = 16777216;
pub const ADC34_CSR_AWD3_SLV_Pos: u32 = 25;
pub const ADC34_CSR_AWD3_SLV_Msk: u32 = 33554432;
pub const ADC34_CSR_AWD3_SLV: u32 = 33554432;
pub const ADC34_CSR_JQOVF_SLV_Pos: u32 = 26;
pub const ADC34_CSR_JQOVF_SLV_Msk: u32 = 67108864;
pub const ADC34_CSR_JQOVF_SLV: u32 = 67108864;
pub const ADC12_CCR_MULTI_Pos: u32 = 0;
pub const ADC12_CCR_MULTI_Msk: u32 = 31;
pub const ADC12_CCR_MULTI: u32 = 31;
pub const ADC12_CCR_MULTI_0: u32 = 1;
pub const ADC12_CCR_MULTI_1: u32 = 2;
pub const ADC12_CCR_MULTI_2: u32 = 4;
pub const ADC12_CCR_MULTI_3: u32 = 8;
pub const ADC12_CCR_MULTI_4: u32 = 16;
pub const ADC12_CCR_DELAY_Pos: u32 = 8;
pub const ADC12_CCR_DELAY_Msk: u32 = 3840;
pub const ADC12_CCR_DELAY: u32 = 3840;
pub const ADC12_CCR_DELAY_0: u32 = 256;
pub const ADC12_CCR_DELAY_1: u32 = 512;
pub const ADC12_CCR_DELAY_2: u32 = 1024;
pub const ADC12_CCR_DELAY_3: u32 = 2048;
pub const ADC12_CCR_DMACFG_Pos: u32 = 13;
pub const ADC12_CCR_DMACFG_Msk: u32 = 8192;
pub const ADC12_CCR_DMACFG: u32 = 8192;
pub const ADC12_CCR_MDMA_Pos: u32 = 14;
pub const ADC12_CCR_MDMA_Msk: u32 = 49152;
pub const ADC12_CCR_MDMA: u32 = 49152;
pub const ADC12_CCR_MDMA_0: u32 = 16384;
pub const ADC12_CCR_MDMA_1: u32 = 32768;
pub const ADC12_CCR_CKMODE_Pos: u32 = 16;
pub const ADC12_CCR_CKMODE_Msk: u32 = 196608;
pub const ADC12_CCR_CKMODE: u32 = 196608;
pub const ADC12_CCR_CKMODE_0: u32 = 65536;
pub const ADC12_CCR_CKMODE_1: u32 = 131072;
pub const ADC12_CCR_VREFEN_Pos: u32 = 22;
pub const ADC12_CCR_VREFEN_Msk: u32 = 4194304;
pub const ADC12_CCR_VREFEN: u32 = 4194304;
pub const ADC12_CCR_TSEN_Pos: u32 = 23;
pub const ADC12_CCR_TSEN_Msk: u32 = 8388608;
pub const ADC12_CCR_TSEN: u32 = 8388608;
pub const ADC12_CCR_VBATEN_Pos: u32 = 24;
pub const ADC12_CCR_VBATEN_Msk: u32 = 16777216;
pub const ADC12_CCR_VBATEN: u32 = 16777216;
pub const ADC34_CCR_MULTI_Pos: u32 = 0;
pub const ADC34_CCR_MULTI_Msk: u32 = 31;
pub const ADC34_CCR_MULTI: u32 = 31;
pub const ADC34_CCR_MULTI_0: u32 = 1;
pub const ADC34_CCR_MULTI_1: u32 = 2;
pub const ADC34_CCR_MULTI_2: u32 = 4;
pub const ADC34_CCR_MULTI_3: u32 = 8;
pub const ADC34_CCR_MULTI_4: u32 = 16;
pub const ADC34_CCR_DELAY_Pos: u32 = 8;
pub const ADC34_CCR_DELAY_Msk: u32 = 3840;
pub const ADC34_CCR_DELAY: u32 = 3840;
pub const ADC34_CCR_DELAY_0: u32 = 256;
pub const ADC34_CCR_DELAY_1: u32 = 512;
pub const ADC34_CCR_DELAY_2: u32 = 1024;
pub const ADC34_CCR_DELAY_3: u32 = 2048;
pub const ADC34_CCR_DMACFG_Pos: u32 = 13;
pub const ADC34_CCR_DMACFG_Msk: u32 = 8192;
pub const ADC34_CCR_DMACFG: u32 = 8192;
pub const ADC34_CCR_MDMA_Pos: u32 = 14;
pub const ADC34_CCR_MDMA_Msk: u32 = 49152;
pub const ADC34_CCR_MDMA: u32 = 49152;
pub const ADC34_CCR_MDMA_0: u32 = 16384;
pub const ADC34_CCR_MDMA_1: u32 = 32768;
pub const ADC34_CCR_CKMODE_Pos: u32 = 16;
pub const ADC34_CCR_CKMODE_Msk: u32 = 196608;
pub const ADC34_CCR_CKMODE: u32 = 196608;
pub const ADC34_CCR_CKMODE_0: u32 = 65536;
pub const ADC34_CCR_CKMODE_1: u32 = 131072;
pub const ADC34_CCR_VREFEN_Pos: u32 = 22;
pub const ADC34_CCR_VREFEN_Msk: u32 = 4194304;
pub const ADC34_CCR_VREFEN: u32 = 4194304;
pub const ADC34_CCR_TSEN_Pos: u32 = 23;
pub const ADC34_CCR_TSEN_Msk: u32 = 8388608;
pub const ADC34_CCR_TSEN: u32 = 8388608;
pub const ADC34_CCR_VBATEN_Pos: u32 = 24;
pub const ADC34_CCR_VBATEN_Msk: u32 = 16777216;
pub const ADC34_CCR_VBATEN: u32 = 16777216;
pub const ADC12_CDR_RDATA_MST_Pos: u32 = 0;
pub const ADC12_CDR_RDATA_MST_Msk: u32 = 65535;
pub const ADC12_CDR_RDATA_MST: u32 = 65535;
pub const ADC12_CDR_RDATA_MST_0: u32 = 1;
pub const ADC12_CDR_RDATA_MST_1: u32 = 2;
pub const ADC12_CDR_RDATA_MST_2: u32 = 4;
pub const ADC12_CDR_RDATA_MST_3: u32 = 8;
pub const ADC12_CDR_RDATA_MST_4: u32 = 16;
pub const ADC12_CDR_RDATA_MST_5: u32 = 32;
pub const ADC12_CDR_RDATA_MST_6: u32 = 64;
pub const ADC12_CDR_RDATA_MST_7: u32 = 128;
pub const ADC12_CDR_RDATA_MST_8: u32 = 256;
pub const ADC12_CDR_RDATA_MST_9: u32 = 512;
pub const ADC12_CDR_RDATA_MST_10: u32 = 1024;
pub const ADC12_CDR_RDATA_MST_11: u32 = 2048;
pub const ADC12_CDR_RDATA_MST_12: u32 = 4096;
pub const ADC12_CDR_RDATA_MST_13: u32 = 8192;
pub const ADC12_CDR_RDATA_MST_14: u32 = 16384;
pub const ADC12_CDR_RDATA_MST_15: u32 = 32768;
pub const ADC12_CDR_RDATA_SLV_Pos: u32 = 16;
pub const ADC12_CDR_RDATA_SLV_Msk: u32 = 4294901760;
pub const ADC12_CDR_RDATA_SLV: u32 = 4294901760;
pub const ADC12_CDR_RDATA_SLV_0: u32 = 65536;
pub const ADC12_CDR_RDATA_SLV_1: u32 = 131072;
pub const ADC12_CDR_RDATA_SLV_2: u32 = 262144;
pub const ADC12_CDR_RDATA_SLV_3: u32 = 524288;
pub const ADC12_CDR_RDATA_SLV_4: u32 = 1048576;
pub const ADC12_CDR_RDATA_SLV_5: u32 = 2097152;
pub const ADC12_CDR_RDATA_SLV_6: u32 = 4194304;
pub const ADC12_CDR_RDATA_SLV_7: u32 = 8388608;
pub const ADC12_CDR_RDATA_SLV_8: u32 = 16777216;
pub const ADC12_CDR_RDATA_SLV_9: u32 = 33554432;
pub const ADC12_CDR_RDATA_SLV_10: u32 = 67108864;
pub const ADC12_CDR_RDATA_SLV_11: u32 = 134217728;
pub const ADC12_CDR_RDATA_SLV_12: u32 = 268435456;
pub const ADC12_CDR_RDATA_SLV_13: u32 = 536870912;
pub const ADC12_CDR_RDATA_SLV_14: u32 = 1073741824;
pub const ADC12_CDR_RDATA_SLV_15: u32 = 2147483648;
pub const ADC34_CDR_RDATA_MST_Pos: u32 = 0;
pub const ADC34_CDR_RDATA_MST_Msk: u32 = 65535;
pub const ADC34_CDR_RDATA_MST: u32 = 65535;
pub const ADC34_CDR_RDATA_MST_0: u32 = 1;
pub const ADC34_CDR_RDATA_MST_1: u32 = 2;
pub const ADC34_CDR_RDATA_MST_2: u32 = 4;
pub const ADC34_CDR_RDATA_MST_3: u32 = 8;
pub const ADC34_CDR_RDATA_MST_4: u32 = 16;
pub const ADC34_CDR_RDATA_MST_5: u32 = 32;
pub const ADC34_CDR_RDATA_MST_6: u32 = 64;
pub const ADC34_CDR_RDATA_MST_7: u32 = 128;
pub const ADC34_CDR_RDATA_MST_8: u32 = 256;
pub const ADC34_CDR_RDATA_MST_9: u32 = 512;
pub const ADC34_CDR_RDATA_MST_10: u32 = 1024;
pub const ADC34_CDR_RDATA_MST_11: u32 = 2048;
pub const ADC34_CDR_RDATA_MST_12: u32 = 4096;
pub const ADC34_CDR_RDATA_MST_13: u32 = 8192;
pub const ADC34_CDR_RDATA_MST_14: u32 = 16384;
pub const ADC34_CDR_RDATA_MST_15: u32 = 32768;
pub const ADC34_CDR_RDATA_SLV_Pos: u32 = 16;
pub const ADC34_CDR_RDATA_SLV_Msk: u32 = 4294901760;
pub const ADC34_CDR_RDATA_SLV: u32 = 4294901760;
pub const ADC34_CDR_RDATA_SLV_0: u32 = 65536;
pub const ADC34_CDR_RDATA_SLV_1: u32 = 131072;
pub const ADC34_CDR_RDATA_SLV_2: u32 = 262144;
pub const ADC34_CDR_RDATA_SLV_3: u32 = 524288;
pub const ADC34_CDR_RDATA_SLV_4: u32 = 1048576;
pub const ADC34_CDR_RDATA_SLV_5: u32 = 2097152;
pub const ADC34_CDR_RDATA_SLV_6: u32 = 4194304;
pub const ADC34_CDR_RDATA_SLV_7: u32 = 8388608;
pub const ADC34_CDR_RDATA_SLV_8: u32 = 16777216;
pub const ADC34_CDR_RDATA_SLV_9: u32 = 33554432;
pub const ADC34_CDR_RDATA_SLV_10: u32 = 67108864;
pub const ADC34_CDR_RDATA_SLV_11: u32 = 134217728;
pub const ADC34_CDR_RDATA_SLV_12: u32 = 268435456;
pub const ADC34_CDR_RDATA_SLV_13: u32 = 536870912;
pub const ADC34_CDR_RDATA_SLV_14: u32 = 1073741824;
pub const ADC34_CDR_RDATA_SLV_15: u32 = 2147483648;
pub const ADC_CSR_ADRDY_MST_Pos: u32 = 0;
pub const ADC_CSR_ADRDY_MST_Msk: u32 = 1;
pub const ADC_CSR_ADRDY_MST: u32 = 1;
pub const ADC_CSR_EOSMP_MST_Pos: u32 = 1;
pub const ADC_CSR_EOSMP_MST_Msk: u32 = 2;
pub const ADC_CSR_EOSMP_MST: u32 = 2;
pub const ADC_CSR_EOC_MST_Pos: u32 = 2;
pub const ADC_CSR_EOC_MST_Msk: u32 = 4;
pub const ADC_CSR_EOC_MST: u32 = 4;
pub const ADC_CSR_EOS_MST_Pos: u32 = 3;
pub const ADC_CSR_EOS_MST_Msk: u32 = 8;
pub const ADC_CSR_EOS_MST: u32 = 8;
pub const ADC_CSR_OVR_MST_Pos: u32 = 4;
pub const ADC_CSR_OVR_MST_Msk: u32 = 16;
pub const ADC_CSR_OVR_MST: u32 = 16;
pub const ADC_CSR_JEOC_MST_Pos: u32 = 5;
pub const ADC_CSR_JEOC_MST_Msk: u32 = 32;
pub const ADC_CSR_JEOC_MST: u32 = 32;
pub const ADC_CSR_JEOS_MST_Pos: u32 = 6;
pub const ADC_CSR_JEOS_MST_Msk: u32 = 64;
pub const ADC_CSR_JEOS_MST: u32 = 64;
pub const ADC_CSR_AWD1_MST_Pos: u32 = 7;
pub const ADC_CSR_AWD1_MST_Msk: u32 = 128;
pub const ADC_CSR_AWD1_MST: u32 = 128;
pub const ADC_CSR_AWD2_MST_Pos: u32 = 8;
pub const ADC_CSR_AWD2_MST_Msk: u32 = 256;
pub const ADC_CSR_AWD2_MST: u32 = 256;
pub const ADC_CSR_AWD3_MST_Pos: u32 = 9;
pub const ADC_CSR_AWD3_MST_Msk: u32 = 512;
pub const ADC_CSR_AWD3_MST: u32 = 512;
pub const ADC_CSR_JQOVF_MST_Pos: u32 = 10;
pub const ADC_CSR_JQOVF_MST_Msk: u32 = 1024;
pub const ADC_CSR_JQOVF_MST: u32 = 1024;
pub const ADC_CSR_ADRDY_SLV_Pos: u32 = 16;
pub const ADC_CSR_ADRDY_SLV_Msk: u32 = 65536;
pub const ADC_CSR_ADRDY_SLV: u32 = 65536;
pub const ADC_CSR_EOSMP_SLV_Pos: u32 = 17;
pub const ADC_CSR_EOSMP_SLV_Msk: u32 = 131072;
pub const ADC_CSR_EOSMP_SLV: u32 = 131072;
pub const ADC_CSR_EOC_SLV_Pos: u32 = 18;
pub const ADC_CSR_EOC_SLV_Msk: u32 = 262144;
pub const ADC_CSR_EOC_SLV: u32 = 262144;
pub const ADC_CSR_EOS_SLV_Pos: u32 = 19;
pub const ADC_CSR_EOS_SLV_Msk: u32 = 524288;
pub const ADC_CSR_EOS_SLV: u32 = 524288;
pub const ADC_CSR_OVR_SLV_Pos: u32 = 20;
pub const ADC_CSR_OVR_SLV_Msk: u32 = 1048576;
pub const ADC_CSR_OVR_SLV: u32 = 1048576;
pub const ADC_CSR_JEOC_SLV_Pos: u32 = 21;
pub const ADC_CSR_JEOC_SLV_Msk: u32 = 2097152;
pub const ADC_CSR_JEOC_SLV: u32 = 2097152;
pub const ADC_CSR_JEOS_SLV_Pos: u32 = 22;
pub const ADC_CSR_JEOS_SLV_Msk: u32 = 4194304;
pub const ADC_CSR_JEOS_SLV: u32 = 4194304;
pub const ADC_CSR_AWD1_SLV_Pos: u32 = 23;
pub const ADC_CSR_AWD1_SLV_Msk: u32 = 8388608;
pub const ADC_CSR_AWD1_SLV: u32 = 8388608;
pub const ADC_CSR_AWD2_SLV_Pos: u32 = 24;
pub const ADC_CSR_AWD2_SLV_Msk: u32 = 16777216;
pub const ADC_CSR_AWD2_SLV: u32 = 16777216;
pub const ADC_CSR_AWD3_SLV_Pos: u32 = 25;
pub const ADC_CSR_AWD3_SLV_Msk: u32 = 33554432;
pub const ADC_CSR_AWD3_SLV: u32 = 33554432;
pub const ADC_CSR_JQOVF_SLV_Pos: u32 = 26;
pub const ADC_CSR_JQOVF_SLV_Msk: u32 = 67108864;
pub const ADC_CSR_JQOVF_SLV: u32 = 67108864;
pub const ADC_CSR_ADRDY_EOSMP_MST: u32 = 2;
pub const ADC_CSR_ADRDY_EOC_MST: u32 = 4;
pub const ADC_CSR_ADRDY_EOS_MST: u32 = 8;
pub const ADC_CSR_ADRDY_OVR_MST: u32 = 16;
pub const ADC_CSR_ADRDY_JEOC_MST: u32 = 32;
pub const ADC_CSR_ADRDY_JEOS_MST: u32 = 64;
pub const ADC_CSR_ADRDY_EOSMP_SLV: u32 = 131072;
pub const ADC_CSR_ADRDY_EOC_SLV: u32 = 262144;
pub const ADC_CSR_ADRDY_EOS_SLV: u32 = 524288;
pub const ADC_CSR_ADRDY_OVR_SLV: u32 = 1048576;
pub const ADC_CSR_ADRDY_JEOC_SLV: u32 = 2097152;
pub const ADC_CSR_ADRDY_JEOS_SLV: u32 = 4194304;
pub const ADC_CCR_DUAL_Pos: u32 = 0;
pub const ADC_CCR_DUAL_Msk: u32 = 31;
pub const ADC_CCR_DUAL: u32 = 31;
pub const ADC_CCR_DUAL_0: u32 = 1;
pub const ADC_CCR_DUAL_1: u32 = 2;
pub const ADC_CCR_DUAL_2: u32 = 4;
pub const ADC_CCR_DUAL_3: u32 = 8;
pub const ADC_CCR_DUAL_4: u32 = 16;
pub const ADC_CCR_DELAY_Pos: u32 = 8;
pub const ADC_CCR_DELAY_Msk: u32 = 3840;
pub const ADC_CCR_DELAY: u32 = 3840;
pub const ADC_CCR_DELAY_0: u32 = 256;
pub const ADC_CCR_DELAY_1: u32 = 512;
pub const ADC_CCR_DELAY_2: u32 = 1024;
pub const ADC_CCR_DELAY_3: u32 = 2048;
pub const ADC_CCR_DMACFG_Pos: u32 = 13;
pub const ADC_CCR_DMACFG_Msk: u32 = 8192;
pub const ADC_CCR_DMACFG: u32 = 8192;
pub const ADC_CCR_MDMA_Pos: u32 = 14;
pub const ADC_CCR_MDMA_Msk: u32 = 49152;
pub const ADC_CCR_MDMA: u32 = 49152;
pub const ADC_CCR_MDMA_0: u32 = 16384;
pub const ADC_CCR_MDMA_1: u32 = 32768;
pub const ADC_CCR_CKMODE_Pos: u32 = 16;
pub const ADC_CCR_CKMODE_Msk: u32 = 196608;
pub const ADC_CCR_CKMODE: u32 = 196608;
pub const ADC_CCR_CKMODE_0: u32 = 65536;
pub const ADC_CCR_CKMODE_1: u32 = 131072;
pub const ADC_CCR_VREFEN_Pos: u32 = 22;
pub const ADC_CCR_VREFEN_Msk: u32 = 4194304;
pub const ADC_CCR_VREFEN: u32 = 4194304;
pub const ADC_CCR_TSEN_Pos: u32 = 23;
pub const ADC_CCR_TSEN_Msk: u32 = 8388608;
pub const ADC_CCR_TSEN: u32 = 8388608;
pub const ADC_CCR_VBATEN_Pos: u32 = 24;
pub const ADC_CCR_VBATEN_Msk: u32 = 16777216;
pub const ADC_CCR_VBATEN: u32 = 16777216;
pub const ADC_CCR_MULTI: u32 = 31;
pub const ADC_CCR_MULTI_0: u32 = 1;
pub const ADC_CCR_MULTI_1: u32 = 2;
pub const ADC_CCR_MULTI_2: u32 = 4;
pub const ADC_CCR_MULTI_3: u32 = 8;
pub const ADC_CCR_MULTI_4: u32 = 16;
pub const ADC_CDR_RDATA_MST_Pos: u32 = 0;
pub const ADC_CDR_RDATA_MST_Msk: u32 = 65535;
pub const ADC_CDR_RDATA_MST: u32 = 65535;
pub const ADC_CDR_RDATA_MST_0: u32 = 1;
pub const ADC_CDR_RDATA_MST_1: u32 = 2;
pub const ADC_CDR_RDATA_MST_2: u32 = 4;
pub const ADC_CDR_RDATA_MST_3: u32 = 8;
pub const ADC_CDR_RDATA_MST_4: u32 = 16;
pub const ADC_CDR_RDATA_MST_5: u32 = 32;
pub const ADC_CDR_RDATA_MST_6: u32 = 64;
pub const ADC_CDR_RDATA_MST_7: u32 = 128;
pub const ADC_CDR_RDATA_MST_8: u32 = 256;
pub const ADC_CDR_RDATA_MST_9: u32 = 512;
pub const ADC_CDR_RDATA_MST_10: u32 = 1024;
pub const ADC_CDR_RDATA_MST_11: u32 = 2048;
pub const ADC_CDR_RDATA_MST_12: u32 = 4096;
pub const ADC_CDR_RDATA_MST_13: u32 = 8192;
pub const ADC_CDR_RDATA_MST_14: u32 = 16384;
pub const ADC_CDR_RDATA_MST_15: u32 = 32768;
pub const ADC_CDR_RDATA_SLV_Pos: u32 = 16;
pub const ADC_CDR_RDATA_SLV_Msk: u32 = 4294901760;
pub const ADC_CDR_RDATA_SLV: u32 = 4294901760;
pub const ADC_CDR_RDATA_SLV_0: u32 = 65536;
pub const ADC_CDR_RDATA_SLV_1: u32 = 131072;
pub const ADC_CDR_RDATA_SLV_2: u32 = 262144;
pub const ADC_CDR_RDATA_SLV_3: u32 = 524288;
pub const ADC_CDR_RDATA_SLV_4: u32 = 1048576;
pub const ADC_CDR_RDATA_SLV_5: u32 = 2097152;
pub const ADC_CDR_RDATA_SLV_6: u32 = 4194304;
pub const ADC_CDR_RDATA_SLV_7: u32 = 8388608;
pub const ADC_CDR_RDATA_SLV_8: u32 = 16777216;
pub const ADC_CDR_RDATA_SLV_9: u32 = 33554432;
pub const ADC_CDR_RDATA_SLV_10: u32 = 67108864;
pub const ADC_CDR_RDATA_SLV_11: u32 = 134217728;
pub const ADC_CDR_RDATA_SLV_12: u32 = 268435456;
pub const ADC_CDR_RDATA_SLV_13: u32 = 536870912;
pub const ADC_CDR_RDATA_SLV_14: u32 = 1073741824;
pub const ADC_CDR_RDATA_SLV_15: u32 = 2147483648;
pub const COMP1_CSR_COMP1EN_Pos: u32 = 0;
pub const COMP1_CSR_COMP1EN_Msk: u32 = 1;
pub const COMP1_CSR_COMP1EN: u32 = 1;
pub const COMP1_CSR_COMP1SW1_Pos: u32 = 1;
pub const COMP1_CSR_COMP1SW1_Msk: u32 = 2;
pub const COMP1_CSR_COMP1SW1: u32 = 2;
pub const COMP_CSR_COMP1SW1: u32 = 2;
pub const COMP1_CSR_COMP1MODE_Pos: u32 = 2;
pub const COMP1_CSR_COMP1MODE_Msk: u32 = 12;
pub const COMP1_CSR_COMP1MODE: u32 = 12;
pub const COMP1_CSR_COMP1MODE_0: u32 = 4;
pub const COMP1_CSR_COMP1MODE_1: u32 = 8;
pub const COMP1_CSR_COMP1INSEL_Pos: u32 = 4;
pub const COMP1_CSR_COMP1INSEL_Msk: u32 = 112;
pub const COMP1_CSR_COMP1INSEL: u32 = 112;
pub const COMP1_CSR_COMP1INSEL_0: u32 = 16;
pub const COMP1_CSR_COMP1INSEL_1: u32 = 32;
pub const COMP1_CSR_COMP1INSEL_2: u32 = 64;
pub const COMP1_CSR_COMP1OUTSEL_Pos: u32 = 10;
pub const COMP1_CSR_COMP1OUTSEL_Msk: u32 = 15360;
pub const COMP1_CSR_COMP1OUTSEL: u32 = 15360;
pub const COMP1_CSR_COMP1OUTSEL_0: u32 = 1024;
pub const COMP1_CSR_COMP1OUTSEL_1: u32 = 2048;
pub const COMP1_CSR_COMP1OUTSEL_2: u32 = 4096;
pub const COMP1_CSR_COMP1OUTSEL_3: u32 = 8192;
pub const COMP1_CSR_COMP1POL_Pos: u32 = 15;
pub const COMP1_CSR_COMP1POL_Msk: u32 = 32768;
pub const COMP1_CSR_COMP1POL: u32 = 32768;
pub const COMP1_CSR_COMP1HYST_Pos: u32 = 16;
pub const COMP1_CSR_COMP1HYST_Msk: u32 = 196608;
pub const COMP1_CSR_COMP1HYST: u32 = 196608;
pub const COMP1_CSR_COMP1HYST_0: u32 = 65536;
pub const COMP1_CSR_COMP1HYST_1: u32 = 131072;
pub const COMP1_CSR_COMP1BLANKING_Pos: u32 = 18;
pub const COMP1_CSR_COMP1BLANKING_Msk: u32 = 786432;
pub const COMP1_CSR_COMP1BLANKING: u32 = 786432;
pub const COMP1_CSR_COMP1BLANKING_0: u32 = 262144;
pub const COMP1_CSR_COMP1BLANKING_1: u32 = 524288;
pub const COMP1_CSR_COMP1BLANKING_2: u32 = 1048576;
pub const COMP1_CSR_COMP1OUT_Pos: u32 = 30;
pub const COMP1_CSR_COMP1OUT_Msk: u32 = 1073741824;
pub const COMP1_CSR_COMP1OUT: u32 = 1073741824;
pub const COMP1_CSR_COMP1LOCK_Pos: u32 = 31;
pub const COMP1_CSR_COMP1LOCK_Msk: u32 = 2147483648;
pub const COMP1_CSR_COMP1LOCK: u32 = 2147483648;
pub const COMP2_CSR_COMP2EN_Pos: u32 = 0;
pub const COMP2_CSR_COMP2EN_Msk: u32 = 1;
pub const COMP2_CSR_COMP2EN: u32 = 1;
pub const COMP2_CSR_COMP2MODE_Pos: u32 = 2;
pub const COMP2_CSR_COMP2MODE_Msk: u32 = 12;
pub const COMP2_CSR_COMP2MODE: u32 = 12;
pub const COMP2_CSR_COMP2MODE_0: u32 = 4;
pub const COMP2_CSR_COMP2MODE_1: u32 = 8;
pub const COMP2_CSR_COMP2INSEL_Pos: u32 = 4;
pub const COMP2_CSR_COMP2INSEL_Msk: u32 = 112;
pub const COMP2_CSR_COMP2INSEL: u32 = 112;
pub const COMP2_CSR_COMP2INSEL_0: u32 = 16;
pub const COMP2_CSR_COMP2INSEL_1: u32 = 32;
pub const COMP2_CSR_COMP2INSEL_2: u32 = 64;
pub const COMP2_CSR_COMP2NONINSEL_Pos: u32 = 7;
pub const COMP2_CSR_COMP2NONINSEL_Msk: u32 = 128;
pub const COMP2_CSR_COMP2NONINSEL: u32 = 128;
pub const COMP2_CSR_COMP2WNDWEN_Pos: u32 = 9;
pub const COMP2_CSR_COMP2WNDWEN_Msk: u32 = 512;
pub const COMP2_CSR_COMP2WNDWEN: u32 = 512;
pub const COMP2_CSR_COMP2OUTSEL_Pos: u32 = 10;
pub const COMP2_CSR_COMP2OUTSEL_Msk: u32 = 15360;
pub const COMP2_CSR_COMP2OUTSEL: u32 = 15360;
pub const COMP2_CSR_COMP2OUTSEL_0: u32 = 1024;
pub const COMP2_CSR_COMP2OUTSEL_1: u32 = 2048;
pub const COMP2_CSR_COMP2OUTSEL_2: u32 = 4096;
pub const COMP2_CSR_COMP2OUTSEL_3: u32 = 8192;
pub const COMP2_CSR_COMP2POL_Pos: u32 = 15;
pub const COMP2_CSR_COMP2POL_Msk: u32 = 32768;
pub const COMP2_CSR_COMP2POL: u32 = 32768;
pub const COMP2_CSR_COMP2HYST_Pos: u32 = 16;
pub const COMP2_CSR_COMP2HYST_Msk: u32 = 196608;
pub const COMP2_CSR_COMP2HYST: u32 = 196608;
pub const COMP2_CSR_COMP2HYST_0: u32 = 65536;
pub const COMP2_CSR_COMP2HYST_1: u32 = 131072;
pub const COMP2_CSR_COMP2BLANKING_Pos: u32 = 18;
pub const COMP2_CSR_COMP2BLANKING_Msk: u32 = 786432;
pub const COMP2_CSR_COMP2BLANKING: u32 = 786432;
pub const COMP2_CSR_COMP2BLANKING_0: u32 = 262144;
pub const COMP2_CSR_COMP2BLANKING_1: u32 = 524288;
pub const COMP2_CSR_COMP2BLANKING_2: u32 = 1048576;
pub const COMP2_CSR_COMP2OUT_Pos: u32 = 30;
pub const COMP2_CSR_COMP2OUT_Msk: u32 = 1073741824;
pub const COMP2_CSR_COMP2OUT: u32 = 1073741824;
pub const COMP2_CSR_COMP2LOCK_Pos: u32 = 31;
pub const COMP2_CSR_COMP2LOCK_Msk: u32 = 2147483648;
pub const COMP2_CSR_COMP2LOCK: u32 = 2147483648;
pub const COMP3_CSR_COMP3EN_Pos: u32 = 0;
pub const COMP3_CSR_COMP3EN_Msk: u32 = 1;
pub const COMP3_CSR_COMP3EN: u32 = 1;
pub const COMP3_CSR_COMP3MODE_Pos: u32 = 2;
pub const COMP3_CSR_COMP3MODE_Msk: u32 = 12;
pub const COMP3_CSR_COMP3MODE: u32 = 12;
pub const COMP3_CSR_COMP3MODE_0: u32 = 4;
pub const COMP3_CSR_COMP3MODE_1: u32 = 8;
pub const COMP3_CSR_COMP3INSEL_Pos: u32 = 4;
pub const COMP3_CSR_COMP3INSEL_Msk: u32 = 112;
pub const COMP3_CSR_COMP3INSEL: u32 = 112;
pub const COMP3_CSR_COMP3INSEL_0: u32 = 16;
pub const COMP3_CSR_COMP3INSEL_1: u32 = 32;
pub const COMP3_CSR_COMP3INSEL_2: u32 = 64;
pub const COMP3_CSR_COMP3NONINSEL_Pos: u32 = 7;
pub const COMP3_CSR_COMP3NONINSEL_Msk: u32 = 128;
pub const COMP3_CSR_COMP3NONINSEL: u32 = 128;
pub const COMP3_CSR_COMP3OUTSEL_Pos: u32 = 10;
pub const COMP3_CSR_COMP3OUTSEL_Msk: u32 = 15360;
pub const COMP3_CSR_COMP3OUTSEL: u32 = 15360;
pub const COMP3_CSR_COMP3OUTSEL_0: u32 = 1024;
pub const COMP3_CSR_COMP3OUTSEL_1: u32 = 2048;
pub const COMP3_CSR_COMP3OUTSEL_2: u32 = 4096;
pub const COMP3_CSR_COMP3OUTSEL_3: u32 = 8192;
pub const COMP3_CSR_COMP3POL_Pos: u32 = 15;
pub const COMP3_CSR_COMP3POL_Msk: u32 = 32768;
pub const COMP3_CSR_COMP3POL: u32 = 32768;
pub const COMP3_CSR_COMP3HYST_Pos: u32 = 16;
pub const COMP3_CSR_COMP3HYST_Msk: u32 = 196608;
pub const COMP3_CSR_COMP3HYST: u32 = 196608;
pub const COMP3_CSR_COMP3HYST_0: u32 = 65536;
pub const COMP3_CSR_COMP3HYST_1: u32 = 131072;
pub const COMP3_CSR_COMP3BLANKING_Pos: u32 = 18;
pub const COMP3_CSR_COMP3BLANKING_Msk: u32 = 786432;
pub const COMP3_CSR_COMP3BLANKING: u32 = 786432;
pub const COMP3_CSR_COMP3BLANKING_0: u32 = 262144;
pub const COMP3_CSR_COMP3BLANKING_1: u32 = 524288;
pub const COMP3_CSR_COMP3BLANKING_2: u32 = 1048576;
pub const COMP3_CSR_COMP3OUT_Pos: u32 = 30;
pub const COMP3_CSR_COMP3OUT_Msk: u32 = 1073741824;
pub const COMP3_CSR_COMP3OUT: u32 = 1073741824;
pub const COMP3_CSR_COMP3LOCK_Pos: u32 = 31;
pub const COMP3_CSR_COMP3LOCK_Msk: u32 = 2147483648;
pub const COMP3_CSR_COMP3LOCK: u32 = 2147483648;
pub const COMP4_CSR_COMP4EN_Pos: u32 = 0;
pub const COMP4_CSR_COMP4EN_Msk: u32 = 1;
pub const COMP4_CSR_COMP4EN: u32 = 1;
pub const COMP4_CSR_COMP4MODE_Pos: u32 = 2;
pub const COMP4_CSR_COMP4MODE_Msk: u32 = 12;
pub const COMP4_CSR_COMP4MODE: u32 = 12;
pub const COMP4_CSR_COMP4MODE_0: u32 = 4;
pub const COMP4_CSR_COMP4MODE_1: u32 = 8;
pub const COMP4_CSR_COMP4INSEL_Pos: u32 = 4;
pub const COMP4_CSR_COMP4INSEL_Msk: u32 = 112;
pub const COMP4_CSR_COMP4INSEL: u32 = 112;
pub const COMP4_CSR_COMP4INSEL_0: u32 = 16;
pub const COMP4_CSR_COMP4INSEL_1: u32 = 32;
pub const COMP4_CSR_COMP4INSEL_2: u32 = 64;
pub const COMP4_CSR_COMP4NONINSEL_Pos: u32 = 7;
pub const COMP4_CSR_COMP4NONINSEL_Msk: u32 = 128;
pub const COMP4_CSR_COMP4NONINSEL: u32 = 128;
pub const COMP4_CSR_COMP4WNDWEN_Pos: u32 = 9;
pub const COMP4_CSR_COMP4WNDWEN_Msk: u32 = 512;
pub const COMP4_CSR_COMP4WNDWEN: u32 = 512;
pub const COMP4_CSR_COMP4OUTSEL_Pos: u32 = 10;
pub const COMP4_CSR_COMP4OUTSEL_Msk: u32 = 15360;
pub const COMP4_CSR_COMP4OUTSEL: u32 = 15360;
pub const COMP4_CSR_COMP4OUTSEL_0: u32 = 1024;
pub const COMP4_CSR_COMP4OUTSEL_1: u32 = 2048;
pub const COMP4_CSR_COMP4OUTSEL_2: u32 = 4096;
pub const COMP4_CSR_COMP4OUTSEL_3: u32 = 8192;
pub const COMP4_CSR_COMP4POL_Pos: u32 = 15;
pub const COMP4_CSR_COMP4POL_Msk: u32 = 32768;
pub const COMP4_CSR_COMP4POL: u32 = 32768;
pub const COMP4_CSR_COMP4HYST_Pos: u32 = 16;
pub const COMP4_CSR_COMP4HYST_Msk: u32 = 196608;
pub const COMP4_CSR_COMP4HYST: u32 = 196608;
pub const COMP4_CSR_COMP4HYST_0: u32 = 65536;
pub const COMP4_CSR_COMP4HYST_1: u32 = 131072;
pub const COMP4_CSR_COMP4BLANKING_Pos: u32 = 18;
pub const COMP4_CSR_COMP4BLANKING_Msk: u32 = 786432;
pub const COMP4_CSR_COMP4BLANKING: u32 = 786432;
pub const COMP4_CSR_COMP4BLANKING_0: u32 = 262144;
pub const COMP4_CSR_COMP4BLANKING_1: u32 = 524288;
pub const COMP4_CSR_COMP4BLANKING_2: u32 = 1048576;
pub const COMP4_CSR_COMP4OUT_Pos: u32 = 30;
pub const COMP4_CSR_COMP4OUT_Msk: u32 = 1073741824;
pub const COMP4_CSR_COMP4OUT: u32 = 1073741824;
pub const COMP4_CSR_COMP4LOCK_Pos: u32 = 31;
pub const COMP4_CSR_COMP4LOCK_Msk: u32 = 2147483648;
pub const COMP4_CSR_COMP4LOCK: u32 = 2147483648;
pub const COMP5_CSR_COMP5EN_Pos: u32 = 0;
pub const COMP5_CSR_COMP5EN_Msk: u32 = 1;
pub const COMP5_CSR_COMP5EN: u32 = 1;
pub const COMP5_CSR_COMP5MODE_Pos: u32 = 2;
pub const COMP5_CSR_COMP5MODE_Msk: u32 = 12;
pub const COMP5_CSR_COMP5MODE: u32 = 12;
pub const COMP5_CSR_COMP5MODE_0: u32 = 4;
pub const COMP5_CSR_COMP5MODE_1: u32 = 8;
pub const COMP5_CSR_COMP5INSEL_Pos: u32 = 4;
pub const COMP5_CSR_COMP5INSEL_Msk: u32 = 112;
pub const COMP5_CSR_COMP5INSEL: u32 = 112;
pub const COMP5_CSR_COMP5INSEL_0: u32 = 16;
pub const COMP5_CSR_COMP5INSEL_1: u32 = 32;
pub const COMP5_CSR_COMP5INSEL_2: u32 = 64;
pub const COMP5_CSR_COMP5NONINSEL_Pos: u32 = 7;
pub const COMP5_CSR_COMP5NONINSEL_Msk: u32 = 128;
pub const COMP5_CSR_COMP5NONINSEL: u32 = 128;
pub const COMP5_CSR_COMP5OUTSEL_Pos: u32 = 10;
pub const COMP5_CSR_COMP5OUTSEL_Msk: u32 = 15360;
pub const COMP5_CSR_COMP5OUTSEL: u32 = 15360;
pub const COMP5_CSR_COMP5OUTSEL_0: u32 = 1024;
pub const COMP5_CSR_COMP5OUTSEL_1: u32 = 2048;
pub const COMP5_CSR_COMP5OUTSEL_2: u32 = 4096;
pub const COMP5_CSR_COMP5OUTSEL_3: u32 = 8192;
pub const COMP5_CSR_COMP5POL_Pos: u32 = 15;
pub const COMP5_CSR_COMP5POL_Msk: u32 = 32768;
pub const COMP5_CSR_COMP5POL: u32 = 32768;
pub const COMP5_CSR_COMP5HYST_Pos: u32 = 16;
pub const COMP5_CSR_COMP5HYST_Msk: u32 = 196608;
pub const COMP5_CSR_COMP5HYST: u32 = 196608;
pub const COMP5_CSR_COMP5HYST_0: u32 = 65536;
pub const COMP5_CSR_COMP5HYST_1: u32 = 131072;
pub const COMP5_CSR_COMP5BLANKING_Pos: u32 = 18;
pub const COMP5_CSR_COMP5BLANKING_Msk: u32 = 786432;
pub const COMP5_CSR_COMP5BLANKING: u32 = 786432;
pub const COMP5_CSR_COMP5BLANKING_0: u32 = 262144;
pub const COMP5_CSR_COMP5BLANKING_1: u32 = 524288;
pub const COMP5_CSR_COMP5BLANKING_2: u32 = 1048576;
pub const COMP5_CSR_COMP5OUT_Pos: u32 = 30;
pub const COMP5_CSR_COMP5OUT_Msk: u32 = 1073741824;
pub const COMP5_CSR_COMP5OUT: u32 = 1073741824;
pub const COMP5_CSR_COMP5LOCK_Pos: u32 = 31;
pub const COMP5_CSR_COMP5LOCK_Msk: u32 = 2147483648;
pub const COMP5_CSR_COMP5LOCK: u32 = 2147483648;
pub const COMP6_CSR_COMP6EN_Pos: u32 = 0;
pub const COMP6_CSR_COMP6EN_Msk: u32 = 1;
pub const COMP6_CSR_COMP6EN: u32 = 1;
pub const COMP6_CSR_COMP6MODE_Pos: u32 = 2;
pub const COMP6_CSR_COMP6MODE_Msk: u32 = 12;
pub const COMP6_CSR_COMP6MODE: u32 = 12;
pub const COMP6_CSR_COMP6MODE_0: u32 = 4;
pub const COMP6_CSR_COMP6MODE_1: u32 = 8;
pub const COMP6_CSR_COMP6INSEL_Pos: u32 = 4;
pub const COMP6_CSR_COMP6INSEL_Msk: u32 = 112;
pub const COMP6_CSR_COMP6INSEL: u32 = 112;
pub const COMP6_CSR_COMP6INSEL_0: u32 = 16;
pub const COMP6_CSR_COMP6INSEL_1: u32 = 32;
pub const COMP6_CSR_COMP6INSEL_2: u32 = 64;
pub const COMP6_CSR_COMP6NONINSEL_Pos: u32 = 7;
pub const COMP6_CSR_COMP6NONINSEL_Msk: u32 = 128;
pub const COMP6_CSR_COMP6NONINSEL: u32 = 128;
pub const COMP6_CSR_COMP6WNDWEN_Pos: u32 = 9;
pub const COMP6_CSR_COMP6WNDWEN_Msk: u32 = 512;
pub const COMP6_CSR_COMP6WNDWEN: u32 = 512;
pub const COMP6_CSR_COMP6OUTSEL_Pos: u32 = 10;
pub const COMP6_CSR_COMP6OUTSEL_Msk: u32 = 15360;
pub const COMP6_CSR_COMP6OUTSEL: u32 = 15360;
pub const COMP6_CSR_COMP6OUTSEL_0: u32 = 1024;
pub const COMP6_CSR_COMP6OUTSEL_1: u32 = 2048;
pub const COMP6_CSR_COMP6OUTSEL_2: u32 = 4096;
pub const COMP6_CSR_COMP6OUTSEL_3: u32 = 8192;
pub const COMP6_CSR_COMP6POL_Pos: u32 = 15;
pub const COMP6_CSR_COMP6POL_Msk: u32 = 32768;
pub const COMP6_CSR_COMP6POL: u32 = 32768;
pub const COMP6_CSR_COMP6HYST_Pos: u32 = 16;
pub const COMP6_CSR_COMP6HYST_Msk: u32 = 196608;
pub const COMP6_CSR_COMP6HYST: u32 = 196608;
pub const COMP6_CSR_COMP6HYST_0: u32 = 65536;
pub const COMP6_CSR_COMP6HYST_1: u32 = 131072;
pub const COMP6_CSR_COMP6BLANKING_Pos: u32 = 18;
pub const COMP6_CSR_COMP6BLANKING_Msk: u32 = 786432;
pub const COMP6_CSR_COMP6BLANKING: u32 = 786432;
pub const COMP6_CSR_COMP6BLANKING_0: u32 = 262144;
pub const COMP6_CSR_COMP6BLANKING_1: u32 = 524288;
pub const COMP6_CSR_COMP6BLANKING_2: u32 = 1048576;
pub const COMP6_CSR_COMP6OUT_Pos: u32 = 30;
pub const COMP6_CSR_COMP6OUT_Msk: u32 = 1073741824;
pub const COMP6_CSR_COMP6OUT: u32 = 1073741824;
pub const COMP6_CSR_COMP6LOCK_Pos: u32 = 31;
pub const COMP6_CSR_COMP6LOCK_Msk: u32 = 2147483648;
pub const COMP6_CSR_COMP6LOCK: u32 = 2147483648;
pub const COMP7_CSR_COMP7EN_Pos: u32 = 0;
pub const COMP7_CSR_COMP7EN_Msk: u32 = 1;
pub const COMP7_CSR_COMP7EN: u32 = 1;
pub const COMP7_CSR_COMP7MODE_Pos: u32 = 2;
pub const COMP7_CSR_COMP7MODE_Msk: u32 = 12;
pub const COMP7_CSR_COMP7MODE: u32 = 12;
pub const COMP7_CSR_COMP7MODE_0: u32 = 4;
pub const COMP7_CSR_COMP7MODE_1: u32 = 8;
pub const COMP7_CSR_COMP7INSEL_Pos: u32 = 4;
pub const COMP7_CSR_COMP7INSEL_Msk: u32 = 112;
pub const COMP7_CSR_COMP7INSEL: u32 = 112;
pub const COMP7_CSR_COMP7INSEL_0: u32 = 16;
pub const COMP7_CSR_COMP7INSEL_1: u32 = 32;
pub const COMP7_CSR_COMP7INSEL_2: u32 = 64;
pub const COMP7_CSR_COMP7NONINSEL_Pos: u32 = 7;
pub const COMP7_CSR_COMP7NONINSEL_Msk: u32 = 128;
pub const COMP7_CSR_COMP7NONINSEL: u32 = 128;
pub const COMP7_CSR_COMP7OUTSEL_Pos: u32 = 10;
pub const COMP7_CSR_COMP7OUTSEL_Msk: u32 = 15360;
pub const COMP7_CSR_COMP7OUTSEL: u32 = 15360;
pub const COMP7_CSR_COMP7OUTSEL_0: u32 = 1024;
pub const COMP7_CSR_COMP7OUTSEL_1: u32 = 2048;
pub const COMP7_CSR_COMP7OUTSEL_2: u32 = 4096;
pub const COMP7_CSR_COMP7OUTSEL_3: u32 = 8192;
pub const COMP7_CSR_COMP7POL_Pos: u32 = 15;
pub const COMP7_CSR_COMP7POL_Msk: u32 = 32768;
pub const COMP7_CSR_COMP7POL: u32 = 32768;
pub const COMP7_CSR_COMP7HYST_Pos: u32 = 16;
pub const COMP7_CSR_COMP7HYST_Msk: u32 = 196608;
pub const COMP7_CSR_COMP7HYST: u32 = 196608;
pub const COMP7_CSR_COMP7HYST_0: u32 = 65536;
pub const COMP7_CSR_COMP7HYST_1: u32 = 131072;
pub const COMP7_CSR_COMP7BLANKING_Pos: u32 = 18;
pub const COMP7_CSR_COMP7BLANKING_Msk: u32 = 786432;
pub const COMP7_CSR_COMP7BLANKING: u32 = 786432;
pub const COMP7_CSR_COMP7BLANKING_0: u32 = 262144;
pub const COMP7_CSR_COMP7BLANKING_1: u32 = 524288;
pub const COMP7_CSR_COMP7BLANKING_2: u32 = 1048576;
pub const COMP7_CSR_COMP7OUT_Pos: u32 = 30;
pub const COMP7_CSR_COMP7OUT_Msk: u32 = 1073741824;
pub const COMP7_CSR_COMP7OUT: u32 = 1073741824;
pub const COMP7_CSR_COMP7LOCK_Pos: u32 = 31;
pub const COMP7_CSR_COMP7LOCK_Msk: u32 = 2147483648;
pub const COMP7_CSR_COMP7LOCK: u32 = 2147483648;
pub const COMP_CSR_COMPxEN_Pos: u32 = 0;
pub const COMP_CSR_COMPxEN_Msk: u32 = 1;
pub const COMP_CSR_COMPxEN: u32 = 1;
pub const COMP_CSR_COMPxSW1_Pos: u32 = 1;
pub const COMP_CSR_COMPxSW1_Msk: u32 = 2;
pub const COMP_CSR_COMPxSW1: u32 = 2;
pub const COMP_CSR_COMPxMODE_Pos: u32 = 2;
pub const COMP_CSR_COMPxMODE_Msk: u32 = 12;
pub const COMP_CSR_COMPxMODE: u32 = 12;
pub const COMP_CSR_COMPxMODE_0: u32 = 4;
pub const COMP_CSR_COMPxMODE_1: u32 = 8;
pub const COMP_CSR_COMPxINSEL_Pos: u32 = 4;
pub const COMP_CSR_COMPxINSEL_Msk: u32 = 112;
pub const COMP_CSR_COMPxINSEL: u32 = 112;
pub const COMP_CSR_COMPxINSEL_0: u32 = 16;
pub const COMP_CSR_COMPxINSEL_1: u32 = 32;
pub const COMP_CSR_COMPxINSEL_2: u32 = 64;
pub const COMP_CSR_COMPxNONINSEL_Pos: u32 = 7;
pub const COMP_CSR_COMPxNONINSEL_Msk: u32 = 128;
pub const COMP_CSR_COMPxNONINSEL: u32 = 128;
pub const COMP_CSR_COMPxWNDWEN_Pos: u32 = 9;
pub const COMP_CSR_COMPxWNDWEN_Msk: u32 = 512;
pub const COMP_CSR_COMPxWNDWEN: u32 = 512;
pub const COMP_CSR_COMPxOUTSEL_Pos: u32 = 10;
pub const COMP_CSR_COMPxOUTSEL_Msk: u32 = 15360;
pub const COMP_CSR_COMPxOUTSEL: u32 = 15360;
pub const COMP_CSR_COMPxOUTSEL_0: u32 = 1024;
pub const COMP_CSR_COMPxOUTSEL_1: u32 = 2048;
pub const COMP_CSR_COMPxOUTSEL_2: u32 = 4096;
pub const COMP_CSR_COMPxOUTSEL_3: u32 = 8192;
pub const COMP_CSR_COMPxPOL_Pos: u32 = 15;
pub const COMP_CSR_COMPxPOL_Msk: u32 = 32768;
pub const COMP_CSR_COMPxPOL: u32 = 32768;
pub const COMP_CSR_COMPxHYST_Pos: u32 = 16;
pub const COMP_CSR_COMPxHYST_Msk: u32 = 196608;
pub const COMP_CSR_COMPxHYST: u32 = 196608;
pub const COMP_CSR_COMPxHYST_0: u32 = 65536;
pub const COMP_CSR_COMPxHYST_1: u32 = 131072;
pub const COMP_CSR_COMPxBLANKING_Pos: u32 = 18;
pub const COMP_CSR_COMPxBLANKING_Msk: u32 = 786432;
pub const COMP_CSR_COMPxBLANKING: u32 = 786432;
pub const COMP_CSR_COMPxBLANKING_0: u32 = 262144;
pub const COMP_CSR_COMPxBLANKING_1: u32 = 524288;
pub const COMP_CSR_COMPxBLANKING_2: u32 = 1048576;
pub const COMP_CSR_COMPxOUT_Pos: u32 = 30;
pub const COMP_CSR_COMPxOUT_Msk: u32 = 1073741824;
pub const COMP_CSR_COMPxOUT: u32 = 1073741824;
pub const COMP_CSR_COMPxLOCK_Pos: u32 = 31;
pub const COMP_CSR_COMPxLOCK_Msk: u32 = 2147483648;
pub const COMP_CSR_COMPxLOCK: u32 = 2147483648;
pub const OPAMP1_CSR_OPAMP1EN_Pos: u32 = 0;
pub const OPAMP1_CSR_OPAMP1EN_Msk: u32 = 1;
pub const OPAMP1_CSR_OPAMP1EN: u32 = 1;
pub const OPAMP1_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP1_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP1_CSR_FORCEVP: u32 = 2;
pub const OPAMP1_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP1_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP1_CSR_VPSEL: u32 = 12;
pub const OPAMP1_CSR_VPSEL_0: u32 = 4;
pub const OPAMP1_CSR_VPSEL_1: u32 = 8;
pub const OPAMP1_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP1_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP1_CSR_VMSEL: u32 = 96;
pub const OPAMP1_CSR_VMSEL_0: u32 = 32;
pub const OPAMP1_CSR_VMSEL_1: u32 = 64;
pub const OPAMP1_CSR_TCMEN_Pos: u32 = 7;
pub const OPAMP1_CSR_TCMEN_Msk: u32 = 128;
pub const OPAMP1_CSR_TCMEN: u32 = 128;
pub const OPAMP1_CSR_VMSSEL_Pos: u32 = 8;
pub const OPAMP1_CSR_VMSSEL_Msk: u32 = 256;
pub const OPAMP1_CSR_VMSSEL: u32 = 256;
pub const OPAMP1_CSR_VPSSEL_Pos: u32 = 9;
pub const OPAMP1_CSR_VPSSEL_Msk: u32 = 1536;
pub const OPAMP1_CSR_VPSSEL: u32 = 1536;
pub const OPAMP1_CSR_VPSSEL_0: u32 = 512;
pub const OPAMP1_CSR_VPSSEL_1: u32 = 1024;
pub const OPAMP1_CSR_CALON_Pos: u32 = 11;
pub const OPAMP1_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP1_CSR_CALON: u32 = 2048;
pub const OPAMP1_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP1_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP1_CSR_CALSEL: u32 = 12288;
pub const OPAMP1_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP1_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP1_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP1_CSR_PGGAIN_Msk: u32 = 245760;
pub const OPAMP1_CSR_PGGAIN: u32 = 245760;
pub const OPAMP1_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP1_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP1_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP1_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP1_CSR_USERTRIM_Pos: u32 = 18;
pub const OPAMP1_CSR_USERTRIM_Msk: u32 = 262144;
pub const OPAMP1_CSR_USERTRIM: u32 = 262144;
pub const OPAMP1_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP1_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP1_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP1_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP1_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP1_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP1_CSR_TSTREF_Pos: u32 = 29;
pub const OPAMP1_CSR_TSTREF_Msk: u32 = 536870912;
pub const OPAMP1_CSR_TSTREF: u32 = 536870912;
pub const OPAMP1_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP1_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP1_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP1_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP1_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP1_CSR_LOCK: u32 = 2147483648;
pub const OPAMP2_CSR_OPAMP2EN_Pos: u32 = 0;
pub const OPAMP2_CSR_OPAMP2EN_Msk: u32 = 1;
pub const OPAMP2_CSR_OPAMP2EN: u32 = 1;
pub const OPAMP2_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP2_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP2_CSR_FORCEVP: u32 = 2;
pub const OPAMP2_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP2_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP2_CSR_VPSEL: u32 = 12;
pub const OPAMP2_CSR_VPSEL_0: u32 = 4;
pub const OPAMP2_CSR_VPSEL_1: u32 = 8;
pub const OPAMP2_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP2_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP2_CSR_VMSEL: u32 = 96;
pub const OPAMP2_CSR_VMSEL_0: u32 = 32;
pub const OPAMP2_CSR_VMSEL_1: u32 = 64;
pub const OPAMP2_CSR_TCMEN_Pos: u32 = 7;
pub const OPAMP2_CSR_TCMEN_Msk: u32 = 128;
pub const OPAMP2_CSR_TCMEN: u32 = 128;
pub const OPAMP2_CSR_VMSSEL_Pos: u32 = 8;
pub const OPAMP2_CSR_VMSSEL_Msk: u32 = 256;
pub const OPAMP2_CSR_VMSSEL: u32 = 256;
pub const OPAMP2_CSR_VPSSEL_Pos: u32 = 9;
pub const OPAMP2_CSR_VPSSEL_Msk: u32 = 1536;
pub const OPAMP2_CSR_VPSSEL: u32 = 1536;
pub const OPAMP2_CSR_VPSSEL_0: u32 = 512;
pub const OPAMP2_CSR_VPSSEL_1: u32 = 1024;
pub const OPAMP2_CSR_CALON_Pos: u32 = 11;
pub const OPAMP2_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP2_CSR_CALON: u32 = 2048;
pub const OPAMP2_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP2_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP2_CSR_CALSEL: u32 = 12288;
pub const OPAMP2_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP2_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP2_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP2_CSR_PGGAIN_Msk: u32 = 245760;
pub const OPAMP2_CSR_PGGAIN: u32 = 245760;
pub const OPAMP2_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP2_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP2_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP2_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP2_CSR_USERTRIM_Pos: u32 = 18;
pub const OPAMP2_CSR_USERTRIM_Msk: u32 = 262144;
pub const OPAMP2_CSR_USERTRIM: u32 = 262144;
pub const OPAMP2_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP2_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP2_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP2_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP2_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP2_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP2_CSR_TSTREF_Pos: u32 = 29;
pub const OPAMP2_CSR_TSTREF_Msk: u32 = 536870912;
pub const OPAMP2_CSR_TSTREF: u32 = 536870912;
pub const OPAMP2_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP2_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP2_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP2_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP2_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP2_CSR_LOCK: u32 = 2147483648;
pub const OPAMP3_CSR_OPAMP3EN_Pos: u32 = 0;
pub const OPAMP3_CSR_OPAMP3EN_Msk: u32 = 1;
pub const OPAMP3_CSR_OPAMP3EN: u32 = 1;
pub const OPAMP3_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP3_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP3_CSR_FORCEVP: u32 = 2;
pub const OPAMP3_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP3_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP3_CSR_VPSEL: u32 = 12;
pub const OPAMP3_CSR_VPSEL_0: u32 = 4;
pub const OPAMP3_CSR_VPSEL_1: u32 = 8;
pub const OPAMP3_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP3_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP3_CSR_VMSEL: u32 = 96;
pub const OPAMP3_CSR_VMSEL_0: u32 = 32;
pub const OPAMP3_CSR_VMSEL_1: u32 = 64;
pub const OPAMP3_CSR_TCMEN_Pos: u32 = 7;
pub const OPAMP3_CSR_TCMEN_Msk: u32 = 128;
pub const OPAMP3_CSR_TCMEN: u32 = 128;
pub const OPAMP3_CSR_VMSSEL_Pos: u32 = 8;
pub const OPAMP3_CSR_VMSSEL_Msk: u32 = 256;
pub const OPAMP3_CSR_VMSSEL: u32 = 256;
pub const OPAMP3_CSR_VPSSEL_Pos: u32 = 9;
pub const OPAMP3_CSR_VPSSEL_Msk: u32 = 1536;
pub const OPAMP3_CSR_VPSSEL: u32 = 1536;
pub const OPAMP3_CSR_VPSSEL_0: u32 = 512;
pub const OPAMP3_CSR_VPSSEL_1: u32 = 1024;
pub const OPAMP3_CSR_CALON_Pos: u32 = 11;
pub const OPAMP3_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP3_CSR_CALON: u32 = 2048;
pub const OPAMP3_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP3_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP3_CSR_CALSEL: u32 = 12288;
pub const OPAMP3_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP3_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP3_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP3_CSR_PGGAIN_Msk: u32 = 245760;
pub const OPAMP3_CSR_PGGAIN: u32 = 245760;
pub const OPAMP3_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP3_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP3_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP3_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP3_CSR_USERTRIM_Pos: u32 = 18;
pub const OPAMP3_CSR_USERTRIM_Msk: u32 = 262144;
pub const OPAMP3_CSR_USERTRIM: u32 = 262144;
pub const OPAMP3_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP3_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP3_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP3_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP3_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP3_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP3_CSR_TSTREF_Pos: u32 = 29;
pub const OPAMP3_CSR_TSTREF_Msk: u32 = 536870912;
pub const OPAMP3_CSR_TSTREF: u32 = 536870912;
pub const OPAMP3_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP3_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP3_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP3_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP3_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP3_CSR_LOCK: u32 = 2147483648;
pub const OPAMP4_CSR_OPAMP4EN_Pos: u32 = 0;
pub const OPAMP4_CSR_OPAMP4EN_Msk: u32 = 1;
pub const OPAMP4_CSR_OPAMP4EN: u32 = 1;
pub const OPAMP4_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP4_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP4_CSR_FORCEVP: u32 = 2;
pub const OPAMP4_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP4_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP4_CSR_VPSEL: u32 = 12;
pub const OPAMP4_CSR_VPSEL_0: u32 = 4;
pub const OPAMP4_CSR_VPSEL_1: u32 = 8;
pub const OPAMP4_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP4_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP4_CSR_VMSEL: u32 = 96;
pub const OPAMP4_CSR_VMSEL_0: u32 = 32;
pub const OPAMP4_CSR_VMSEL_1: u32 = 64;
pub const OPAMP4_CSR_TCMEN_Pos: u32 = 7;
pub const OPAMP4_CSR_TCMEN_Msk: u32 = 128;
pub const OPAMP4_CSR_TCMEN: u32 = 128;
pub const OPAMP4_CSR_VMSSEL_Pos: u32 = 8;
pub const OPAMP4_CSR_VMSSEL_Msk: u32 = 256;
pub const OPAMP4_CSR_VMSSEL: u32 = 256;
pub const OPAMP4_CSR_VPSSEL_Pos: u32 = 9;
pub const OPAMP4_CSR_VPSSEL_Msk: u32 = 1536;
pub const OPAMP4_CSR_VPSSEL: u32 = 1536;
pub const OPAMP4_CSR_VPSSEL_0: u32 = 512;
pub const OPAMP4_CSR_VPSSEL_1: u32 = 1024;
pub const OPAMP4_CSR_CALON_Pos: u32 = 11;
pub const OPAMP4_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP4_CSR_CALON: u32 = 2048;
pub const OPAMP4_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP4_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP4_CSR_CALSEL: u32 = 12288;
pub const OPAMP4_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP4_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP4_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP4_CSR_PGGAIN_Msk: u32 = 245760;
pub const OPAMP4_CSR_PGGAIN: u32 = 245760;
pub const OPAMP4_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP4_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP4_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP4_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP4_CSR_USERTRIM_Pos: u32 = 18;
pub const OPAMP4_CSR_USERTRIM_Msk: u32 = 262144;
pub const OPAMP4_CSR_USERTRIM: u32 = 262144;
pub const OPAMP4_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP4_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP4_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP4_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP4_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP4_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP4_CSR_TSTREF_Pos: u32 = 29;
pub const OPAMP4_CSR_TSTREF_Msk: u32 = 536870912;
pub const OPAMP4_CSR_TSTREF: u32 = 536870912;
pub const OPAMP4_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP4_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP4_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP4_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP4_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP4_CSR_LOCK: u32 = 2147483648;
pub const OPAMP_CSR_OPAMPxEN_Pos: u32 = 0;
pub const OPAMP_CSR_OPAMPxEN_Msk: u32 = 1;
pub const OPAMP_CSR_OPAMPxEN: u32 = 1;
pub const OPAMP_CSR_FORCEVP_Pos: u32 = 1;
pub const OPAMP_CSR_FORCEVP_Msk: u32 = 2;
pub const OPAMP_CSR_FORCEVP: u32 = 2;
pub const OPAMP_CSR_VPSEL_Pos: u32 = 2;
pub const OPAMP_CSR_VPSEL_Msk: u32 = 12;
pub const OPAMP_CSR_VPSEL: u32 = 12;
pub const OPAMP_CSR_VPSEL_0: u32 = 4;
pub const OPAMP_CSR_VPSEL_1: u32 = 8;
pub const OPAMP_CSR_VMSEL_Pos: u32 = 5;
pub const OPAMP_CSR_VMSEL_Msk: u32 = 96;
pub const OPAMP_CSR_VMSEL: u32 = 96;
pub const OPAMP_CSR_VMSEL_0: u32 = 32;
pub const OPAMP_CSR_VMSEL_1: u32 = 64;
pub const OPAMP_CSR_TCMEN_Pos: u32 = 7;
pub const OPAMP_CSR_TCMEN_Msk: u32 = 128;
pub const OPAMP_CSR_TCMEN: u32 = 128;
pub const OPAMP_CSR_VMSSEL_Pos: u32 = 8;
pub const OPAMP_CSR_VMSSEL_Msk: u32 = 256;
pub const OPAMP_CSR_VMSSEL: u32 = 256;
pub const OPAMP_CSR_VPSSEL_Pos: u32 = 9;
pub const OPAMP_CSR_VPSSEL_Msk: u32 = 1536;
pub const OPAMP_CSR_VPSSEL: u32 = 1536;
pub const OPAMP_CSR_VPSSEL_0: u32 = 512;
pub const OPAMP_CSR_VPSSEL_1: u32 = 1024;
pub const OPAMP_CSR_CALON_Pos: u32 = 11;
pub const OPAMP_CSR_CALON_Msk: u32 = 2048;
pub const OPAMP_CSR_CALON: u32 = 2048;
pub const OPAMP_CSR_CALSEL_Pos: u32 = 12;
pub const OPAMP_CSR_CALSEL_Msk: u32 = 12288;
pub const OPAMP_CSR_CALSEL: u32 = 12288;
pub const OPAMP_CSR_CALSEL_0: u32 = 4096;
pub const OPAMP_CSR_CALSEL_1: u32 = 8192;
pub const OPAMP_CSR_PGGAIN_Pos: u32 = 14;
pub const OPAMP_CSR_PGGAIN_Msk: u32 = 245760;
pub const OPAMP_CSR_PGGAIN: u32 = 245760;
pub const OPAMP_CSR_PGGAIN_0: u32 = 16384;
pub const OPAMP_CSR_PGGAIN_1: u32 = 32768;
pub const OPAMP_CSR_PGGAIN_2: u32 = 65536;
pub const OPAMP_CSR_PGGAIN_3: u32 = 131072;
pub const OPAMP_CSR_USERTRIM_Pos: u32 = 18;
pub const OPAMP_CSR_USERTRIM_Msk: u32 = 262144;
pub const OPAMP_CSR_USERTRIM: u32 = 262144;
pub const OPAMP_CSR_TRIMOFFSETP_Pos: u32 = 19;
pub const OPAMP_CSR_TRIMOFFSETP_Msk: u32 = 16252928;
pub const OPAMP_CSR_TRIMOFFSETP: u32 = 16252928;
pub const OPAMP_CSR_TRIMOFFSETN_Pos: u32 = 24;
pub const OPAMP_CSR_TRIMOFFSETN_Msk: u32 = 520093696;
pub const OPAMP_CSR_TRIMOFFSETN: u32 = 520093696;
pub const OPAMP_CSR_TSTREF_Pos: u32 = 29;
pub const OPAMP_CSR_TSTREF_Msk: u32 = 536870912;
pub const OPAMP_CSR_TSTREF: u32 = 536870912;
pub const OPAMP_CSR_OUTCAL_Pos: u32 = 30;
pub const OPAMP_CSR_OUTCAL_Msk: u32 = 1073741824;
pub const OPAMP_CSR_OUTCAL: u32 = 1073741824;
pub const OPAMP_CSR_LOCK_Pos: u32 = 31;
pub const OPAMP_CSR_LOCK_Msk: u32 = 2147483648;
pub const OPAMP_CSR_LOCK: u32 = 2147483648;
pub const CAN_MCR_INRQ_Pos: u32 = 0;
pub const CAN_MCR_INRQ_Msk: u32 = 1;
pub const CAN_MCR_INRQ: u32 = 1;
pub const CAN_MCR_SLEEP_Pos: u32 = 1;
pub const CAN_MCR_SLEEP_Msk: u32 = 2;
pub const CAN_MCR_SLEEP: u32 = 2;
pub const CAN_MCR_TXFP_Pos: u32 = 2;
pub const CAN_MCR_TXFP_Msk: u32 = 4;
pub const CAN_MCR_TXFP: u32 = 4;
pub const CAN_MCR_RFLM_Pos: u32 = 3;
pub const CAN_MCR_RFLM_Msk: u32 = 8;
pub const CAN_MCR_RFLM: u32 = 8;
pub const CAN_MCR_NART_Pos: u32 = 4;
pub const CAN_MCR_NART_Msk: u32 = 16;
pub const CAN_MCR_NART: u32 = 16;
pub const CAN_MCR_AWUM_Pos: u32 = 5;
pub const CAN_MCR_AWUM_Msk: u32 = 32;
pub const CAN_MCR_AWUM: u32 = 32;
pub const CAN_MCR_ABOM_Pos: u32 = 6;
pub const CAN_MCR_ABOM_Msk: u32 = 64;
pub const CAN_MCR_ABOM: u32 = 64;
pub const CAN_MCR_TTCM_Pos: u32 = 7;
pub const CAN_MCR_TTCM_Msk: u32 = 128;
pub const CAN_MCR_TTCM: u32 = 128;
pub const CAN_MCR_RESET_Pos: u32 = 15;
pub const CAN_MCR_RESET_Msk: u32 = 32768;
pub const CAN_MCR_RESET: u32 = 32768;
pub const CAN_MSR_INAK_Pos: u32 = 0;
pub const CAN_MSR_INAK_Msk: u32 = 1;
pub const CAN_MSR_INAK: u32 = 1;
pub const CAN_MSR_SLAK_Pos: u32 = 1;
pub const CAN_MSR_SLAK_Msk: u32 = 2;
pub const CAN_MSR_SLAK: u32 = 2;
pub const CAN_MSR_ERRI_Pos: u32 = 2;
pub const CAN_MSR_ERRI_Msk: u32 = 4;
pub const CAN_MSR_ERRI: u32 = 4;
pub const CAN_MSR_WKUI_Pos: u32 = 3;
pub const CAN_MSR_WKUI_Msk: u32 = 8;
pub const CAN_MSR_WKUI: u32 = 8;
pub const CAN_MSR_SLAKI_Pos: u32 = 4;
pub const CAN_MSR_SLAKI_Msk: u32 = 16;
pub const CAN_MSR_SLAKI: u32 = 16;
pub const CAN_MSR_TXM_Pos: u32 = 8;
pub const CAN_MSR_TXM_Msk: u32 = 256;
pub const CAN_MSR_TXM: u32 = 256;
pub const CAN_MSR_RXM_Pos: u32 = 9;
pub const CAN_MSR_RXM_Msk: u32 = 512;
pub const CAN_MSR_RXM: u32 = 512;
pub const CAN_MSR_SAMP_Pos: u32 = 10;
pub const CAN_MSR_SAMP_Msk: u32 = 1024;
pub const CAN_MSR_SAMP: u32 = 1024;
pub const CAN_MSR_RX_Pos: u32 = 11;
pub const CAN_MSR_RX_Msk: u32 = 2048;
pub const CAN_MSR_RX: u32 = 2048;
pub const CAN_TSR_RQCP0_Pos: u32 = 0;
pub const CAN_TSR_RQCP0_Msk: u32 = 1;
pub const CAN_TSR_RQCP0: u32 = 1;
pub const CAN_TSR_TXOK0_Pos: u32 = 1;
pub const CAN_TSR_TXOK0_Msk: u32 = 2;
pub const CAN_TSR_TXOK0: u32 = 2;
pub const CAN_TSR_ALST0_Pos: u32 = 2;
pub const CAN_TSR_ALST0_Msk: u32 = 4;
pub const CAN_TSR_ALST0: u32 = 4;
pub const CAN_TSR_TERR0_Pos: u32 = 3;
pub const CAN_TSR_TERR0_Msk: u32 = 8;
pub const CAN_TSR_TERR0: u32 = 8;
pub const CAN_TSR_ABRQ0_Pos: u32 = 7;
pub const CAN_TSR_ABRQ0_Msk: u32 = 128;
pub const CAN_TSR_ABRQ0: u32 = 128;
pub const CAN_TSR_RQCP1_Pos: u32 = 8;
pub const CAN_TSR_RQCP1_Msk: u32 = 256;
pub const CAN_TSR_RQCP1: u32 = 256;
pub const CAN_TSR_TXOK1_Pos: u32 = 9;
pub const CAN_TSR_TXOK1_Msk: u32 = 512;
pub const CAN_TSR_TXOK1: u32 = 512;
pub const CAN_TSR_ALST1_Pos: u32 = 10;
pub const CAN_TSR_ALST1_Msk: u32 = 1024;
pub const CAN_TSR_ALST1: u32 = 1024;
pub const CAN_TSR_TERR1_Pos: u32 = 11;
pub const CAN_TSR_TERR1_Msk: u32 = 2048;
pub const CAN_TSR_TERR1: u32 = 2048;
pub const CAN_TSR_ABRQ1_Pos: u32 = 15;
pub const CAN_TSR_ABRQ1_Msk: u32 = 32768;
pub const CAN_TSR_ABRQ1: u32 = 32768;
pub const CAN_TSR_RQCP2_Pos: u32 = 16;
pub const CAN_TSR_RQCP2_Msk: u32 = 65536;
pub const CAN_TSR_RQCP2: u32 = 65536;
pub const CAN_TSR_TXOK2_Pos: u32 = 17;
pub const CAN_TSR_TXOK2_Msk: u32 = 131072;
pub const CAN_TSR_TXOK2: u32 = 131072;
pub const CAN_TSR_ALST2_Pos: u32 = 18;
pub const CAN_TSR_ALST2_Msk: u32 = 262144;
pub const CAN_TSR_ALST2: u32 = 262144;
pub const CAN_TSR_TERR2_Pos: u32 = 19;
pub const CAN_TSR_TERR2_Msk: u32 = 524288;
pub const CAN_TSR_TERR2: u32 = 524288;
pub const CAN_TSR_ABRQ2_Pos: u32 = 23;
pub const CAN_TSR_ABRQ2_Msk: u32 = 8388608;
pub const CAN_TSR_ABRQ2: u32 = 8388608;
pub const CAN_TSR_CODE_Pos: u32 = 24;
pub const CAN_TSR_CODE_Msk: u32 = 50331648;
pub const CAN_TSR_CODE: u32 = 50331648;
pub const CAN_TSR_TME_Pos: u32 = 26;
pub const CAN_TSR_TME_Msk: u32 = 469762048;
pub const CAN_TSR_TME: u32 = 469762048;
pub const CAN_TSR_TME0_Pos: u32 = 26;
pub const CAN_TSR_TME0_Msk: u32 = 67108864;
pub const CAN_TSR_TME0: u32 = 67108864;
pub const CAN_TSR_TME1_Pos: u32 = 27;
pub const CAN_TSR_TME1_Msk: u32 = 134217728;
pub const CAN_TSR_TME1: u32 = 134217728;
pub const CAN_TSR_TME2_Pos: u32 = 28;
pub const CAN_TSR_TME2_Msk: u32 = 268435456;
pub const CAN_TSR_TME2: u32 = 268435456;
pub const CAN_TSR_LOW_Pos: u32 = 29;
pub const CAN_TSR_LOW_Msk: u32 = 3758096384;
pub const CAN_TSR_LOW: u32 = 3758096384;
pub const CAN_TSR_LOW0_Pos: u32 = 29;
pub const CAN_TSR_LOW0_Msk: u32 = 536870912;
pub const CAN_TSR_LOW0: u32 = 536870912;
pub const CAN_TSR_LOW1_Pos: u32 = 30;
pub const CAN_TSR_LOW1_Msk: u32 = 1073741824;
pub const CAN_TSR_LOW1: u32 = 1073741824;
pub const CAN_TSR_LOW2_Pos: u32 = 31;
pub const CAN_TSR_LOW2_Msk: u32 = 2147483648;
pub const CAN_TSR_LOW2: u32 = 2147483648;
pub const CAN_RF0R_FMP0_Pos: u32 = 0;
pub const CAN_RF0R_FMP0_Msk: u32 = 3;
pub const CAN_RF0R_FMP0: u32 = 3;
pub const CAN_RF0R_FULL0_Pos: u32 = 3;
pub const CAN_RF0R_FULL0_Msk: u32 = 8;
pub const CAN_RF0R_FULL0: u32 = 8;
pub const CAN_RF0R_FOVR0_Pos: u32 = 4;
pub const CAN_RF0R_FOVR0_Msk: u32 = 16;
pub const CAN_RF0R_FOVR0: u32 = 16;
pub const CAN_RF0R_RFOM0_Pos: u32 = 5;
pub const CAN_RF0R_RFOM0_Msk: u32 = 32;
pub const CAN_RF0R_RFOM0: u32 = 32;
pub const CAN_RF1R_FMP1_Pos: u32 = 0;
pub const CAN_RF1R_FMP1_Msk: u32 = 3;
pub const CAN_RF1R_FMP1: u32 = 3;
pub const CAN_RF1R_FULL1_Pos: u32 = 3;
pub const CAN_RF1R_FULL1_Msk: u32 = 8;
pub const CAN_RF1R_FULL1: u32 = 8;
pub const CAN_RF1R_FOVR1_Pos: u32 = 4;
pub const CAN_RF1R_FOVR1_Msk: u32 = 16;
pub const CAN_RF1R_FOVR1: u32 = 16;
pub const CAN_RF1R_RFOM1_Pos: u32 = 5;
pub const CAN_RF1R_RFOM1_Msk: u32 = 32;
pub const CAN_RF1R_RFOM1: u32 = 32;
pub const CAN_IER_TMEIE_Pos: u32 = 0;
pub const CAN_IER_TMEIE_Msk: u32 = 1;
pub const CAN_IER_TMEIE: u32 = 1;
pub const CAN_IER_FMPIE0_Pos: u32 = 1;
pub const CAN_IER_FMPIE0_Msk: u32 = 2;
pub const CAN_IER_FMPIE0: u32 = 2;
pub const CAN_IER_FFIE0_Pos: u32 = 2;
pub const CAN_IER_FFIE0_Msk: u32 = 4;
pub const CAN_IER_FFIE0: u32 = 4;
pub const CAN_IER_FOVIE0_Pos: u32 = 3;
pub const CAN_IER_FOVIE0_Msk: u32 = 8;
pub const CAN_IER_FOVIE0: u32 = 8;
pub const CAN_IER_FMPIE1_Pos: u32 = 4;
pub const CAN_IER_FMPIE1_Msk: u32 = 16;
pub const CAN_IER_FMPIE1: u32 = 16;
pub const CAN_IER_FFIE1_Pos: u32 = 5;
pub const CAN_IER_FFIE1_Msk: u32 = 32;
pub const CAN_IER_FFIE1: u32 = 32;
pub const CAN_IER_FOVIE1_Pos: u32 = 6;
pub const CAN_IER_FOVIE1_Msk: u32 = 64;
pub const CAN_IER_FOVIE1: u32 = 64;
pub const CAN_IER_EWGIE_Pos: u32 = 8;
pub const CAN_IER_EWGIE_Msk: u32 = 256;
pub const CAN_IER_EWGIE: u32 = 256;
pub const CAN_IER_EPVIE_Pos: u32 = 9;
pub const CAN_IER_EPVIE_Msk: u32 = 512;
pub const CAN_IER_EPVIE: u32 = 512;
pub const CAN_IER_BOFIE_Pos: u32 = 10;
pub const CAN_IER_BOFIE_Msk: u32 = 1024;
pub const CAN_IER_BOFIE: u32 = 1024;
pub const CAN_IER_LECIE_Pos: u32 = 11;
pub const CAN_IER_LECIE_Msk: u32 = 2048;
pub const CAN_IER_LECIE: u32 = 2048;
pub const CAN_IER_ERRIE_Pos: u32 = 15;
pub const CAN_IER_ERRIE_Msk: u32 = 32768;
pub const CAN_IER_ERRIE: u32 = 32768;
pub const CAN_IER_WKUIE_Pos: u32 = 16;
pub const CAN_IER_WKUIE_Msk: u32 = 65536;
pub const CAN_IER_WKUIE: u32 = 65536;
pub const CAN_IER_SLKIE_Pos: u32 = 17;
pub const CAN_IER_SLKIE_Msk: u32 = 131072;
pub const CAN_IER_SLKIE: u32 = 131072;
pub const CAN_ESR_EWGF_Pos: u32 = 0;
pub const CAN_ESR_EWGF_Msk: u32 = 1;
pub const CAN_ESR_EWGF: u32 = 1;
pub const CAN_ESR_EPVF_Pos: u32 = 1;
pub const CAN_ESR_EPVF_Msk: u32 = 2;
pub const CAN_ESR_EPVF: u32 = 2;
pub const CAN_ESR_BOFF_Pos: u32 = 2;
pub const CAN_ESR_BOFF_Msk: u32 = 4;
pub const CAN_ESR_BOFF: u32 = 4;
pub const CAN_ESR_LEC_Pos: u32 = 4;
pub const CAN_ESR_LEC_Msk: u32 = 112;
pub const CAN_ESR_LEC: u32 = 112;
pub const CAN_ESR_LEC_0: u32 = 16;
pub const CAN_ESR_LEC_1: u32 = 32;
pub const CAN_ESR_LEC_2: u32 = 64;
pub const CAN_ESR_TEC_Pos: u32 = 16;
pub const CAN_ESR_TEC_Msk: u32 = 16711680;
pub const CAN_ESR_TEC: u32 = 16711680;
pub const CAN_ESR_REC_Pos: u32 = 24;
pub const CAN_ESR_REC_Msk: u32 = 4278190080;
pub const CAN_ESR_REC: u32 = 4278190080;
pub const CAN_BTR_BRP_Pos: u32 = 0;
pub const CAN_BTR_BRP_Msk: u32 = 1023;
pub const CAN_BTR_BRP: u32 = 1023;
pub const CAN_BTR_TS1_Pos: u32 = 16;
pub const CAN_BTR_TS1_Msk: u32 = 983040;
pub const CAN_BTR_TS1: u32 = 983040;
pub const CAN_BTR_TS1_0: u32 = 65536;
pub const CAN_BTR_TS1_1: u32 = 131072;
pub const CAN_BTR_TS1_2: u32 = 262144;
pub const CAN_BTR_TS1_3: u32 = 524288;
pub const CAN_BTR_TS2_Pos: u32 = 20;
pub const CAN_BTR_TS2_Msk: u32 = 7340032;
pub const CAN_BTR_TS2: u32 = 7340032;
pub const CAN_BTR_TS2_0: u32 = 1048576;
pub const CAN_BTR_TS2_1: u32 = 2097152;
pub const CAN_BTR_TS2_2: u32 = 4194304;
pub const CAN_BTR_SJW_Pos: u32 = 24;
pub const CAN_BTR_SJW_Msk: u32 = 50331648;
pub const CAN_BTR_SJW: u32 = 50331648;
pub const CAN_BTR_SJW_0: u32 = 16777216;
pub const CAN_BTR_SJW_1: u32 = 33554432;
pub const CAN_BTR_LBKM_Pos: u32 = 30;
pub const CAN_BTR_LBKM_Msk: u32 = 1073741824;
pub const CAN_BTR_LBKM: u32 = 1073741824;
pub const CAN_BTR_SILM_Pos: u32 = 31;
pub const CAN_BTR_SILM_Msk: u32 = 2147483648;
pub const CAN_BTR_SILM: u32 = 2147483648;
pub const CAN_TI0R_TXRQ_Pos: u32 = 0;
pub const CAN_TI0R_TXRQ_Msk: u32 = 1;
pub const CAN_TI0R_TXRQ: u32 = 1;
pub const CAN_TI0R_RTR_Pos: u32 = 1;
pub const CAN_TI0R_RTR_Msk: u32 = 2;
pub const CAN_TI0R_RTR: u32 = 2;
pub const CAN_TI0R_IDE_Pos: u32 = 2;
pub const CAN_TI0R_IDE_Msk: u32 = 4;
pub const CAN_TI0R_IDE: u32 = 4;
pub const CAN_TI0R_EXID_Pos: u32 = 3;
pub const CAN_TI0R_EXID_Msk: u32 = 2097144;
pub const CAN_TI0R_EXID: u32 = 2097144;
pub const CAN_TI0R_STID_Pos: u32 = 21;
pub const CAN_TI0R_STID_Msk: u32 = 4292870144;
pub const CAN_TI0R_STID: u32 = 4292870144;
pub const CAN_TDT0R_DLC_Pos: u32 = 0;
pub const CAN_TDT0R_DLC_Msk: u32 = 15;
pub const CAN_TDT0R_DLC: u32 = 15;
pub const CAN_TDT0R_TGT_Pos: u32 = 8;
pub const CAN_TDT0R_TGT_Msk: u32 = 256;
pub const CAN_TDT0R_TGT: u32 = 256;
pub const CAN_TDT0R_TIME_Pos: u32 = 16;
pub const CAN_TDT0R_TIME_Msk: u32 = 4294901760;
pub const CAN_TDT0R_TIME: u32 = 4294901760;
pub const CAN_TDL0R_DATA0_Pos: u32 = 0;
pub const CAN_TDL0R_DATA0_Msk: u32 = 255;
pub const CAN_TDL0R_DATA0: u32 = 255;
pub const CAN_TDL0R_DATA1_Pos: u32 = 8;
pub const CAN_TDL0R_DATA1_Msk: u32 = 65280;
pub const CAN_TDL0R_DATA1: u32 = 65280;
pub const CAN_TDL0R_DATA2_Pos: u32 = 16;
pub const CAN_TDL0R_DATA2_Msk: u32 = 16711680;
pub const CAN_TDL0R_DATA2: u32 = 16711680;
pub const CAN_TDL0R_DATA3_Pos: u32 = 24;
pub const CAN_TDL0R_DATA3_Msk: u32 = 4278190080;
pub const CAN_TDL0R_DATA3: u32 = 4278190080;
pub const CAN_TDH0R_DATA4_Pos: u32 = 0;
pub const CAN_TDH0R_DATA4_Msk: u32 = 255;
pub const CAN_TDH0R_DATA4: u32 = 255;
pub const CAN_TDH0R_DATA5_Pos: u32 = 8;
pub const CAN_TDH0R_DATA5_Msk: u32 = 65280;
pub const CAN_TDH0R_DATA5: u32 = 65280;
pub const CAN_TDH0R_DATA6_Pos: u32 = 16;
pub const CAN_TDH0R_DATA6_Msk: u32 = 16711680;
pub const CAN_TDH0R_DATA6: u32 = 16711680;
pub const CAN_TDH0R_DATA7_Pos: u32 = 24;
pub const CAN_TDH0R_DATA7_Msk: u32 = 4278190080;
pub const CAN_TDH0R_DATA7: u32 = 4278190080;
pub const CAN_TI1R_TXRQ_Pos: u32 = 0;
pub const CAN_TI1R_TXRQ_Msk: u32 = 1;
pub const CAN_TI1R_TXRQ: u32 = 1;
pub const CAN_TI1R_RTR_Pos: u32 = 1;
pub const CAN_TI1R_RTR_Msk: u32 = 2;
pub const CAN_TI1R_RTR: u32 = 2;
pub const CAN_TI1R_IDE_Pos: u32 = 2;
pub const CAN_TI1R_IDE_Msk: u32 = 4;
pub const CAN_TI1R_IDE: u32 = 4;
pub const CAN_TI1R_EXID_Pos: u32 = 3;
pub const CAN_TI1R_EXID_Msk: u32 = 2097144;
pub const CAN_TI1R_EXID: u32 = 2097144;
pub const CAN_TI1R_STID_Pos: u32 = 21;
pub const CAN_TI1R_STID_Msk: u32 = 4292870144;
pub const CAN_TI1R_STID: u32 = 4292870144;
pub const CAN_TDT1R_DLC_Pos: u32 = 0;
pub const CAN_TDT1R_DLC_Msk: u32 = 15;
pub const CAN_TDT1R_DLC: u32 = 15;
pub const CAN_TDT1R_TGT_Pos: u32 = 8;
pub const CAN_TDT1R_TGT_Msk: u32 = 256;
pub const CAN_TDT1R_TGT: u32 = 256;
pub const CAN_TDT1R_TIME_Pos: u32 = 16;
pub const CAN_TDT1R_TIME_Msk: u32 = 4294901760;
pub const CAN_TDT1R_TIME: u32 = 4294901760;
pub const CAN_TDL1R_DATA0_Pos: u32 = 0;
pub const CAN_TDL1R_DATA0_Msk: u32 = 255;
pub const CAN_TDL1R_DATA0: u32 = 255;
pub const CAN_TDL1R_DATA1_Pos: u32 = 8;
pub const CAN_TDL1R_DATA1_Msk: u32 = 65280;
pub const CAN_TDL1R_DATA1: u32 = 65280;
pub const CAN_TDL1R_DATA2_Pos: u32 = 16;
pub const CAN_TDL1R_DATA2_Msk: u32 = 16711680;
pub const CAN_TDL1R_DATA2: u32 = 16711680;
pub const CAN_TDL1R_DATA3_Pos: u32 = 24;
pub const CAN_TDL1R_DATA3_Msk: u32 = 4278190080;
pub const CAN_TDL1R_DATA3: u32 = 4278190080;
pub const CAN_TDH1R_DATA4_Pos: u32 = 0;
pub const CAN_TDH1R_DATA4_Msk: u32 = 255;
pub const CAN_TDH1R_DATA4: u32 = 255;
pub const CAN_TDH1R_DATA5_Pos: u32 = 8;
pub const CAN_TDH1R_DATA5_Msk: u32 = 65280;
pub const CAN_TDH1R_DATA5: u32 = 65280;
pub const CAN_TDH1R_DATA6_Pos: u32 = 16;
pub const CAN_TDH1R_DATA6_Msk: u32 = 16711680;
pub const CAN_TDH1R_DATA6: u32 = 16711680;
pub const CAN_TDH1R_DATA7_Pos: u32 = 24;
pub const CAN_TDH1R_DATA7_Msk: u32 = 4278190080;
pub const CAN_TDH1R_DATA7: u32 = 4278190080;
pub const CAN_TI2R_TXRQ_Pos: u32 = 0;
pub const CAN_TI2R_TXRQ_Msk: u32 = 1;
pub const CAN_TI2R_TXRQ: u32 = 1;
pub const CAN_TI2R_RTR_Pos: u32 = 1;
pub const CAN_TI2R_RTR_Msk: u32 = 2;
pub const CAN_TI2R_RTR: u32 = 2;
pub const CAN_TI2R_IDE_Pos: u32 = 2;
pub const CAN_TI2R_IDE_Msk: u32 = 4;
pub const CAN_TI2R_IDE: u32 = 4;
pub const CAN_TI2R_EXID_Pos: u32 = 3;
pub const CAN_TI2R_EXID_Msk: u32 = 2097144;
pub const CAN_TI2R_EXID: u32 = 2097144;
pub const CAN_TI2R_STID_Pos: u32 = 21;
pub const CAN_TI2R_STID_Msk: u32 = 4292870144;
pub const CAN_TI2R_STID: u32 = 4292870144;
pub const CAN_TDT2R_DLC_Pos: u32 = 0;
pub const CAN_TDT2R_DLC_Msk: u32 = 15;
pub const CAN_TDT2R_DLC: u32 = 15;
pub const CAN_TDT2R_TGT_Pos: u32 = 8;
pub const CAN_TDT2R_TGT_Msk: u32 = 256;
pub const CAN_TDT2R_TGT: u32 = 256;
pub const CAN_TDT2R_TIME_Pos: u32 = 16;
pub const CAN_TDT2R_TIME_Msk: u32 = 4294901760;
pub const CAN_TDT2R_TIME: u32 = 4294901760;
pub const CAN_TDL2R_DATA0_Pos: u32 = 0;
pub const CAN_TDL2R_DATA0_Msk: u32 = 255;
pub const CAN_TDL2R_DATA0: u32 = 255;
pub const CAN_TDL2R_DATA1_Pos: u32 = 8;
pub const CAN_TDL2R_DATA1_Msk: u32 = 65280;
pub const CAN_TDL2R_DATA1: u32 = 65280;
pub const CAN_TDL2R_DATA2_Pos: u32 = 16;
pub const CAN_TDL2R_DATA2_Msk: u32 = 16711680;
pub const CAN_TDL2R_DATA2: u32 = 16711680;
pub const CAN_TDL2R_DATA3_Pos: u32 = 24;
pub const CAN_TDL2R_DATA3_Msk: u32 = 4278190080;
pub const CAN_TDL2R_DATA3: u32 = 4278190080;
pub const CAN_TDH2R_DATA4_Pos: u32 = 0;
pub const CAN_TDH2R_DATA4_Msk: u32 = 255;
pub const CAN_TDH2R_DATA4: u32 = 255;
pub const CAN_TDH2R_DATA5_Pos: u32 = 8;
pub const CAN_TDH2R_DATA5_Msk: u32 = 65280;
pub const CAN_TDH2R_DATA5: u32 = 65280;
pub const CAN_TDH2R_DATA6_Pos: u32 = 16;
pub const CAN_TDH2R_DATA6_Msk: u32 = 16711680;
pub const CAN_TDH2R_DATA6: u32 = 16711680;
pub const CAN_TDH2R_DATA7_Pos: u32 = 24;
pub const CAN_TDH2R_DATA7_Msk: u32 = 4278190080;
pub const CAN_TDH2R_DATA7: u32 = 4278190080;
pub const CAN_RI0R_RTR_Pos: u32 = 1;
pub const CAN_RI0R_RTR_Msk: u32 = 2;
pub const CAN_RI0R_RTR: u32 = 2;
pub const CAN_RI0R_IDE_Pos: u32 = 2;
pub const CAN_RI0R_IDE_Msk: u32 = 4;
pub const CAN_RI0R_IDE: u32 = 4;
pub const CAN_RI0R_EXID_Pos: u32 = 3;
pub const CAN_RI0R_EXID_Msk: u32 = 2097144;
pub const CAN_RI0R_EXID: u32 = 2097144;
pub const CAN_RI0R_STID_Pos: u32 = 21;
pub const CAN_RI0R_STID_Msk: u32 = 4292870144;
pub const CAN_RI0R_STID: u32 = 4292870144;
pub const CAN_RDT0R_DLC_Pos: u32 = 0;
pub const CAN_RDT0R_DLC_Msk: u32 = 15;
pub const CAN_RDT0R_DLC: u32 = 15;
pub const CAN_RDT0R_FMI_Pos: u32 = 8;
pub const CAN_RDT0R_FMI_Msk: u32 = 65280;
pub const CAN_RDT0R_FMI: u32 = 65280;
pub const CAN_RDT0R_TIME_Pos: u32 = 16;
pub const CAN_RDT0R_TIME_Msk: u32 = 4294901760;
pub const CAN_RDT0R_TIME: u32 = 4294901760;
pub const CAN_RDL0R_DATA0_Pos: u32 = 0;
pub const CAN_RDL0R_DATA0_Msk: u32 = 255;
pub const CAN_RDL0R_DATA0: u32 = 255;
pub const CAN_RDL0R_DATA1_Pos: u32 = 8;
pub const CAN_RDL0R_DATA1_Msk: u32 = 65280;
pub const CAN_RDL0R_DATA1: u32 = 65280;
pub const CAN_RDL0R_DATA2_Pos: u32 = 16;
pub const CAN_RDL0R_DATA2_Msk: u32 = 16711680;
pub const CAN_RDL0R_DATA2: u32 = 16711680;
pub const CAN_RDL0R_DATA3_Pos: u32 = 24;
pub const CAN_RDL0R_DATA3_Msk: u32 = 4278190080;
pub const CAN_RDL0R_DATA3: u32 = 4278190080;
pub const CAN_RDH0R_DATA4_Pos: u32 = 0;
pub const CAN_RDH0R_DATA4_Msk: u32 = 255;
pub const CAN_RDH0R_DATA4: u32 = 255;
pub const CAN_RDH0R_DATA5_Pos: u32 = 8;
pub const CAN_RDH0R_DATA5_Msk: u32 = 65280;
pub const CAN_RDH0R_DATA5: u32 = 65280;
pub const CAN_RDH0R_DATA6_Pos: u32 = 16;
pub const CAN_RDH0R_DATA6_Msk: u32 = 16711680;
pub const CAN_RDH0R_DATA6: u32 = 16711680;
pub const CAN_RDH0R_DATA7_Pos: u32 = 24;
pub const CAN_RDH0R_DATA7_Msk: u32 = 4278190080;
pub const CAN_RDH0R_DATA7: u32 = 4278190080;
pub const CAN_RI1R_RTR_Pos: u32 = 1;
pub const CAN_RI1R_RTR_Msk: u32 = 2;
pub const CAN_RI1R_RTR: u32 = 2;
pub const CAN_RI1R_IDE_Pos: u32 = 2;
pub const CAN_RI1R_IDE_Msk: u32 = 4;
pub const CAN_RI1R_IDE: u32 = 4;
pub const CAN_RI1R_EXID_Pos: u32 = 3;
pub const CAN_RI1R_EXID_Msk: u32 = 2097144;
pub const CAN_RI1R_EXID: u32 = 2097144;
pub const CAN_RI1R_STID_Pos: u32 = 21;
pub const CAN_RI1R_STID_Msk: u32 = 4292870144;
pub const CAN_RI1R_STID: u32 = 4292870144;
pub const CAN_RDT1R_DLC_Pos: u32 = 0;
pub const CAN_RDT1R_DLC_Msk: u32 = 15;
pub const CAN_RDT1R_DLC: u32 = 15;
pub const CAN_RDT1R_FMI_Pos: u32 = 8;
pub const CAN_RDT1R_FMI_Msk: u32 = 65280;
pub const CAN_RDT1R_FMI: u32 = 65280;
pub const CAN_RDT1R_TIME_Pos: u32 = 16;
pub const CAN_RDT1R_TIME_Msk: u32 = 4294901760;
pub const CAN_RDT1R_TIME: u32 = 4294901760;
pub const CAN_RDL1R_DATA0_Pos: u32 = 0;
pub const CAN_RDL1R_DATA0_Msk: u32 = 255;
pub const CAN_RDL1R_DATA0: u32 = 255;
pub const CAN_RDL1R_DATA1_Pos: u32 = 8;
pub const CAN_RDL1R_DATA1_Msk: u32 = 65280;
pub const CAN_RDL1R_DATA1: u32 = 65280;
pub const CAN_RDL1R_DATA2_Pos: u32 = 16;
pub const CAN_RDL1R_DATA2_Msk: u32 = 16711680;
pub const CAN_RDL1R_DATA2: u32 = 16711680;
pub const CAN_RDL1R_DATA3_Pos: u32 = 24;
pub const CAN_RDL1R_DATA3_Msk: u32 = 4278190080;
pub const CAN_RDL1R_DATA3: u32 = 4278190080;
pub const CAN_RDH1R_DATA4_Pos: u32 = 0;
pub const CAN_RDH1R_DATA4_Msk: u32 = 255;
pub const CAN_RDH1R_DATA4: u32 = 255;
pub const CAN_RDH1R_DATA5_Pos: u32 = 8;
pub const CAN_RDH1R_DATA5_Msk: u32 = 65280;
pub const CAN_RDH1R_DATA5: u32 = 65280;
pub const CAN_RDH1R_DATA6_Pos: u32 = 16;
pub const CAN_RDH1R_DATA6_Msk: u32 = 16711680;
pub const CAN_RDH1R_DATA6: u32 = 16711680;
pub const CAN_RDH1R_DATA7_Pos: u32 = 24;
pub const CAN_RDH1R_DATA7_Msk: u32 = 4278190080;
pub const CAN_RDH1R_DATA7: u32 = 4278190080;
pub const CAN_FMR_FINIT_Pos: u32 = 0;
pub const CAN_FMR_FINIT_Msk: u32 = 1;
pub const CAN_FMR_FINIT: u32 = 1;
pub const CAN_FM1R_FBM_Pos: u32 = 0;
pub const CAN_FM1R_FBM_Msk: u32 = 16383;
pub const CAN_FM1R_FBM: u32 = 16383;
pub const CAN_FM1R_FBM0_Pos: u32 = 0;
pub const CAN_FM1R_FBM0_Msk: u32 = 1;
pub const CAN_FM1R_FBM0: u32 = 1;
pub const CAN_FM1R_FBM1_Pos: u32 = 1;
pub const CAN_FM1R_FBM1_Msk: u32 = 2;
pub const CAN_FM1R_FBM1: u32 = 2;
pub const CAN_FM1R_FBM2_Pos: u32 = 2;
pub const CAN_FM1R_FBM2_Msk: u32 = 4;
pub const CAN_FM1R_FBM2: u32 = 4;
pub const CAN_FM1R_FBM3_Pos: u32 = 3;
pub const CAN_FM1R_FBM3_Msk: u32 = 8;
pub const CAN_FM1R_FBM3: u32 = 8;
pub const CAN_FM1R_FBM4_Pos: u32 = 4;
pub const CAN_FM1R_FBM4_Msk: u32 = 16;
pub const CAN_FM1R_FBM4: u32 = 16;
pub const CAN_FM1R_FBM5_Pos: u32 = 5;
pub const CAN_FM1R_FBM5_Msk: u32 = 32;
pub const CAN_FM1R_FBM5: u32 = 32;
pub const CAN_FM1R_FBM6_Pos: u32 = 6;
pub const CAN_FM1R_FBM6_Msk: u32 = 64;
pub const CAN_FM1R_FBM6: u32 = 64;
pub const CAN_FM1R_FBM7_Pos: u32 = 7;
pub const CAN_FM1R_FBM7_Msk: u32 = 128;
pub const CAN_FM1R_FBM7: u32 = 128;
pub const CAN_FM1R_FBM8_Pos: u32 = 8;
pub const CAN_FM1R_FBM8_Msk: u32 = 256;
pub const CAN_FM1R_FBM8: u32 = 256;
pub const CAN_FM1R_FBM9_Pos: u32 = 9;
pub const CAN_FM1R_FBM9_Msk: u32 = 512;
pub const CAN_FM1R_FBM9: u32 = 512;
pub const CAN_FM1R_FBM10_Pos: u32 = 10;
pub const CAN_FM1R_FBM10_Msk: u32 = 1024;
pub const CAN_FM1R_FBM10: u32 = 1024;
pub const CAN_FM1R_FBM11_Pos: u32 = 11;
pub const CAN_FM1R_FBM11_Msk: u32 = 2048;
pub const CAN_FM1R_FBM11: u32 = 2048;
pub const CAN_FM1R_FBM12_Pos: u32 = 12;
pub const CAN_FM1R_FBM12_Msk: u32 = 4096;
pub const CAN_FM1R_FBM12: u32 = 4096;
pub const CAN_FM1R_FBM13_Pos: u32 = 13;
pub const CAN_FM1R_FBM13_Msk: u32 = 8192;
pub const CAN_FM1R_FBM13: u32 = 8192;
pub const CAN_FS1R_FSC_Pos: u32 = 0;
pub const CAN_FS1R_FSC_Msk: u32 = 16383;
pub const CAN_FS1R_FSC: u32 = 16383;
pub const CAN_FS1R_FSC0_Pos: u32 = 0;
pub const CAN_FS1R_FSC0_Msk: u32 = 1;
pub const CAN_FS1R_FSC0: u32 = 1;
pub const CAN_FS1R_FSC1_Pos: u32 = 1;
pub const CAN_FS1R_FSC1_Msk: u32 = 2;
pub const CAN_FS1R_FSC1: u32 = 2;
pub const CAN_FS1R_FSC2_Pos: u32 = 2;
pub const CAN_FS1R_FSC2_Msk: u32 = 4;
pub const CAN_FS1R_FSC2: u32 = 4;
pub const CAN_FS1R_FSC3_Pos: u32 = 3;
pub const CAN_FS1R_FSC3_Msk: u32 = 8;
pub const CAN_FS1R_FSC3: u32 = 8;
pub const CAN_FS1R_FSC4_Pos: u32 = 4;
pub const CAN_FS1R_FSC4_Msk: u32 = 16;
pub const CAN_FS1R_FSC4: u32 = 16;
pub const CAN_FS1R_FSC5_Pos: u32 = 5;
pub const CAN_FS1R_FSC5_Msk: u32 = 32;
pub const CAN_FS1R_FSC5: u32 = 32;
pub const CAN_FS1R_FSC6_Pos: u32 = 6;
pub const CAN_FS1R_FSC6_Msk: u32 = 64;
pub const CAN_FS1R_FSC6: u32 = 64;
pub const CAN_FS1R_FSC7_Pos: u32 = 7;
pub const CAN_FS1R_FSC7_Msk: u32 = 128;
pub const CAN_FS1R_FSC7: u32 = 128;
pub const CAN_FS1R_FSC8_Pos: u32 = 8;
pub const CAN_FS1R_FSC8_Msk: u32 = 256;
pub const CAN_FS1R_FSC8: u32 = 256;
pub const CAN_FS1R_FSC9_Pos: u32 = 9;
pub const CAN_FS1R_FSC9_Msk: u32 = 512;
pub const CAN_FS1R_FSC9: u32 = 512;
pub const CAN_FS1R_FSC10_Pos: u32 = 10;
pub const CAN_FS1R_FSC10_Msk: u32 = 1024;
pub const CAN_FS1R_FSC10: u32 = 1024;
pub const CAN_FS1R_FSC11_Pos: u32 = 11;
pub const CAN_FS1R_FSC11_Msk: u32 = 2048;
pub const CAN_FS1R_FSC11: u32 = 2048;
pub const CAN_FS1R_FSC12_Pos: u32 = 12;
pub const CAN_FS1R_FSC12_Msk: u32 = 4096;
pub const CAN_FS1R_FSC12: u32 = 4096;
pub const CAN_FS1R_FSC13_Pos: u32 = 13;
pub const CAN_FS1R_FSC13_Msk: u32 = 8192;
pub const CAN_FS1R_FSC13: u32 = 8192;
pub const CAN_FFA1R_FFA_Pos: u32 = 0;
pub const CAN_FFA1R_FFA_Msk: u32 = 16383;
pub const CAN_FFA1R_FFA: u32 = 16383;
pub const CAN_FFA1R_FFA0_Pos: u32 = 0;
pub const CAN_FFA1R_FFA0_Msk: u32 = 1;
pub const CAN_FFA1R_FFA0: u32 = 1;
pub const CAN_FFA1R_FFA1_Pos: u32 = 1;
pub const CAN_FFA1R_FFA1_Msk: u32 = 2;
pub const CAN_FFA1R_FFA1: u32 = 2;
pub const CAN_FFA1R_FFA2_Pos: u32 = 2;
pub const CAN_FFA1R_FFA2_Msk: u32 = 4;
pub const CAN_FFA1R_FFA2: u32 = 4;
pub const CAN_FFA1R_FFA3_Pos: u32 = 3;
pub const CAN_FFA1R_FFA3_Msk: u32 = 8;
pub const CAN_FFA1R_FFA3: u32 = 8;
pub const CAN_FFA1R_FFA4_Pos: u32 = 4;
pub const CAN_FFA1R_FFA4_Msk: u32 = 16;
pub const CAN_FFA1R_FFA4: u32 = 16;
pub const CAN_FFA1R_FFA5_Pos: u32 = 5;
pub const CAN_FFA1R_FFA5_Msk: u32 = 32;
pub const CAN_FFA1R_FFA5: u32 = 32;
pub const CAN_FFA1R_FFA6_Pos: u32 = 6;
pub const CAN_FFA1R_FFA6_Msk: u32 = 64;
pub const CAN_FFA1R_FFA6: u32 = 64;
pub const CAN_FFA1R_FFA7_Pos: u32 = 7;
pub const CAN_FFA1R_FFA7_Msk: u32 = 128;
pub const CAN_FFA1R_FFA7: u32 = 128;
pub const CAN_FFA1R_FFA8_Pos: u32 = 8;
pub const CAN_FFA1R_FFA8_Msk: u32 = 256;
pub const CAN_FFA1R_FFA8: u32 = 256;
pub const CAN_FFA1R_FFA9_Pos: u32 = 9;
pub const CAN_FFA1R_FFA9_Msk: u32 = 512;
pub const CAN_FFA1R_FFA9: u32 = 512;
pub const CAN_FFA1R_FFA10_Pos: u32 = 10;
pub const CAN_FFA1R_FFA10_Msk: u32 = 1024;
pub const CAN_FFA1R_FFA10: u32 = 1024;
pub const CAN_FFA1R_FFA11_Pos: u32 = 11;
pub const CAN_FFA1R_FFA11_Msk: u32 = 2048;
pub const CAN_FFA1R_FFA11: u32 = 2048;
pub const CAN_FFA1R_FFA12_Pos: u32 = 12;
pub const CAN_FFA1R_FFA12_Msk: u32 = 4096;
pub const CAN_FFA1R_FFA12: u32 = 4096;
pub const CAN_FFA1R_FFA13_Pos: u32 = 13;
pub const CAN_FFA1R_FFA13_Msk: u32 = 8192;
pub const CAN_FFA1R_FFA13: u32 = 8192;
pub const CAN_FA1R_FACT_Pos: u32 = 0;
pub const CAN_FA1R_FACT_Msk: u32 = 16383;
pub const CAN_FA1R_FACT: u32 = 16383;
pub const CAN_FA1R_FACT0_Pos: u32 = 0;
pub const CAN_FA1R_FACT0_Msk: u32 = 1;
pub const CAN_FA1R_FACT0: u32 = 1;
pub const CAN_FA1R_FACT1_Pos: u32 = 1;
pub const CAN_FA1R_FACT1_Msk: u32 = 2;
pub const CAN_FA1R_FACT1: u32 = 2;
pub const CAN_FA1R_FACT2_Pos: u32 = 2;
pub const CAN_FA1R_FACT2_Msk: u32 = 4;
pub const CAN_FA1R_FACT2: u32 = 4;
pub const CAN_FA1R_FACT3_Pos: u32 = 3;
pub const CAN_FA1R_FACT3_Msk: u32 = 8;
pub const CAN_FA1R_FACT3: u32 = 8;
pub const CAN_FA1R_FACT4_Pos: u32 = 4;
pub const CAN_FA1R_FACT4_Msk: u32 = 16;
pub const CAN_FA1R_FACT4: u32 = 16;
pub const CAN_FA1R_FACT5_Pos: u32 = 5;
pub const CAN_FA1R_FACT5_Msk: u32 = 32;
pub const CAN_FA1R_FACT5: u32 = 32;
pub const CAN_FA1R_FACT6_Pos: u32 = 6;
pub const CAN_FA1R_FACT6_Msk: u32 = 64;
pub const CAN_FA1R_FACT6: u32 = 64;
pub const CAN_FA1R_FACT7_Pos: u32 = 7;
pub const CAN_FA1R_FACT7_Msk: u32 = 128;
pub const CAN_FA1R_FACT7: u32 = 128;
pub const CAN_FA1R_FACT8_Pos: u32 = 8;
pub const CAN_FA1R_FACT8_Msk: u32 = 256;
pub const CAN_FA1R_FACT8: u32 = 256;
pub const CAN_FA1R_FACT9_Pos: u32 = 9;
pub const CAN_FA1R_FACT9_Msk: u32 = 512;
pub const CAN_FA1R_FACT9: u32 = 512;
pub const CAN_FA1R_FACT10_Pos: u32 = 10;
pub const CAN_FA1R_FACT10_Msk: u32 = 1024;
pub const CAN_FA1R_FACT10: u32 = 1024;
pub const CAN_FA1R_FACT11_Pos: u32 = 11;
pub const CAN_FA1R_FACT11_Msk: u32 = 2048;
pub const CAN_FA1R_FACT11: u32 = 2048;
pub const CAN_FA1R_FACT12_Pos: u32 = 12;
pub const CAN_FA1R_FACT12_Msk: u32 = 4096;
pub const CAN_FA1R_FACT12: u32 = 4096;
pub const CAN_FA1R_FACT13_Pos: u32 = 13;
pub const CAN_FA1R_FACT13_Msk: u32 = 8192;
pub const CAN_FA1R_FACT13: u32 = 8192;
pub const CAN_F0R1_FB0_Pos: u32 = 0;
pub const CAN_F0R1_FB0_Msk: u32 = 1;
pub const CAN_F0R1_FB0: u32 = 1;
pub const CAN_F0R1_FB1_Pos: u32 = 1;
pub const CAN_F0R1_FB1_Msk: u32 = 2;
pub const CAN_F0R1_FB1: u32 = 2;
pub const CAN_F0R1_FB2_Pos: u32 = 2;
pub const CAN_F0R1_FB2_Msk: u32 = 4;
pub const CAN_F0R1_FB2: u32 = 4;
pub const CAN_F0R1_FB3_Pos: u32 = 3;
pub const CAN_F0R1_FB3_Msk: u32 = 8;
pub const CAN_F0R1_FB3: u32 = 8;
pub const CAN_F0R1_FB4_Pos: u32 = 4;
pub const CAN_F0R1_FB4_Msk: u32 = 16;
pub const CAN_F0R1_FB4: u32 = 16;
pub const CAN_F0R1_FB5_Pos: u32 = 5;
pub const CAN_F0R1_FB5_Msk: u32 = 32;
pub const CAN_F0R1_FB5: u32 = 32;
pub const CAN_F0R1_FB6_Pos: u32 = 6;
pub const CAN_F0R1_FB6_Msk: u32 = 64;
pub const CAN_F0R1_FB6: u32 = 64;
pub const CAN_F0R1_FB7_Pos: u32 = 7;
pub const CAN_F0R1_FB7_Msk: u32 = 128;
pub const CAN_F0R1_FB7: u32 = 128;
pub const CAN_F0R1_FB8_Pos: u32 = 8;
pub const CAN_F0R1_FB8_Msk: u32 = 256;
pub const CAN_F0R1_FB8: u32 = 256;
pub const CAN_F0R1_FB9_Pos: u32 = 9;
pub const CAN_F0R1_FB9_Msk: u32 = 512;
pub const CAN_F0R1_FB9: u32 = 512;
pub const CAN_F0R1_FB10_Pos: u32 = 10;
pub const CAN_F0R1_FB10_Msk: u32 = 1024;
pub const CAN_F0R1_FB10: u32 = 1024;
pub const CAN_F0R1_FB11_Pos: u32 = 11;
pub const CAN_F0R1_FB11_Msk: u32 = 2048;
pub const CAN_F0R1_FB11: u32 = 2048;
pub const CAN_F0R1_FB12_Pos: u32 = 12;
pub const CAN_F0R1_FB12_Msk: u32 = 4096;
pub const CAN_F0R1_FB12: u32 = 4096;
pub const CAN_F0R1_FB13_Pos: u32 = 13;
pub const CAN_F0R1_FB13_Msk: u32 = 8192;
pub const CAN_F0R1_FB13: u32 = 8192;
pub const CAN_F0R1_FB14_Pos: u32 = 14;
pub const CAN_F0R1_FB14_Msk: u32 = 16384;
pub const CAN_F0R1_FB14: u32 = 16384;
pub const CAN_F0R1_FB15_Pos: u32 = 15;
pub const CAN_F0R1_FB15_Msk: u32 = 32768;
pub const CAN_F0R1_FB15: u32 = 32768;
pub const CAN_F0R1_FB16_Pos: u32 = 16;
pub const CAN_F0R1_FB16_Msk: u32 = 65536;
pub const CAN_F0R1_FB16: u32 = 65536;
pub const CAN_F0R1_FB17_Pos: u32 = 17;
pub const CAN_F0R1_FB17_Msk: u32 = 131072;
pub const CAN_F0R1_FB17: u32 = 131072;
pub const CAN_F0R1_FB18_Pos: u32 = 18;
pub const CAN_F0R1_FB18_Msk: u32 = 262144;
pub const CAN_F0R1_FB18: u32 = 262144;
pub const CAN_F0R1_FB19_Pos: u32 = 19;
pub const CAN_F0R1_FB19_Msk: u32 = 524288;
pub const CAN_F0R1_FB19: u32 = 524288;
pub const CAN_F0R1_FB20_Pos: u32 = 20;
pub const CAN_F0R1_FB20_Msk: u32 = 1048576;
pub const CAN_F0R1_FB20: u32 = 1048576;
pub const CAN_F0R1_FB21_Pos: u32 = 21;
pub const CAN_F0R1_FB21_Msk: u32 = 2097152;
pub const CAN_F0R1_FB21: u32 = 2097152;
pub const CAN_F0R1_FB22_Pos: u32 = 22;
pub const CAN_F0R1_FB22_Msk: u32 = 4194304;
pub const CAN_F0R1_FB22: u32 = 4194304;
pub const CAN_F0R1_FB23_Pos: u32 = 23;
pub const CAN_F0R1_FB23_Msk: u32 = 8388608;
pub const CAN_F0R1_FB23: u32 = 8388608;
pub const CAN_F0R1_FB24_Pos: u32 = 24;
pub const CAN_F0R1_FB24_Msk: u32 = 16777216;
pub const CAN_F0R1_FB24: u32 = 16777216;
pub const CAN_F0R1_FB25_Pos: u32 = 25;
pub const CAN_F0R1_FB25_Msk: u32 = 33554432;
pub const CAN_F0R1_FB25: u32 = 33554432;
pub const CAN_F0R1_FB26_Pos: u32 = 26;
pub const CAN_F0R1_FB26_Msk: u32 = 67108864;
pub const CAN_F0R1_FB26: u32 = 67108864;
pub const CAN_F0R1_FB27_Pos: u32 = 27;
pub const CAN_F0R1_FB27_Msk: u32 = 134217728;
pub const CAN_F0R1_FB27: u32 = 134217728;
pub const CAN_F0R1_FB28_Pos: u32 = 28;
pub const CAN_F0R1_FB28_Msk: u32 = 268435456;
pub const CAN_F0R1_FB28: u32 = 268435456;
pub const CAN_F0R1_FB29_Pos: u32 = 29;
pub const CAN_F0R1_FB29_Msk: u32 = 536870912;
pub const CAN_F0R1_FB29: u32 = 536870912;
pub const CAN_F0R1_FB30_Pos: u32 = 30;
pub const CAN_F0R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F0R1_FB30: u32 = 1073741824;
pub const CAN_F0R1_FB31_Pos: u32 = 31;
pub const CAN_F0R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F0R1_FB31: u32 = 2147483648;
pub const CAN_F1R1_FB0_Pos: u32 = 0;
pub const CAN_F1R1_FB0_Msk: u32 = 1;
pub const CAN_F1R1_FB0: u32 = 1;
pub const CAN_F1R1_FB1_Pos: u32 = 1;
pub const CAN_F1R1_FB1_Msk: u32 = 2;
pub const CAN_F1R1_FB1: u32 = 2;
pub const CAN_F1R1_FB2_Pos: u32 = 2;
pub const CAN_F1R1_FB2_Msk: u32 = 4;
pub const CAN_F1R1_FB2: u32 = 4;
pub const CAN_F1R1_FB3_Pos: u32 = 3;
pub const CAN_F1R1_FB3_Msk: u32 = 8;
pub const CAN_F1R1_FB3: u32 = 8;
pub const CAN_F1R1_FB4_Pos: u32 = 4;
pub const CAN_F1R1_FB4_Msk: u32 = 16;
pub const CAN_F1R1_FB4: u32 = 16;
pub const CAN_F1R1_FB5_Pos: u32 = 5;
pub const CAN_F1R1_FB5_Msk: u32 = 32;
pub const CAN_F1R1_FB5: u32 = 32;
pub const CAN_F1R1_FB6_Pos: u32 = 6;
pub const CAN_F1R1_FB6_Msk: u32 = 64;
pub const CAN_F1R1_FB6: u32 = 64;
pub const CAN_F1R1_FB7_Pos: u32 = 7;
pub const CAN_F1R1_FB7_Msk: u32 = 128;
pub const CAN_F1R1_FB7: u32 = 128;
pub const CAN_F1R1_FB8_Pos: u32 = 8;
pub const CAN_F1R1_FB8_Msk: u32 = 256;
pub const CAN_F1R1_FB8: u32 = 256;
pub const CAN_F1R1_FB9_Pos: u32 = 9;
pub const CAN_F1R1_FB9_Msk: u32 = 512;
pub const CAN_F1R1_FB9: u32 = 512;
pub const CAN_F1R1_FB10_Pos: u32 = 10;
pub const CAN_F1R1_FB10_Msk: u32 = 1024;
pub const CAN_F1R1_FB10: u32 = 1024;
pub const CAN_F1R1_FB11_Pos: u32 = 11;
pub const CAN_F1R1_FB11_Msk: u32 = 2048;
pub const CAN_F1R1_FB11: u32 = 2048;
pub const CAN_F1R1_FB12_Pos: u32 = 12;
pub const CAN_F1R1_FB12_Msk: u32 = 4096;
pub const CAN_F1R1_FB12: u32 = 4096;
pub const CAN_F1R1_FB13_Pos: u32 = 13;
pub const CAN_F1R1_FB13_Msk: u32 = 8192;
pub const CAN_F1R1_FB13: u32 = 8192;
pub const CAN_F1R1_FB14_Pos: u32 = 14;
pub const CAN_F1R1_FB14_Msk: u32 = 16384;
pub const CAN_F1R1_FB14: u32 = 16384;
pub const CAN_F1R1_FB15_Pos: u32 = 15;
pub const CAN_F1R1_FB15_Msk: u32 = 32768;
pub const CAN_F1R1_FB15: u32 = 32768;
pub const CAN_F1R1_FB16_Pos: u32 = 16;
pub const CAN_F1R1_FB16_Msk: u32 = 65536;
pub const CAN_F1R1_FB16: u32 = 65536;
pub const CAN_F1R1_FB17_Pos: u32 = 17;
pub const CAN_F1R1_FB17_Msk: u32 = 131072;
pub const CAN_F1R1_FB17: u32 = 131072;
pub const CAN_F1R1_FB18_Pos: u32 = 18;
pub const CAN_F1R1_FB18_Msk: u32 = 262144;
pub const CAN_F1R1_FB18: u32 = 262144;
pub const CAN_F1R1_FB19_Pos: u32 = 19;
pub const CAN_F1R1_FB19_Msk: u32 = 524288;
pub const CAN_F1R1_FB19: u32 = 524288;
pub const CAN_F1R1_FB20_Pos: u32 = 20;
pub const CAN_F1R1_FB20_Msk: u32 = 1048576;
pub const CAN_F1R1_FB20: u32 = 1048576;
pub const CAN_F1R1_FB21_Pos: u32 = 21;
pub const CAN_F1R1_FB21_Msk: u32 = 2097152;
pub const CAN_F1R1_FB21: u32 = 2097152;
pub const CAN_F1R1_FB22_Pos: u32 = 22;
pub const CAN_F1R1_FB22_Msk: u32 = 4194304;
pub const CAN_F1R1_FB22: u32 = 4194304;
pub const CAN_F1R1_FB23_Pos: u32 = 23;
pub const CAN_F1R1_FB23_Msk: u32 = 8388608;
pub const CAN_F1R1_FB23: u32 = 8388608;
pub const CAN_F1R1_FB24_Pos: u32 = 24;
pub const CAN_F1R1_FB24_Msk: u32 = 16777216;
pub const CAN_F1R1_FB24: u32 = 16777216;
pub const CAN_F1R1_FB25_Pos: u32 = 25;
pub const CAN_F1R1_FB25_Msk: u32 = 33554432;
pub const CAN_F1R1_FB25: u32 = 33554432;
pub const CAN_F1R1_FB26_Pos: u32 = 26;
pub const CAN_F1R1_FB26_Msk: u32 = 67108864;
pub const CAN_F1R1_FB26: u32 = 67108864;
pub const CAN_F1R1_FB27_Pos: u32 = 27;
pub const CAN_F1R1_FB27_Msk: u32 = 134217728;
pub const CAN_F1R1_FB27: u32 = 134217728;
pub const CAN_F1R1_FB28_Pos: u32 = 28;
pub const CAN_F1R1_FB28_Msk: u32 = 268435456;
pub const CAN_F1R1_FB28: u32 = 268435456;
pub const CAN_F1R1_FB29_Pos: u32 = 29;
pub const CAN_F1R1_FB29_Msk: u32 = 536870912;
pub const CAN_F1R1_FB29: u32 = 536870912;
pub const CAN_F1R1_FB30_Pos: u32 = 30;
pub const CAN_F1R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F1R1_FB30: u32 = 1073741824;
pub const CAN_F1R1_FB31_Pos: u32 = 31;
pub const CAN_F1R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F1R1_FB31: u32 = 2147483648;
pub const CAN_F2R1_FB0_Pos: u32 = 0;
pub const CAN_F2R1_FB0_Msk: u32 = 1;
pub const CAN_F2R1_FB0: u32 = 1;
pub const CAN_F2R1_FB1_Pos: u32 = 1;
pub const CAN_F2R1_FB1_Msk: u32 = 2;
pub const CAN_F2R1_FB1: u32 = 2;
pub const CAN_F2R1_FB2_Pos: u32 = 2;
pub const CAN_F2R1_FB2_Msk: u32 = 4;
pub const CAN_F2R1_FB2: u32 = 4;
pub const CAN_F2R1_FB3_Pos: u32 = 3;
pub const CAN_F2R1_FB3_Msk: u32 = 8;
pub const CAN_F2R1_FB3: u32 = 8;
pub const CAN_F2R1_FB4_Pos: u32 = 4;
pub const CAN_F2R1_FB4_Msk: u32 = 16;
pub const CAN_F2R1_FB4: u32 = 16;
pub const CAN_F2R1_FB5_Pos: u32 = 5;
pub const CAN_F2R1_FB5_Msk: u32 = 32;
pub const CAN_F2R1_FB5: u32 = 32;
pub const CAN_F2R1_FB6_Pos: u32 = 6;
pub const CAN_F2R1_FB6_Msk: u32 = 64;
pub const CAN_F2R1_FB6: u32 = 64;
pub const CAN_F2R1_FB7_Pos: u32 = 7;
pub const CAN_F2R1_FB7_Msk: u32 = 128;
pub const CAN_F2R1_FB7: u32 = 128;
pub const CAN_F2R1_FB8_Pos: u32 = 8;
pub const CAN_F2R1_FB8_Msk: u32 = 256;
pub const CAN_F2R1_FB8: u32 = 256;
pub const CAN_F2R1_FB9_Pos: u32 = 9;
pub const CAN_F2R1_FB9_Msk: u32 = 512;
pub const CAN_F2R1_FB9: u32 = 512;
pub const CAN_F2R1_FB10_Pos: u32 = 10;
pub const CAN_F2R1_FB10_Msk: u32 = 1024;
pub const CAN_F2R1_FB10: u32 = 1024;
pub const CAN_F2R1_FB11_Pos: u32 = 11;
pub const CAN_F2R1_FB11_Msk: u32 = 2048;
pub const CAN_F2R1_FB11: u32 = 2048;
pub const CAN_F2R1_FB12_Pos: u32 = 12;
pub const CAN_F2R1_FB12_Msk: u32 = 4096;
pub const CAN_F2R1_FB12: u32 = 4096;
pub const CAN_F2R1_FB13_Pos: u32 = 13;
pub const CAN_F2R1_FB13_Msk: u32 = 8192;
pub const CAN_F2R1_FB13: u32 = 8192;
pub const CAN_F2R1_FB14_Pos: u32 = 14;
pub const CAN_F2R1_FB14_Msk: u32 = 16384;
pub const CAN_F2R1_FB14: u32 = 16384;
pub const CAN_F2R1_FB15_Pos: u32 = 15;
pub const CAN_F2R1_FB15_Msk: u32 = 32768;
pub const CAN_F2R1_FB15: u32 = 32768;
pub const CAN_F2R1_FB16_Pos: u32 = 16;
pub const CAN_F2R1_FB16_Msk: u32 = 65536;
pub const CAN_F2R1_FB16: u32 = 65536;
pub const CAN_F2R1_FB17_Pos: u32 = 17;
pub const CAN_F2R1_FB17_Msk: u32 = 131072;
pub const CAN_F2R1_FB17: u32 = 131072;
pub const CAN_F2R1_FB18_Pos: u32 = 18;
pub const CAN_F2R1_FB18_Msk: u32 = 262144;
pub const CAN_F2R1_FB18: u32 = 262144;
pub const CAN_F2R1_FB19_Pos: u32 = 19;
pub const CAN_F2R1_FB19_Msk: u32 = 524288;
pub const CAN_F2R1_FB19: u32 = 524288;
pub const CAN_F2R1_FB20_Pos: u32 = 20;
pub const CAN_F2R1_FB20_Msk: u32 = 1048576;
pub const CAN_F2R1_FB20: u32 = 1048576;
pub const CAN_F2R1_FB21_Pos: u32 = 21;
pub const CAN_F2R1_FB21_Msk: u32 = 2097152;
pub const CAN_F2R1_FB21: u32 = 2097152;
pub const CAN_F2R1_FB22_Pos: u32 = 22;
pub const CAN_F2R1_FB22_Msk: u32 = 4194304;
pub const CAN_F2R1_FB22: u32 = 4194304;
pub const CAN_F2R1_FB23_Pos: u32 = 23;
pub const CAN_F2R1_FB23_Msk: u32 = 8388608;
pub const CAN_F2R1_FB23: u32 = 8388608;
pub const CAN_F2R1_FB24_Pos: u32 = 24;
pub const CAN_F2R1_FB24_Msk: u32 = 16777216;
pub const CAN_F2R1_FB24: u32 = 16777216;
pub const CAN_F2R1_FB25_Pos: u32 = 25;
pub const CAN_F2R1_FB25_Msk: u32 = 33554432;
pub const CAN_F2R1_FB25: u32 = 33554432;
pub const CAN_F2R1_FB26_Pos: u32 = 26;
pub const CAN_F2R1_FB26_Msk: u32 = 67108864;
pub const CAN_F2R1_FB26: u32 = 67108864;
pub const CAN_F2R1_FB27_Pos: u32 = 27;
pub const CAN_F2R1_FB27_Msk: u32 = 134217728;
pub const CAN_F2R1_FB27: u32 = 134217728;
pub const CAN_F2R1_FB28_Pos: u32 = 28;
pub const CAN_F2R1_FB28_Msk: u32 = 268435456;
pub const CAN_F2R1_FB28: u32 = 268435456;
pub const CAN_F2R1_FB29_Pos: u32 = 29;
pub const CAN_F2R1_FB29_Msk: u32 = 536870912;
pub const CAN_F2R1_FB29: u32 = 536870912;
pub const CAN_F2R1_FB30_Pos: u32 = 30;
pub const CAN_F2R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F2R1_FB30: u32 = 1073741824;
pub const CAN_F2R1_FB31_Pos: u32 = 31;
pub const CAN_F2R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F2R1_FB31: u32 = 2147483648;
pub const CAN_F3R1_FB0_Pos: u32 = 0;
pub const CAN_F3R1_FB0_Msk: u32 = 1;
pub const CAN_F3R1_FB0: u32 = 1;
pub const CAN_F3R1_FB1_Pos: u32 = 1;
pub const CAN_F3R1_FB1_Msk: u32 = 2;
pub const CAN_F3R1_FB1: u32 = 2;
pub const CAN_F3R1_FB2_Pos: u32 = 2;
pub const CAN_F3R1_FB2_Msk: u32 = 4;
pub const CAN_F3R1_FB2: u32 = 4;
pub const CAN_F3R1_FB3_Pos: u32 = 3;
pub const CAN_F3R1_FB3_Msk: u32 = 8;
pub const CAN_F3R1_FB3: u32 = 8;
pub const CAN_F3R1_FB4_Pos: u32 = 4;
pub const CAN_F3R1_FB4_Msk: u32 = 16;
pub const CAN_F3R1_FB4: u32 = 16;
pub const CAN_F3R1_FB5_Pos: u32 = 5;
pub const CAN_F3R1_FB5_Msk: u32 = 32;
pub const CAN_F3R1_FB5: u32 = 32;
pub const CAN_F3R1_FB6_Pos: u32 = 6;
pub const CAN_F3R1_FB6_Msk: u32 = 64;
pub const CAN_F3R1_FB6: u32 = 64;
pub const CAN_F3R1_FB7_Pos: u32 = 7;
pub const CAN_F3R1_FB7_Msk: u32 = 128;
pub const CAN_F3R1_FB7: u32 = 128;
pub const CAN_F3R1_FB8_Pos: u32 = 8;
pub const CAN_F3R1_FB8_Msk: u32 = 256;
pub const CAN_F3R1_FB8: u32 = 256;
pub const CAN_F3R1_FB9_Pos: u32 = 9;
pub const CAN_F3R1_FB9_Msk: u32 = 512;
pub const CAN_F3R1_FB9: u32 = 512;
pub const CAN_F3R1_FB10_Pos: u32 = 10;
pub const CAN_F3R1_FB10_Msk: u32 = 1024;
pub const CAN_F3R1_FB10: u32 = 1024;
pub const CAN_F3R1_FB11_Pos: u32 = 11;
pub const CAN_F3R1_FB11_Msk: u32 = 2048;
pub const CAN_F3R1_FB11: u32 = 2048;
pub const CAN_F3R1_FB12_Pos: u32 = 12;
pub const CAN_F3R1_FB12_Msk: u32 = 4096;
pub const CAN_F3R1_FB12: u32 = 4096;
pub const CAN_F3R1_FB13_Pos: u32 = 13;
pub const CAN_F3R1_FB13_Msk: u32 = 8192;
pub const CAN_F3R1_FB13: u32 = 8192;
pub const CAN_F3R1_FB14_Pos: u32 = 14;
pub const CAN_F3R1_FB14_Msk: u32 = 16384;
pub const CAN_F3R1_FB14: u32 = 16384;
pub const CAN_F3R1_FB15_Pos: u32 = 15;
pub const CAN_F3R1_FB15_Msk: u32 = 32768;
pub const CAN_F3R1_FB15: u32 = 32768;
pub const CAN_F3R1_FB16_Pos: u32 = 16;
pub const CAN_F3R1_FB16_Msk: u32 = 65536;
pub const CAN_F3R1_FB16: u32 = 65536;
pub const CAN_F3R1_FB17_Pos: u32 = 17;
pub const CAN_F3R1_FB17_Msk: u32 = 131072;
pub const CAN_F3R1_FB17: u32 = 131072;
pub const CAN_F3R1_FB18_Pos: u32 = 18;
pub const CAN_F3R1_FB18_Msk: u32 = 262144;
pub const CAN_F3R1_FB18: u32 = 262144;
pub const CAN_F3R1_FB19_Pos: u32 = 19;
pub const CAN_F3R1_FB19_Msk: u32 = 524288;
pub const CAN_F3R1_FB19: u32 = 524288;
pub const CAN_F3R1_FB20_Pos: u32 = 20;
pub const CAN_F3R1_FB20_Msk: u32 = 1048576;
pub const CAN_F3R1_FB20: u32 = 1048576;
pub const CAN_F3R1_FB21_Pos: u32 = 21;
pub const CAN_F3R1_FB21_Msk: u32 = 2097152;
pub const CAN_F3R1_FB21: u32 = 2097152;
pub const CAN_F3R1_FB22_Pos: u32 = 22;
pub const CAN_F3R1_FB22_Msk: u32 = 4194304;
pub const CAN_F3R1_FB22: u32 = 4194304;
pub const CAN_F3R1_FB23_Pos: u32 = 23;
pub const CAN_F3R1_FB23_Msk: u32 = 8388608;
pub const CAN_F3R1_FB23: u32 = 8388608;
pub const CAN_F3R1_FB24_Pos: u32 = 24;
pub const CAN_F3R1_FB24_Msk: u32 = 16777216;
pub const CAN_F3R1_FB24: u32 = 16777216;
pub const CAN_F3R1_FB25_Pos: u32 = 25;
pub const CAN_F3R1_FB25_Msk: u32 = 33554432;
pub const CAN_F3R1_FB25: u32 = 33554432;
pub const CAN_F3R1_FB26_Pos: u32 = 26;
pub const CAN_F3R1_FB26_Msk: u32 = 67108864;
pub const CAN_F3R1_FB26: u32 = 67108864;
pub const CAN_F3R1_FB27_Pos: u32 = 27;
pub const CAN_F3R1_FB27_Msk: u32 = 134217728;
pub const CAN_F3R1_FB27: u32 = 134217728;
pub const CAN_F3R1_FB28_Pos: u32 = 28;
pub const CAN_F3R1_FB28_Msk: u32 = 268435456;
pub const CAN_F3R1_FB28: u32 = 268435456;
pub const CAN_F3R1_FB29_Pos: u32 = 29;
pub const CAN_F3R1_FB29_Msk: u32 = 536870912;
pub const CAN_F3R1_FB29: u32 = 536870912;
pub const CAN_F3R1_FB30_Pos: u32 = 30;
pub const CAN_F3R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F3R1_FB30: u32 = 1073741824;
pub const CAN_F3R1_FB31_Pos: u32 = 31;
pub const CAN_F3R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F3R1_FB31: u32 = 2147483648;
pub const CAN_F4R1_FB0_Pos: u32 = 0;
pub const CAN_F4R1_FB0_Msk: u32 = 1;
pub const CAN_F4R1_FB0: u32 = 1;
pub const CAN_F4R1_FB1_Pos: u32 = 1;
pub const CAN_F4R1_FB1_Msk: u32 = 2;
pub const CAN_F4R1_FB1: u32 = 2;
pub const CAN_F4R1_FB2_Pos: u32 = 2;
pub const CAN_F4R1_FB2_Msk: u32 = 4;
pub const CAN_F4R1_FB2: u32 = 4;
pub const CAN_F4R1_FB3_Pos: u32 = 3;
pub const CAN_F4R1_FB3_Msk: u32 = 8;
pub const CAN_F4R1_FB3: u32 = 8;
pub const CAN_F4R1_FB4_Pos: u32 = 4;
pub const CAN_F4R1_FB4_Msk: u32 = 16;
pub const CAN_F4R1_FB4: u32 = 16;
pub const CAN_F4R1_FB5_Pos: u32 = 5;
pub const CAN_F4R1_FB5_Msk: u32 = 32;
pub const CAN_F4R1_FB5: u32 = 32;
pub const CAN_F4R1_FB6_Pos: u32 = 6;
pub const CAN_F4R1_FB6_Msk: u32 = 64;
pub const CAN_F4R1_FB6: u32 = 64;
pub const CAN_F4R1_FB7_Pos: u32 = 7;
pub const CAN_F4R1_FB7_Msk: u32 = 128;
pub const CAN_F4R1_FB7: u32 = 128;
pub const CAN_F4R1_FB8_Pos: u32 = 8;
pub const CAN_F4R1_FB8_Msk: u32 = 256;
pub const CAN_F4R1_FB8: u32 = 256;
pub const CAN_F4R1_FB9_Pos: u32 = 9;
pub const CAN_F4R1_FB9_Msk: u32 = 512;
pub const CAN_F4R1_FB9: u32 = 512;
pub const CAN_F4R1_FB10_Pos: u32 = 10;
pub const CAN_F4R1_FB10_Msk: u32 = 1024;
pub const CAN_F4R1_FB10: u32 = 1024;
pub const CAN_F4R1_FB11_Pos: u32 = 11;
pub const CAN_F4R1_FB11_Msk: u32 = 2048;
pub const CAN_F4R1_FB11: u32 = 2048;
pub const CAN_F4R1_FB12_Pos: u32 = 12;
pub const CAN_F4R1_FB12_Msk: u32 = 4096;
pub const CAN_F4R1_FB12: u32 = 4096;
pub const CAN_F4R1_FB13_Pos: u32 = 13;
pub const CAN_F4R1_FB13_Msk: u32 = 8192;
pub const CAN_F4R1_FB13: u32 = 8192;
pub const CAN_F4R1_FB14_Pos: u32 = 14;
pub const CAN_F4R1_FB14_Msk: u32 = 16384;
pub const CAN_F4R1_FB14: u32 = 16384;
pub const CAN_F4R1_FB15_Pos: u32 = 15;
pub const CAN_F4R1_FB15_Msk: u32 = 32768;
pub const CAN_F4R1_FB15: u32 = 32768;
pub const CAN_F4R1_FB16_Pos: u32 = 16;
pub const CAN_F4R1_FB16_Msk: u32 = 65536;
pub const CAN_F4R1_FB16: u32 = 65536;
pub const CAN_F4R1_FB17_Pos: u32 = 17;
pub const CAN_F4R1_FB17_Msk: u32 = 131072;
pub const CAN_F4R1_FB17: u32 = 131072;
pub const CAN_F4R1_FB18_Pos: u32 = 18;
pub const CAN_F4R1_FB18_Msk: u32 = 262144;
pub const CAN_F4R1_FB18: u32 = 262144;
pub const CAN_F4R1_FB19_Pos: u32 = 19;
pub const CAN_F4R1_FB19_Msk: u32 = 524288;
pub const CAN_F4R1_FB19: u32 = 524288;
pub const CAN_F4R1_FB20_Pos: u32 = 20;
pub const CAN_F4R1_FB20_Msk: u32 = 1048576;
pub const CAN_F4R1_FB20: u32 = 1048576;
pub const CAN_F4R1_FB21_Pos: u32 = 21;
pub const CAN_F4R1_FB21_Msk: u32 = 2097152;
pub const CAN_F4R1_FB21: u32 = 2097152;
pub const CAN_F4R1_FB22_Pos: u32 = 22;
pub const CAN_F4R1_FB22_Msk: u32 = 4194304;
pub const CAN_F4R1_FB22: u32 = 4194304;
pub const CAN_F4R1_FB23_Pos: u32 = 23;
pub const CAN_F4R1_FB23_Msk: u32 = 8388608;
pub const CAN_F4R1_FB23: u32 = 8388608;
pub const CAN_F4R1_FB24_Pos: u32 = 24;
pub const CAN_F4R1_FB24_Msk: u32 = 16777216;
pub const CAN_F4R1_FB24: u32 = 16777216;
pub const CAN_F4R1_FB25_Pos: u32 = 25;
pub const CAN_F4R1_FB25_Msk: u32 = 33554432;
pub const CAN_F4R1_FB25: u32 = 33554432;
pub const CAN_F4R1_FB26_Pos: u32 = 26;
pub const CAN_F4R1_FB26_Msk: u32 = 67108864;
pub const CAN_F4R1_FB26: u32 = 67108864;
pub const CAN_F4R1_FB27_Pos: u32 = 27;
pub const CAN_F4R1_FB27_Msk: u32 = 134217728;
pub const CAN_F4R1_FB27: u32 = 134217728;
pub const CAN_F4R1_FB28_Pos: u32 = 28;
pub const CAN_F4R1_FB28_Msk: u32 = 268435456;
pub const CAN_F4R1_FB28: u32 = 268435456;
pub const CAN_F4R1_FB29_Pos: u32 = 29;
pub const CAN_F4R1_FB29_Msk: u32 = 536870912;
pub const CAN_F4R1_FB29: u32 = 536870912;
pub const CAN_F4R1_FB30_Pos: u32 = 30;
pub const CAN_F4R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F4R1_FB30: u32 = 1073741824;
pub const CAN_F4R1_FB31_Pos: u32 = 31;
pub const CAN_F4R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F4R1_FB31: u32 = 2147483648;
pub const CAN_F5R1_FB0_Pos: u32 = 0;
pub const CAN_F5R1_FB0_Msk: u32 = 1;
pub const CAN_F5R1_FB0: u32 = 1;
pub const CAN_F5R1_FB1_Pos: u32 = 1;
pub const CAN_F5R1_FB1_Msk: u32 = 2;
pub const CAN_F5R1_FB1: u32 = 2;
pub const CAN_F5R1_FB2_Pos: u32 = 2;
pub const CAN_F5R1_FB2_Msk: u32 = 4;
pub const CAN_F5R1_FB2: u32 = 4;
pub const CAN_F5R1_FB3_Pos: u32 = 3;
pub const CAN_F5R1_FB3_Msk: u32 = 8;
pub const CAN_F5R1_FB3: u32 = 8;
pub const CAN_F5R1_FB4_Pos: u32 = 4;
pub const CAN_F5R1_FB4_Msk: u32 = 16;
pub const CAN_F5R1_FB4: u32 = 16;
pub const CAN_F5R1_FB5_Pos: u32 = 5;
pub const CAN_F5R1_FB5_Msk: u32 = 32;
pub const CAN_F5R1_FB5: u32 = 32;
pub const CAN_F5R1_FB6_Pos: u32 = 6;
pub const CAN_F5R1_FB6_Msk: u32 = 64;
pub const CAN_F5R1_FB6: u32 = 64;
pub const CAN_F5R1_FB7_Pos: u32 = 7;
pub const CAN_F5R1_FB7_Msk: u32 = 128;
pub const CAN_F5R1_FB7: u32 = 128;
pub const CAN_F5R1_FB8_Pos: u32 = 8;
pub const CAN_F5R1_FB8_Msk: u32 = 256;
pub const CAN_F5R1_FB8: u32 = 256;
pub const CAN_F5R1_FB9_Pos: u32 = 9;
pub const CAN_F5R1_FB9_Msk: u32 = 512;
pub const CAN_F5R1_FB9: u32 = 512;
pub const CAN_F5R1_FB10_Pos: u32 = 10;
pub const CAN_F5R1_FB10_Msk: u32 = 1024;
pub const CAN_F5R1_FB10: u32 = 1024;
pub const CAN_F5R1_FB11_Pos: u32 = 11;
pub const CAN_F5R1_FB11_Msk: u32 = 2048;
pub const CAN_F5R1_FB11: u32 = 2048;
pub const CAN_F5R1_FB12_Pos: u32 = 12;
pub const CAN_F5R1_FB12_Msk: u32 = 4096;
pub const CAN_F5R1_FB12: u32 = 4096;
pub const CAN_F5R1_FB13_Pos: u32 = 13;
pub const CAN_F5R1_FB13_Msk: u32 = 8192;
pub const CAN_F5R1_FB13: u32 = 8192;
pub const CAN_F5R1_FB14_Pos: u32 = 14;
pub const CAN_F5R1_FB14_Msk: u32 = 16384;
pub const CAN_F5R1_FB14: u32 = 16384;
pub const CAN_F5R1_FB15_Pos: u32 = 15;
pub const CAN_F5R1_FB15_Msk: u32 = 32768;
pub const CAN_F5R1_FB15: u32 = 32768;
pub const CAN_F5R1_FB16_Pos: u32 = 16;
pub const CAN_F5R1_FB16_Msk: u32 = 65536;
pub const CAN_F5R1_FB16: u32 = 65536;
pub const CAN_F5R1_FB17_Pos: u32 = 17;
pub const CAN_F5R1_FB17_Msk: u32 = 131072;
pub const CAN_F5R1_FB17: u32 = 131072;
pub const CAN_F5R1_FB18_Pos: u32 = 18;
pub const CAN_F5R1_FB18_Msk: u32 = 262144;
pub const CAN_F5R1_FB18: u32 = 262144;
pub const CAN_F5R1_FB19_Pos: u32 = 19;
pub const CAN_F5R1_FB19_Msk: u32 = 524288;
pub const CAN_F5R1_FB19: u32 = 524288;
pub const CAN_F5R1_FB20_Pos: u32 = 20;
pub const CAN_F5R1_FB20_Msk: u32 = 1048576;
pub const CAN_F5R1_FB20: u32 = 1048576;
pub const CAN_F5R1_FB21_Pos: u32 = 21;
pub const CAN_F5R1_FB21_Msk: u32 = 2097152;
pub const CAN_F5R1_FB21: u32 = 2097152;
pub const CAN_F5R1_FB22_Pos: u32 = 22;
pub const CAN_F5R1_FB22_Msk: u32 = 4194304;
pub const CAN_F5R1_FB22: u32 = 4194304;
pub const CAN_F5R1_FB23_Pos: u32 = 23;
pub const CAN_F5R1_FB23_Msk: u32 = 8388608;
pub const CAN_F5R1_FB23: u32 = 8388608;
pub const CAN_F5R1_FB24_Pos: u32 = 24;
pub const CAN_F5R1_FB24_Msk: u32 = 16777216;
pub const CAN_F5R1_FB24: u32 = 16777216;
pub const CAN_F5R1_FB25_Pos: u32 = 25;
pub const CAN_F5R1_FB25_Msk: u32 = 33554432;
pub const CAN_F5R1_FB25: u32 = 33554432;
pub const CAN_F5R1_FB26_Pos: u32 = 26;
pub const CAN_F5R1_FB26_Msk: u32 = 67108864;
pub const CAN_F5R1_FB26: u32 = 67108864;
pub const CAN_F5R1_FB27_Pos: u32 = 27;
pub const CAN_F5R1_FB27_Msk: u32 = 134217728;
pub const CAN_F5R1_FB27: u32 = 134217728;
pub const CAN_F5R1_FB28_Pos: u32 = 28;
pub const CAN_F5R1_FB28_Msk: u32 = 268435456;
pub const CAN_F5R1_FB28: u32 = 268435456;
pub const CAN_F5R1_FB29_Pos: u32 = 29;
pub const CAN_F5R1_FB29_Msk: u32 = 536870912;
pub const CAN_F5R1_FB29: u32 = 536870912;
pub const CAN_F5R1_FB30_Pos: u32 = 30;
pub const CAN_F5R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F5R1_FB30: u32 = 1073741824;
pub const CAN_F5R1_FB31_Pos: u32 = 31;
pub const CAN_F5R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F5R1_FB31: u32 = 2147483648;
pub const CAN_F6R1_FB0_Pos: u32 = 0;
pub const CAN_F6R1_FB0_Msk: u32 = 1;
pub const CAN_F6R1_FB0: u32 = 1;
pub const CAN_F6R1_FB1_Pos: u32 = 1;
pub const CAN_F6R1_FB1_Msk: u32 = 2;
pub const CAN_F6R1_FB1: u32 = 2;
pub const CAN_F6R1_FB2_Pos: u32 = 2;
pub const CAN_F6R1_FB2_Msk: u32 = 4;
pub const CAN_F6R1_FB2: u32 = 4;
pub const CAN_F6R1_FB3_Pos: u32 = 3;
pub const CAN_F6R1_FB3_Msk: u32 = 8;
pub const CAN_F6R1_FB3: u32 = 8;
pub const CAN_F6R1_FB4_Pos: u32 = 4;
pub const CAN_F6R1_FB4_Msk: u32 = 16;
pub const CAN_F6R1_FB4: u32 = 16;
pub const CAN_F6R1_FB5_Pos: u32 = 5;
pub const CAN_F6R1_FB5_Msk: u32 = 32;
pub const CAN_F6R1_FB5: u32 = 32;
pub const CAN_F6R1_FB6_Pos: u32 = 6;
pub const CAN_F6R1_FB6_Msk: u32 = 64;
pub const CAN_F6R1_FB6: u32 = 64;
pub const CAN_F6R1_FB7_Pos: u32 = 7;
pub const CAN_F6R1_FB7_Msk: u32 = 128;
pub const CAN_F6R1_FB7: u32 = 128;
pub const CAN_F6R1_FB8_Pos: u32 = 8;
pub const CAN_F6R1_FB8_Msk: u32 = 256;
pub const CAN_F6R1_FB8: u32 = 256;
pub const CAN_F6R1_FB9_Pos: u32 = 9;
pub const CAN_F6R1_FB9_Msk: u32 = 512;
pub const CAN_F6R1_FB9: u32 = 512;
pub const CAN_F6R1_FB10_Pos: u32 = 10;
pub const CAN_F6R1_FB10_Msk: u32 = 1024;
pub const CAN_F6R1_FB10: u32 = 1024;
pub const CAN_F6R1_FB11_Pos: u32 = 11;
pub const CAN_F6R1_FB11_Msk: u32 = 2048;
pub const CAN_F6R1_FB11: u32 = 2048;
pub const CAN_F6R1_FB12_Pos: u32 = 12;
pub const CAN_F6R1_FB12_Msk: u32 = 4096;
pub const CAN_F6R1_FB12: u32 = 4096;
pub const CAN_F6R1_FB13_Pos: u32 = 13;
pub const CAN_F6R1_FB13_Msk: u32 = 8192;
pub const CAN_F6R1_FB13: u32 = 8192;
pub const CAN_F6R1_FB14_Pos: u32 = 14;
pub const CAN_F6R1_FB14_Msk: u32 = 16384;
pub const CAN_F6R1_FB14: u32 = 16384;
pub const CAN_F6R1_FB15_Pos: u32 = 15;
pub const CAN_F6R1_FB15_Msk: u32 = 32768;
pub const CAN_F6R1_FB15: u32 = 32768;
pub const CAN_F6R1_FB16_Pos: u32 = 16;
pub const CAN_F6R1_FB16_Msk: u32 = 65536;
pub const CAN_F6R1_FB16: u32 = 65536;
pub const CAN_F6R1_FB17_Pos: u32 = 17;
pub const CAN_F6R1_FB17_Msk: u32 = 131072;
pub const CAN_F6R1_FB17: u32 = 131072;
pub const CAN_F6R1_FB18_Pos: u32 = 18;
pub const CAN_F6R1_FB18_Msk: u32 = 262144;
pub const CAN_F6R1_FB18: u32 = 262144;
pub const CAN_F6R1_FB19_Pos: u32 = 19;
pub const CAN_F6R1_FB19_Msk: u32 = 524288;
pub const CAN_F6R1_FB19: u32 = 524288;
pub const CAN_F6R1_FB20_Pos: u32 = 20;
pub const CAN_F6R1_FB20_Msk: u32 = 1048576;
pub const CAN_F6R1_FB20: u32 = 1048576;
pub const CAN_F6R1_FB21_Pos: u32 = 21;
pub const CAN_F6R1_FB21_Msk: u32 = 2097152;
pub const CAN_F6R1_FB21: u32 = 2097152;
pub const CAN_F6R1_FB22_Pos: u32 = 22;
pub const CAN_F6R1_FB22_Msk: u32 = 4194304;
pub const CAN_F6R1_FB22: u32 = 4194304;
pub const CAN_F6R1_FB23_Pos: u32 = 23;
pub const CAN_F6R1_FB23_Msk: u32 = 8388608;
pub const CAN_F6R1_FB23: u32 = 8388608;
pub const CAN_F6R1_FB24_Pos: u32 = 24;
pub const CAN_F6R1_FB24_Msk: u32 = 16777216;
pub const CAN_F6R1_FB24: u32 = 16777216;
pub const CAN_F6R1_FB25_Pos: u32 = 25;
pub const CAN_F6R1_FB25_Msk: u32 = 33554432;
pub const CAN_F6R1_FB25: u32 = 33554432;
pub const CAN_F6R1_FB26_Pos: u32 = 26;
pub const CAN_F6R1_FB26_Msk: u32 = 67108864;
pub const CAN_F6R1_FB26: u32 = 67108864;
pub const CAN_F6R1_FB27_Pos: u32 = 27;
pub const CAN_F6R1_FB27_Msk: u32 = 134217728;
pub const CAN_F6R1_FB27: u32 = 134217728;
pub const CAN_F6R1_FB28_Pos: u32 = 28;
pub const CAN_F6R1_FB28_Msk: u32 = 268435456;
pub const CAN_F6R1_FB28: u32 = 268435456;
pub const CAN_F6R1_FB29_Pos: u32 = 29;
pub const CAN_F6R1_FB29_Msk: u32 = 536870912;
pub const CAN_F6R1_FB29: u32 = 536870912;
pub const CAN_F6R1_FB30_Pos: u32 = 30;
pub const CAN_F6R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F6R1_FB30: u32 = 1073741824;
pub const CAN_F6R1_FB31_Pos: u32 = 31;
pub const CAN_F6R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F6R1_FB31: u32 = 2147483648;
pub const CAN_F7R1_FB0_Pos: u32 = 0;
pub const CAN_F7R1_FB0_Msk: u32 = 1;
pub const CAN_F7R1_FB0: u32 = 1;
pub const CAN_F7R1_FB1_Pos: u32 = 1;
pub const CAN_F7R1_FB1_Msk: u32 = 2;
pub const CAN_F7R1_FB1: u32 = 2;
pub const CAN_F7R1_FB2_Pos: u32 = 2;
pub const CAN_F7R1_FB2_Msk: u32 = 4;
pub const CAN_F7R1_FB2: u32 = 4;
pub const CAN_F7R1_FB3_Pos: u32 = 3;
pub const CAN_F7R1_FB3_Msk: u32 = 8;
pub const CAN_F7R1_FB3: u32 = 8;
pub const CAN_F7R1_FB4_Pos: u32 = 4;
pub const CAN_F7R1_FB4_Msk: u32 = 16;
pub const CAN_F7R1_FB4: u32 = 16;
pub const CAN_F7R1_FB5_Pos: u32 = 5;
pub const CAN_F7R1_FB5_Msk: u32 = 32;
pub const CAN_F7R1_FB5: u32 = 32;
pub const CAN_F7R1_FB6_Pos: u32 = 6;
pub const CAN_F7R1_FB6_Msk: u32 = 64;
pub const CAN_F7R1_FB6: u32 = 64;
pub const CAN_F7R1_FB7_Pos: u32 = 7;
pub const CAN_F7R1_FB7_Msk: u32 = 128;
pub const CAN_F7R1_FB7: u32 = 128;
pub const CAN_F7R1_FB8_Pos: u32 = 8;
pub const CAN_F7R1_FB8_Msk: u32 = 256;
pub const CAN_F7R1_FB8: u32 = 256;
pub const CAN_F7R1_FB9_Pos: u32 = 9;
pub const CAN_F7R1_FB9_Msk: u32 = 512;
pub const CAN_F7R1_FB9: u32 = 512;
pub const CAN_F7R1_FB10_Pos: u32 = 10;
pub const CAN_F7R1_FB10_Msk: u32 = 1024;
pub const CAN_F7R1_FB10: u32 = 1024;
pub const CAN_F7R1_FB11_Pos: u32 = 11;
pub const CAN_F7R1_FB11_Msk: u32 = 2048;
pub const CAN_F7R1_FB11: u32 = 2048;
pub const CAN_F7R1_FB12_Pos: u32 = 12;
pub const CAN_F7R1_FB12_Msk: u32 = 4096;
pub const CAN_F7R1_FB12: u32 = 4096;
pub const CAN_F7R1_FB13_Pos: u32 = 13;
pub const CAN_F7R1_FB13_Msk: u32 = 8192;
pub const CAN_F7R1_FB13: u32 = 8192;
pub const CAN_F7R1_FB14_Pos: u32 = 14;
pub const CAN_F7R1_FB14_Msk: u32 = 16384;
pub const CAN_F7R1_FB14: u32 = 16384;
pub const CAN_F7R1_FB15_Pos: u32 = 15;
pub const CAN_F7R1_FB15_Msk: u32 = 32768;
pub const CAN_F7R1_FB15: u32 = 32768;
pub const CAN_F7R1_FB16_Pos: u32 = 16;
pub const CAN_F7R1_FB16_Msk: u32 = 65536;
pub const CAN_F7R1_FB16: u32 = 65536;
pub const CAN_F7R1_FB17_Pos: u32 = 17;
pub const CAN_F7R1_FB17_Msk: u32 = 131072;
pub const CAN_F7R1_FB17: u32 = 131072;
pub const CAN_F7R1_FB18_Pos: u32 = 18;
pub const CAN_F7R1_FB18_Msk: u32 = 262144;
pub const CAN_F7R1_FB18: u32 = 262144;
pub const CAN_F7R1_FB19_Pos: u32 = 19;
pub const CAN_F7R1_FB19_Msk: u32 = 524288;
pub const CAN_F7R1_FB19: u32 = 524288;
pub const CAN_F7R1_FB20_Pos: u32 = 20;
pub const CAN_F7R1_FB20_Msk: u32 = 1048576;
pub const CAN_F7R1_FB20: u32 = 1048576;
pub const CAN_F7R1_FB21_Pos: u32 = 21;
pub const CAN_F7R1_FB21_Msk: u32 = 2097152;
pub const CAN_F7R1_FB21: u32 = 2097152;
pub const CAN_F7R1_FB22_Pos: u32 = 22;
pub const CAN_F7R1_FB22_Msk: u32 = 4194304;
pub const CAN_F7R1_FB22: u32 = 4194304;
pub const CAN_F7R1_FB23_Pos: u32 = 23;
pub const CAN_F7R1_FB23_Msk: u32 = 8388608;
pub const CAN_F7R1_FB23: u32 = 8388608;
pub const CAN_F7R1_FB24_Pos: u32 = 24;
pub const CAN_F7R1_FB24_Msk: u32 = 16777216;
pub const CAN_F7R1_FB24: u32 = 16777216;
pub const CAN_F7R1_FB25_Pos: u32 = 25;
pub const CAN_F7R1_FB25_Msk: u32 = 33554432;
pub const CAN_F7R1_FB25: u32 = 33554432;
pub const CAN_F7R1_FB26_Pos: u32 = 26;
pub const CAN_F7R1_FB26_Msk: u32 = 67108864;
pub const CAN_F7R1_FB26: u32 = 67108864;
pub const CAN_F7R1_FB27_Pos: u32 = 27;
pub const CAN_F7R1_FB27_Msk: u32 = 134217728;
pub const CAN_F7R1_FB27: u32 = 134217728;
pub const CAN_F7R1_FB28_Pos: u32 = 28;
pub const CAN_F7R1_FB28_Msk: u32 = 268435456;
pub const CAN_F7R1_FB28: u32 = 268435456;
pub const CAN_F7R1_FB29_Pos: u32 = 29;
pub const CAN_F7R1_FB29_Msk: u32 = 536870912;
pub const CAN_F7R1_FB29: u32 = 536870912;
pub const CAN_F7R1_FB30_Pos: u32 = 30;
pub const CAN_F7R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F7R1_FB30: u32 = 1073741824;
pub const CAN_F7R1_FB31_Pos: u32 = 31;
pub const CAN_F7R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F7R1_FB31: u32 = 2147483648;
pub const CAN_F8R1_FB0_Pos: u32 = 0;
pub const CAN_F8R1_FB0_Msk: u32 = 1;
pub const CAN_F8R1_FB0: u32 = 1;
pub const CAN_F8R1_FB1_Pos: u32 = 1;
pub const CAN_F8R1_FB1_Msk: u32 = 2;
pub const CAN_F8R1_FB1: u32 = 2;
pub const CAN_F8R1_FB2_Pos: u32 = 2;
pub const CAN_F8R1_FB2_Msk: u32 = 4;
pub const CAN_F8R1_FB2: u32 = 4;
pub const CAN_F8R1_FB3_Pos: u32 = 3;
pub const CAN_F8R1_FB3_Msk: u32 = 8;
pub const CAN_F8R1_FB3: u32 = 8;
pub const CAN_F8R1_FB4_Pos: u32 = 4;
pub const CAN_F8R1_FB4_Msk: u32 = 16;
pub const CAN_F8R1_FB4: u32 = 16;
pub const CAN_F8R1_FB5_Pos: u32 = 5;
pub const CAN_F8R1_FB5_Msk: u32 = 32;
pub const CAN_F8R1_FB5: u32 = 32;
pub const CAN_F8R1_FB6_Pos: u32 = 6;
pub const CAN_F8R1_FB6_Msk: u32 = 64;
pub const CAN_F8R1_FB6: u32 = 64;
pub const CAN_F8R1_FB7_Pos: u32 = 7;
pub const CAN_F8R1_FB7_Msk: u32 = 128;
pub const CAN_F8R1_FB7: u32 = 128;
pub const CAN_F8R1_FB8_Pos: u32 = 8;
pub const CAN_F8R1_FB8_Msk: u32 = 256;
pub const CAN_F8R1_FB8: u32 = 256;
pub const CAN_F8R1_FB9_Pos: u32 = 9;
pub const CAN_F8R1_FB9_Msk: u32 = 512;
pub const CAN_F8R1_FB9: u32 = 512;
pub const CAN_F8R1_FB10_Pos: u32 = 10;
pub const CAN_F8R1_FB10_Msk: u32 = 1024;
pub const CAN_F8R1_FB10: u32 = 1024;
pub const CAN_F8R1_FB11_Pos: u32 = 11;
pub const CAN_F8R1_FB11_Msk: u32 = 2048;
pub const CAN_F8R1_FB11: u32 = 2048;
pub const CAN_F8R1_FB12_Pos: u32 = 12;
pub const CAN_F8R1_FB12_Msk: u32 = 4096;
pub const CAN_F8R1_FB12: u32 = 4096;
pub const CAN_F8R1_FB13_Pos: u32 = 13;
pub const CAN_F8R1_FB13_Msk: u32 = 8192;
pub const CAN_F8R1_FB13: u32 = 8192;
pub const CAN_F8R1_FB14_Pos: u32 = 14;
pub const CAN_F8R1_FB14_Msk: u32 = 16384;
pub const CAN_F8R1_FB14: u32 = 16384;
pub const CAN_F8R1_FB15_Pos: u32 = 15;
pub const CAN_F8R1_FB15_Msk: u32 = 32768;
pub const CAN_F8R1_FB15: u32 = 32768;
pub const CAN_F8R1_FB16_Pos: u32 = 16;
pub const CAN_F8R1_FB16_Msk: u32 = 65536;
pub const CAN_F8R1_FB16: u32 = 65536;
pub const CAN_F8R1_FB17_Pos: u32 = 17;
pub const CAN_F8R1_FB17_Msk: u32 = 131072;
pub const CAN_F8R1_FB17: u32 = 131072;
pub const CAN_F8R1_FB18_Pos: u32 = 18;
pub const CAN_F8R1_FB18_Msk: u32 = 262144;
pub const CAN_F8R1_FB18: u32 = 262144;
pub const CAN_F8R1_FB19_Pos: u32 = 19;
pub const CAN_F8R1_FB19_Msk: u32 = 524288;
pub const CAN_F8R1_FB19: u32 = 524288;
pub const CAN_F8R1_FB20_Pos: u32 = 20;
pub const CAN_F8R1_FB20_Msk: u32 = 1048576;
pub const CAN_F8R1_FB20: u32 = 1048576;
pub const CAN_F8R1_FB21_Pos: u32 = 21;
pub const CAN_F8R1_FB21_Msk: u32 = 2097152;
pub const CAN_F8R1_FB21: u32 = 2097152;
pub const CAN_F8R1_FB22_Pos: u32 = 22;
pub const CAN_F8R1_FB22_Msk: u32 = 4194304;
pub const CAN_F8R1_FB22: u32 = 4194304;
pub const CAN_F8R1_FB23_Pos: u32 = 23;
pub const CAN_F8R1_FB23_Msk: u32 = 8388608;
pub const CAN_F8R1_FB23: u32 = 8388608;
pub const CAN_F8R1_FB24_Pos: u32 = 24;
pub const CAN_F8R1_FB24_Msk: u32 = 16777216;
pub const CAN_F8R1_FB24: u32 = 16777216;
pub const CAN_F8R1_FB25_Pos: u32 = 25;
pub const CAN_F8R1_FB25_Msk: u32 = 33554432;
pub const CAN_F8R1_FB25: u32 = 33554432;
pub const CAN_F8R1_FB26_Pos: u32 = 26;
pub const CAN_F8R1_FB26_Msk: u32 = 67108864;
pub const CAN_F8R1_FB26: u32 = 67108864;
pub const CAN_F8R1_FB27_Pos: u32 = 27;
pub const CAN_F8R1_FB27_Msk: u32 = 134217728;
pub const CAN_F8R1_FB27: u32 = 134217728;
pub const CAN_F8R1_FB28_Pos: u32 = 28;
pub const CAN_F8R1_FB28_Msk: u32 = 268435456;
pub const CAN_F8R1_FB28: u32 = 268435456;
pub const CAN_F8R1_FB29_Pos: u32 = 29;
pub const CAN_F8R1_FB29_Msk: u32 = 536870912;
pub const CAN_F8R1_FB29: u32 = 536870912;
pub const CAN_F8R1_FB30_Pos: u32 = 30;
pub const CAN_F8R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F8R1_FB30: u32 = 1073741824;
pub const CAN_F8R1_FB31_Pos: u32 = 31;
pub const CAN_F8R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F8R1_FB31: u32 = 2147483648;
pub const CAN_F9R1_FB0_Pos: u32 = 0;
pub const CAN_F9R1_FB0_Msk: u32 = 1;
pub const CAN_F9R1_FB0: u32 = 1;
pub const CAN_F9R1_FB1_Pos: u32 = 1;
pub const CAN_F9R1_FB1_Msk: u32 = 2;
pub const CAN_F9R1_FB1: u32 = 2;
pub const CAN_F9R1_FB2_Pos: u32 = 2;
pub const CAN_F9R1_FB2_Msk: u32 = 4;
pub const CAN_F9R1_FB2: u32 = 4;
pub const CAN_F9R1_FB3_Pos: u32 = 3;
pub const CAN_F9R1_FB3_Msk: u32 = 8;
pub const CAN_F9R1_FB3: u32 = 8;
pub const CAN_F9R1_FB4_Pos: u32 = 4;
pub const CAN_F9R1_FB4_Msk: u32 = 16;
pub const CAN_F9R1_FB4: u32 = 16;
pub const CAN_F9R1_FB5_Pos: u32 = 5;
pub const CAN_F9R1_FB5_Msk: u32 = 32;
pub const CAN_F9R1_FB5: u32 = 32;
pub const CAN_F9R1_FB6_Pos: u32 = 6;
pub const CAN_F9R1_FB6_Msk: u32 = 64;
pub const CAN_F9R1_FB6: u32 = 64;
pub const CAN_F9R1_FB7_Pos: u32 = 7;
pub const CAN_F9R1_FB7_Msk: u32 = 128;
pub const CAN_F9R1_FB7: u32 = 128;
pub const CAN_F9R1_FB8_Pos: u32 = 8;
pub const CAN_F9R1_FB8_Msk: u32 = 256;
pub const CAN_F9R1_FB8: u32 = 256;
pub const CAN_F9R1_FB9_Pos: u32 = 9;
pub const CAN_F9R1_FB9_Msk: u32 = 512;
pub const CAN_F9R1_FB9: u32 = 512;
pub const CAN_F9R1_FB10_Pos: u32 = 10;
pub const CAN_F9R1_FB10_Msk: u32 = 1024;
pub const CAN_F9R1_FB10: u32 = 1024;
pub const CAN_F9R1_FB11_Pos: u32 = 11;
pub const CAN_F9R1_FB11_Msk: u32 = 2048;
pub const CAN_F9R1_FB11: u32 = 2048;
pub const CAN_F9R1_FB12_Pos: u32 = 12;
pub const CAN_F9R1_FB12_Msk: u32 = 4096;
pub const CAN_F9R1_FB12: u32 = 4096;
pub const CAN_F9R1_FB13_Pos: u32 = 13;
pub const CAN_F9R1_FB13_Msk: u32 = 8192;
pub const CAN_F9R1_FB13: u32 = 8192;
pub const CAN_F9R1_FB14_Pos: u32 = 14;
pub const CAN_F9R1_FB14_Msk: u32 = 16384;
pub const CAN_F9R1_FB14: u32 = 16384;
pub const CAN_F9R1_FB15_Pos: u32 = 15;
pub const CAN_F9R1_FB15_Msk: u32 = 32768;
pub const CAN_F9R1_FB15: u32 = 32768;
pub const CAN_F9R1_FB16_Pos: u32 = 16;
pub const CAN_F9R1_FB16_Msk: u32 = 65536;
pub const CAN_F9R1_FB16: u32 = 65536;
pub const CAN_F9R1_FB17_Pos: u32 = 17;
pub const CAN_F9R1_FB17_Msk: u32 = 131072;
pub const CAN_F9R1_FB17: u32 = 131072;
pub const CAN_F9R1_FB18_Pos: u32 = 18;
pub const CAN_F9R1_FB18_Msk: u32 = 262144;
pub const CAN_F9R1_FB18: u32 = 262144;
pub const CAN_F9R1_FB19_Pos: u32 = 19;
pub const CAN_F9R1_FB19_Msk: u32 = 524288;
pub const CAN_F9R1_FB19: u32 = 524288;
pub const CAN_F9R1_FB20_Pos: u32 = 20;
pub const CAN_F9R1_FB20_Msk: u32 = 1048576;
pub const CAN_F9R1_FB20: u32 = 1048576;
pub const CAN_F9R1_FB21_Pos: u32 = 21;
pub const CAN_F9R1_FB21_Msk: u32 = 2097152;
pub const CAN_F9R1_FB21: u32 = 2097152;
pub const CAN_F9R1_FB22_Pos: u32 = 22;
pub const CAN_F9R1_FB22_Msk: u32 = 4194304;
pub const CAN_F9R1_FB22: u32 = 4194304;
pub const CAN_F9R1_FB23_Pos: u32 = 23;
pub const CAN_F9R1_FB23_Msk: u32 = 8388608;
pub const CAN_F9R1_FB23: u32 = 8388608;
pub const CAN_F9R1_FB24_Pos: u32 = 24;
pub const CAN_F9R1_FB24_Msk: u32 = 16777216;
pub const CAN_F9R1_FB24: u32 = 16777216;
pub const CAN_F9R1_FB25_Pos: u32 = 25;
pub const CAN_F9R1_FB25_Msk: u32 = 33554432;
pub const CAN_F9R1_FB25: u32 = 33554432;
pub const CAN_F9R1_FB26_Pos: u32 = 26;
pub const CAN_F9R1_FB26_Msk: u32 = 67108864;
pub const CAN_F9R1_FB26: u32 = 67108864;
pub const CAN_F9R1_FB27_Pos: u32 = 27;
pub const CAN_F9R1_FB27_Msk: u32 = 134217728;
pub const CAN_F9R1_FB27: u32 = 134217728;
pub const CAN_F9R1_FB28_Pos: u32 = 28;
pub const CAN_F9R1_FB28_Msk: u32 = 268435456;
pub const CAN_F9R1_FB28: u32 = 268435456;
pub const CAN_F9R1_FB29_Pos: u32 = 29;
pub const CAN_F9R1_FB29_Msk: u32 = 536870912;
pub const CAN_F9R1_FB29: u32 = 536870912;
pub const CAN_F9R1_FB30_Pos: u32 = 30;
pub const CAN_F9R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F9R1_FB30: u32 = 1073741824;
pub const CAN_F9R1_FB31_Pos: u32 = 31;
pub const CAN_F9R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F9R1_FB31: u32 = 2147483648;
pub const CAN_F10R1_FB0_Pos: u32 = 0;
pub const CAN_F10R1_FB0_Msk: u32 = 1;
pub const CAN_F10R1_FB0: u32 = 1;
pub const CAN_F10R1_FB1_Pos: u32 = 1;
pub const CAN_F10R1_FB1_Msk: u32 = 2;
pub const CAN_F10R1_FB1: u32 = 2;
pub const CAN_F10R1_FB2_Pos: u32 = 2;
pub const CAN_F10R1_FB2_Msk: u32 = 4;
pub const CAN_F10R1_FB2: u32 = 4;
pub const CAN_F10R1_FB3_Pos: u32 = 3;
pub const CAN_F10R1_FB3_Msk: u32 = 8;
pub const CAN_F10R1_FB3: u32 = 8;
pub const CAN_F10R1_FB4_Pos: u32 = 4;
pub const CAN_F10R1_FB4_Msk: u32 = 16;
pub const CAN_F10R1_FB4: u32 = 16;
pub const CAN_F10R1_FB5_Pos: u32 = 5;
pub const CAN_F10R1_FB5_Msk: u32 = 32;
pub const CAN_F10R1_FB5: u32 = 32;
pub const CAN_F10R1_FB6_Pos: u32 = 6;
pub const CAN_F10R1_FB6_Msk: u32 = 64;
pub const CAN_F10R1_FB6: u32 = 64;
pub const CAN_F10R1_FB7_Pos: u32 = 7;
pub const CAN_F10R1_FB7_Msk: u32 = 128;
pub const CAN_F10R1_FB7: u32 = 128;
pub const CAN_F10R1_FB8_Pos: u32 = 8;
pub const CAN_F10R1_FB8_Msk: u32 = 256;
pub const CAN_F10R1_FB8: u32 = 256;
pub const CAN_F10R1_FB9_Pos: u32 = 9;
pub const CAN_F10R1_FB9_Msk: u32 = 512;
pub const CAN_F10R1_FB9: u32 = 512;
pub const CAN_F10R1_FB10_Pos: u32 = 10;
pub const CAN_F10R1_FB10_Msk: u32 = 1024;
pub const CAN_F10R1_FB10: u32 = 1024;
pub const CAN_F10R1_FB11_Pos: u32 = 11;
pub const CAN_F10R1_FB11_Msk: u32 = 2048;
pub const CAN_F10R1_FB11: u32 = 2048;
pub const CAN_F10R1_FB12_Pos: u32 = 12;
pub const CAN_F10R1_FB12_Msk: u32 = 4096;
pub const CAN_F10R1_FB12: u32 = 4096;
pub const CAN_F10R1_FB13_Pos: u32 = 13;
pub const CAN_F10R1_FB13_Msk: u32 = 8192;
pub const CAN_F10R1_FB13: u32 = 8192;
pub const CAN_F10R1_FB14_Pos: u32 = 14;
pub const CAN_F10R1_FB14_Msk: u32 = 16384;
pub const CAN_F10R1_FB14: u32 = 16384;
pub const CAN_F10R1_FB15_Pos: u32 = 15;
pub const CAN_F10R1_FB15_Msk: u32 = 32768;
pub const CAN_F10R1_FB15: u32 = 32768;
pub const CAN_F10R1_FB16_Pos: u32 = 16;
pub const CAN_F10R1_FB16_Msk: u32 = 65536;
pub const CAN_F10R1_FB16: u32 = 65536;
pub const CAN_F10R1_FB17_Pos: u32 = 17;
pub const CAN_F10R1_FB17_Msk: u32 = 131072;
pub const CAN_F10R1_FB17: u32 = 131072;
pub const CAN_F10R1_FB18_Pos: u32 = 18;
pub const CAN_F10R1_FB18_Msk: u32 = 262144;
pub const CAN_F10R1_FB18: u32 = 262144;
pub const CAN_F10R1_FB19_Pos: u32 = 19;
pub const CAN_F10R1_FB19_Msk: u32 = 524288;
pub const CAN_F10R1_FB19: u32 = 524288;
pub const CAN_F10R1_FB20_Pos: u32 = 20;
pub const CAN_F10R1_FB20_Msk: u32 = 1048576;
pub const CAN_F10R1_FB20: u32 = 1048576;
pub const CAN_F10R1_FB21_Pos: u32 = 21;
pub const CAN_F10R1_FB21_Msk: u32 = 2097152;
pub const CAN_F10R1_FB21: u32 = 2097152;
pub const CAN_F10R1_FB22_Pos: u32 = 22;
pub const CAN_F10R1_FB22_Msk: u32 = 4194304;
pub const CAN_F10R1_FB22: u32 = 4194304;
pub const CAN_F10R1_FB23_Pos: u32 = 23;
pub const CAN_F10R1_FB23_Msk: u32 = 8388608;
pub const CAN_F10R1_FB23: u32 = 8388608;
pub const CAN_F10R1_FB24_Pos: u32 = 24;
pub const CAN_F10R1_FB24_Msk: u32 = 16777216;
pub const CAN_F10R1_FB24: u32 = 16777216;
pub const CAN_F10R1_FB25_Pos: u32 = 25;
pub const CAN_F10R1_FB25_Msk: u32 = 33554432;
pub const CAN_F10R1_FB25: u32 = 33554432;
pub const CAN_F10R1_FB26_Pos: u32 = 26;
pub const CAN_F10R1_FB26_Msk: u32 = 67108864;
pub const CAN_F10R1_FB26: u32 = 67108864;
pub const CAN_F10R1_FB27_Pos: u32 = 27;
pub const CAN_F10R1_FB27_Msk: u32 = 134217728;
pub const CAN_F10R1_FB27: u32 = 134217728;
pub const CAN_F10R1_FB28_Pos: u32 = 28;
pub const CAN_F10R1_FB28_Msk: u32 = 268435456;
pub const CAN_F10R1_FB28: u32 = 268435456;
pub const CAN_F10R1_FB29_Pos: u32 = 29;
pub const CAN_F10R1_FB29_Msk: u32 = 536870912;
pub const CAN_F10R1_FB29: u32 = 536870912;
pub const CAN_F10R1_FB30_Pos: u32 = 30;
pub const CAN_F10R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F10R1_FB30: u32 = 1073741824;
pub const CAN_F10R1_FB31_Pos: u32 = 31;
pub const CAN_F10R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F10R1_FB31: u32 = 2147483648;
pub const CAN_F11R1_FB0_Pos: u32 = 0;
pub const CAN_F11R1_FB0_Msk: u32 = 1;
pub const CAN_F11R1_FB0: u32 = 1;
pub const CAN_F11R1_FB1_Pos: u32 = 1;
pub const CAN_F11R1_FB1_Msk: u32 = 2;
pub const CAN_F11R1_FB1: u32 = 2;
pub const CAN_F11R1_FB2_Pos: u32 = 2;
pub const CAN_F11R1_FB2_Msk: u32 = 4;
pub const CAN_F11R1_FB2: u32 = 4;
pub const CAN_F11R1_FB3_Pos: u32 = 3;
pub const CAN_F11R1_FB3_Msk: u32 = 8;
pub const CAN_F11R1_FB3: u32 = 8;
pub const CAN_F11R1_FB4_Pos: u32 = 4;
pub const CAN_F11R1_FB4_Msk: u32 = 16;
pub const CAN_F11R1_FB4: u32 = 16;
pub const CAN_F11R1_FB5_Pos: u32 = 5;
pub const CAN_F11R1_FB5_Msk: u32 = 32;
pub const CAN_F11R1_FB5: u32 = 32;
pub const CAN_F11R1_FB6_Pos: u32 = 6;
pub const CAN_F11R1_FB6_Msk: u32 = 64;
pub const CAN_F11R1_FB6: u32 = 64;
pub const CAN_F11R1_FB7_Pos: u32 = 7;
pub const CAN_F11R1_FB7_Msk: u32 = 128;
pub const CAN_F11R1_FB7: u32 = 128;
pub const CAN_F11R1_FB8_Pos: u32 = 8;
pub const CAN_F11R1_FB8_Msk: u32 = 256;
pub const CAN_F11R1_FB8: u32 = 256;
pub const CAN_F11R1_FB9_Pos: u32 = 9;
pub const CAN_F11R1_FB9_Msk: u32 = 512;
pub const CAN_F11R1_FB9: u32 = 512;
pub const CAN_F11R1_FB10_Pos: u32 = 10;
pub const CAN_F11R1_FB10_Msk: u32 = 1024;
pub const CAN_F11R1_FB10: u32 = 1024;
pub const CAN_F11R1_FB11_Pos: u32 = 11;
pub const CAN_F11R1_FB11_Msk: u32 = 2048;
pub const CAN_F11R1_FB11: u32 = 2048;
pub const CAN_F11R1_FB12_Pos: u32 = 12;
pub const CAN_F11R1_FB12_Msk: u32 = 4096;
pub const CAN_F11R1_FB12: u32 = 4096;
pub const CAN_F11R1_FB13_Pos: u32 = 13;
pub const CAN_F11R1_FB13_Msk: u32 = 8192;
pub const CAN_F11R1_FB13: u32 = 8192;
pub const CAN_F11R1_FB14_Pos: u32 = 14;
pub const CAN_F11R1_FB14_Msk: u32 = 16384;
pub const CAN_F11R1_FB14: u32 = 16384;
pub const CAN_F11R1_FB15_Pos: u32 = 15;
pub const CAN_F11R1_FB15_Msk: u32 = 32768;
pub const CAN_F11R1_FB15: u32 = 32768;
pub const CAN_F11R1_FB16_Pos: u32 = 16;
pub const CAN_F11R1_FB16_Msk: u32 = 65536;
pub const CAN_F11R1_FB16: u32 = 65536;
pub const CAN_F11R1_FB17_Pos: u32 = 17;
pub const CAN_F11R1_FB17_Msk: u32 = 131072;
pub const CAN_F11R1_FB17: u32 = 131072;
pub const CAN_F11R1_FB18_Pos: u32 = 18;
pub const CAN_F11R1_FB18_Msk: u32 = 262144;
pub const CAN_F11R1_FB18: u32 = 262144;
pub const CAN_F11R1_FB19_Pos: u32 = 19;
pub const CAN_F11R1_FB19_Msk: u32 = 524288;
pub const CAN_F11R1_FB19: u32 = 524288;
pub const CAN_F11R1_FB20_Pos: u32 = 20;
pub const CAN_F11R1_FB20_Msk: u32 = 1048576;
pub const CAN_F11R1_FB20: u32 = 1048576;
pub const CAN_F11R1_FB21_Pos: u32 = 21;
pub const CAN_F11R1_FB21_Msk: u32 = 2097152;
pub const CAN_F11R1_FB21: u32 = 2097152;
pub const CAN_F11R1_FB22_Pos: u32 = 22;
pub const CAN_F11R1_FB22_Msk: u32 = 4194304;
pub const CAN_F11R1_FB22: u32 = 4194304;
pub const CAN_F11R1_FB23_Pos: u32 = 23;
pub const CAN_F11R1_FB23_Msk: u32 = 8388608;
pub const CAN_F11R1_FB23: u32 = 8388608;
pub const CAN_F11R1_FB24_Pos: u32 = 24;
pub const CAN_F11R1_FB24_Msk: u32 = 16777216;
pub const CAN_F11R1_FB24: u32 = 16777216;
pub const CAN_F11R1_FB25_Pos: u32 = 25;
pub const CAN_F11R1_FB25_Msk: u32 = 33554432;
pub const CAN_F11R1_FB25: u32 = 33554432;
pub const CAN_F11R1_FB26_Pos: u32 = 26;
pub const CAN_F11R1_FB26_Msk: u32 = 67108864;
pub const CAN_F11R1_FB26: u32 = 67108864;
pub const CAN_F11R1_FB27_Pos: u32 = 27;
pub const CAN_F11R1_FB27_Msk: u32 = 134217728;
pub const CAN_F11R1_FB27: u32 = 134217728;
pub const CAN_F11R1_FB28_Pos: u32 = 28;
pub const CAN_F11R1_FB28_Msk: u32 = 268435456;
pub const CAN_F11R1_FB28: u32 = 268435456;
pub const CAN_F11R1_FB29_Pos: u32 = 29;
pub const CAN_F11R1_FB29_Msk: u32 = 536870912;
pub const CAN_F11R1_FB29: u32 = 536870912;
pub const CAN_F11R1_FB30_Pos: u32 = 30;
pub const CAN_F11R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F11R1_FB30: u32 = 1073741824;
pub const CAN_F11R1_FB31_Pos: u32 = 31;
pub const CAN_F11R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F11R1_FB31: u32 = 2147483648;
pub const CAN_F12R1_FB0_Pos: u32 = 0;
pub const CAN_F12R1_FB0_Msk: u32 = 1;
pub const CAN_F12R1_FB0: u32 = 1;
pub const CAN_F12R1_FB1_Pos: u32 = 1;
pub const CAN_F12R1_FB1_Msk: u32 = 2;
pub const CAN_F12R1_FB1: u32 = 2;
pub const CAN_F12R1_FB2_Pos: u32 = 2;
pub const CAN_F12R1_FB2_Msk: u32 = 4;
pub const CAN_F12R1_FB2: u32 = 4;
pub const CAN_F12R1_FB3_Pos: u32 = 3;
pub const CAN_F12R1_FB3_Msk: u32 = 8;
pub const CAN_F12R1_FB3: u32 = 8;
pub const CAN_F12R1_FB4_Pos: u32 = 4;
pub const CAN_F12R1_FB4_Msk: u32 = 16;
pub const CAN_F12R1_FB4: u32 = 16;
pub const CAN_F12R1_FB5_Pos: u32 = 5;
pub const CAN_F12R1_FB5_Msk: u32 = 32;
pub const CAN_F12R1_FB5: u32 = 32;
pub const CAN_F12R1_FB6_Pos: u32 = 6;
pub const CAN_F12R1_FB6_Msk: u32 = 64;
pub const CAN_F12R1_FB6: u32 = 64;
pub const CAN_F12R1_FB7_Pos: u32 = 7;
pub const CAN_F12R1_FB7_Msk: u32 = 128;
pub const CAN_F12R1_FB7: u32 = 128;
pub const CAN_F12R1_FB8_Pos: u32 = 8;
pub const CAN_F12R1_FB8_Msk: u32 = 256;
pub const CAN_F12R1_FB8: u32 = 256;
pub const CAN_F12R1_FB9_Pos: u32 = 9;
pub const CAN_F12R1_FB9_Msk: u32 = 512;
pub const CAN_F12R1_FB9: u32 = 512;
pub const CAN_F12R1_FB10_Pos: u32 = 10;
pub const CAN_F12R1_FB10_Msk: u32 = 1024;
pub const CAN_F12R1_FB10: u32 = 1024;
pub const CAN_F12R1_FB11_Pos: u32 = 11;
pub const CAN_F12R1_FB11_Msk: u32 = 2048;
pub const CAN_F12R1_FB11: u32 = 2048;
pub const CAN_F12R1_FB12_Pos: u32 = 12;
pub const CAN_F12R1_FB12_Msk: u32 = 4096;
pub const CAN_F12R1_FB12: u32 = 4096;
pub const CAN_F12R1_FB13_Pos: u32 = 13;
pub const CAN_F12R1_FB13_Msk: u32 = 8192;
pub const CAN_F12R1_FB13: u32 = 8192;
pub const CAN_F12R1_FB14_Pos: u32 = 14;
pub const CAN_F12R1_FB14_Msk: u32 = 16384;
pub const CAN_F12R1_FB14: u32 = 16384;
pub const CAN_F12R1_FB15_Pos: u32 = 15;
pub const CAN_F12R1_FB15_Msk: u32 = 32768;
pub const CAN_F12R1_FB15: u32 = 32768;
pub const CAN_F12R1_FB16_Pos: u32 = 16;
pub const CAN_F12R1_FB16_Msk: u32 = 65536;
pub const CAN_F12R1_FB16: u32 = 65536;
pub const CAN_F12R1_FB17_Pos: u32 = 17;
pub const CAN_F12R1_FB17_Msk: u32 = 131072;
pub const CAN_F12R1_FB17: u32 = 131072;
pub const CAN_F12R1_FB18_Pos: u32 = 18;
pub const CAN_F12R1_FB18_Msk: u32 = 262144;
pub const CAN_F12R1_FB18: u32 = 262144;
pub const CAN_F12R1_FB19_Pos: u32 = 19;
pub const CAN_F12R1_FB19_Msk: u32 = 524288;
pub const CAN_F12R1_FB19: u32 = 524288;
pub const CAN_F12R1_FB20_Pos: u32 = 20;
pub const CAN_F12R1_FB20_Msk: u32 = 1048576;
pub const CAN_F12R1_FB20: u32 = 1048576;
pub const CAN_F12R1_FB21_Pos: u32 = 21;
pub const CAN_F12R1_FB21_Msk: u32 = 2097152;
pub const CAN_F12R1_FB21: u32 = 2097152;
pub const CAN_F12R1_FB22_Pos: u32 = 22;
pub const CAN_F12R1_FB22_Msk: u32 = 4194304;
pub const CAN_F12R1_FB22: u32 = 4194304;
pub const CAN_F12R1_FB23_Pos: u32 = 23;
pub const CAN_F12R1_FB23_Msk: u32 = 8388608;
pub const CAN_F12R1_FB23: u32 = 8388608;
pub const CAN_F12R1_FB24_Pos: u32 = 24;
pub const CAN_F12R1_FB24_Msk: u32 = 16777216;
pub const CAN_F12R1_FB24: u32 = 16777216;
pub const CAN_F12R1_FB25_Pos: u32 = 25;
pub const CAN_F12R1_FB25_Msk: u32 = 33554432;
pub const CAN_F12R1_FB25: u32 = 33554432;
pub const CAN_F12R1_FB26_Pos: u32 = 26;
pub const CAN_F12R1_FB26_Msk: u32 = 67108864;
pub const CAN_F12R1_FB26: u32 = 67108864;
pub const CAN_F12R1_FB27_Pos: u32 = 27;
pub const CAN_F12R1_FB27_Msk: u32 = 134217728;
pub const CAN_F12R1_FB27: u32 = 134217728;
pub const CAN_F12R1_FB28_Pos: u32 = 28;
pub const CAN_F12R1_FB28_Msk: u32 = 268435456;
pub const CAN_F12R1_FB28: u32 = 268435456;
pub const CAN_F12R1_FB29_Pos: u32 = 29;
pub const CAN_F12R1_FB29_Msk: u32 = 536870912;
pub const CAN_F12R1_FB29: u32 = 536870912;
pub const CAN_F12R1_FB30_Pos: u32 = 30;
pub const CAN_F12R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F12R1_FB30: u32 = 1073741824;
pub const CAN_F12R1_FB31_Pos: u32 = 31;
pub const CAN_F12R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F12R1_FB31: u32 = 2147483648;
pub const CAN_F13R1_FB0_Pos: u32 = 0;
pub const CAN_F13R1_FB0_Msk: u32 = 1;
pub const CAN_F13R1_FB0: u32 = 1;
pub const CAN_F13R1_FB1_Pos: u32 = 1;
pub const CAN_F13R1_FB1_Msk: u32 = 2;
pub const CAN_F13R1_FB1: u32 = 2;
pub const CAN_F13R1_FB2_Pos: u32 = 2;
pub const CAN_F13R1_FB2_Msk: u32 = 4;
pub const CAN_F13R1_FB2: u32 = 4;
pub const CAN_F13R1_FB3_Pos: u32 = 3;
pub const CAN_F13R1_FB3_Msk: u32 = 8;
pub const CAN_F13R1_FB3: u32 = 8;
pub const CAN_F13R1_FB4_Pos: u32 = 4;
pub const CAN_F13R1_FB4_Msk: u32 = 16;
pub const CAN_F13R1_FB4: u32 = 16;
pub const CAN_F13R1_FB5_Pos: u32 = 5;
pub const CAN_F13R1_FB5_Msk: u32 = 32;
pub const CAN_F13R1_FB5: u32 = 32;
pub const CAN_F13R1_FB6_Pos: u32 = 6;
pub const CAN_F13R1_FB6_Msk: u32 = 64;
pub const CAN_F13R1_FB6: u32 = 64;
pub const CAN_F13R1_FB7_Pos: u32 = 7;
pub const CAN_F13R1_FB7_Msk: u32 = 128;
pub const CAN_F13R1_FB7: u32 = 128;
pub const CAN_F13R1_FB8_Pos: u32 = 8;
pub const CAN_F13R1_FB8_Msk: u32 = 256;
pub const CAN_F13R1_FB8: u32 = 256;
pub const CAN_F13R1_FB9_Pos: u32 = 9;
pub const CAN_F13R1_FB9_Msk: u32 = 512;
pub const CAN_F13R1_FB9: u32 = 512;
pub const CAN_F13R1_FB10_Pos: u32 = 10;
pub const CAN_F13R1_FB10_Msk: u32 = 1024;
pub const CAN_F13R1_FB10: u32 = 1024;
pub const CAN_F13R1_FB11_Pos: u32 = 11;
pub const CAN_F13R1_FB11_Msk: u32 = 2048;
pub const CAN_F13R1_FB11: u32 = 2048;
pub const CAN_F13R1_FB12_Pos: u32 = 12;
pub const CAN_F13R1_FB12_Msk: u32 = 4096;
pub const CAN_F13R1_FB12: u32 = 4096;
pub const CAN_F13R1_FB13_Pos: u32 = 13;
pub const CAN_F13R1_FB13_Msk: u32 = 8192;
pub const CAN_F13R1_FB13: u32 = 8192;
pub const CAN_F13R1_FB14_Pos: u32 = 14;
pub const CAN_F13R1_FB14_Msk: u32 = 16384;
pub const CAN_F13R1_FB14: u32 = 16384;
pub const CAN_F13R1_FB15_Pos: u32 = 15;
pub const CAN_F13R1_FB15_Msk: u32 = 32768;
pub const CAN_F13R1_FB15: u32 = 32768;
pub const CAN_F13R1_FB16_Pos: u32 = 16;
pub const CAN_F13R1_FB16_Msk: u32 = 65536;
pub const CAN_F13R1_FB16: u32 = 65536;
pub const CAN_F13R1_FB17_Pos: u32 = 17;
pub const CAN_F13R1_FB17_Msk: u32 = 131072;
pub const CAN_F13R1_FB17: u32 = 131072;
pub const CAN_F13R1_FB18_Pos: u32 = 18;
pub const CAN_F13R1_FB18_Msk: u32 = 262144;
pub const CAN_F13R1_FB18: u32 = 262144;
pub const CAN_F13R1_FB19_Pos: u32 = 19;
pub const CAN_F13R1_FB19_Msk: u32 = 524288;
pub const CAN_F13R1_FB19: u32 = 524288;
pub const CAN_F13R1_FB20_Pos: u32 = 20;
pub const CAN_F13R1_FB20_Msk: u32 = 1048576;
pub const CAN_F13R1_FB20: u32 = 1048576;
pub const CAN_F13R1_FB21_Pos: u32 = 21;
pub const CAN_F13R1_FB21_Msk: u32 = 2097152;
pub const CAN_F13R1_FB21: u32 = 2097152;
pub const CAN_F13R1_FB22_Pos: u32 = 22;
pub const CAN_F13R1_FB22_Msk: u32 = 4194304;
pub const CAN_F13R1_FB22: u32 = 4194304;
pub const CAN_F13R1_FB23_Pos: u32 = 23;
pub const CAN_F13R1_FB23_Msk: u32 = 8388608;
pub const CAN_F13R1_FB23: u32 = 8388608;
pub const CAN_F13R1_FB24_Pos: u32 = 24;
pub const CAN_F13R1_FB24_Msk: u32 = 16777216;
pub const CAN_F13R1_FB24: u32 = 16777216;
pub const CAN_F13R1_FB25_Pos: u32 = 25;
pub const CAN_F13R1_FB25_Msk: u32 = 33554432;
pub const CAN_F13R1_FB25: u32 = 33554432;
pub const CAN_F13R1_FB26_Pos: u32 = 26;
pub const CAN_F13R1_FB26_Msk: u32 = 67108864;
pub const CAN_F13R1_FB26: u32 = 67108864;
pub const CAN_F13R1_FB27_Pos: u32 = 27;
pub const CAN_F13R1_FB27_Msk: u32 = 134217728;
pub const CAN_F13R1_FB27: u32 = 134217728;
pub const CAN_F13R1_FB28_Pos: u32 = 28;
pub const CAN_F13R1_FB28_Msk: u32 = 268435456;
pub const CAN_F13R1_FB28: u32 = 268435456;
pub const CAN_F13R1_FB29_Pos: u32 = 29;
pub const CAN_F13R1_FB29_Msk: u32 = 536870912;
pub const CAN_F13R1_FB29: u32 = 536870912;
pub const CAN_F13R1_FB30_Pos: u32 = 30;
pub const CAN_F13R1_FB30_Msk: u32 = 1073741824;
pub const CAN_F13R1_FB30: u32 = 1073741824;
pub const CAN_F13R1_FB31_Pos: u32 = 31;
pub const CAN_F13R1_FB31_Msk: u32 = 2147483648;
pub const CAN_F13R1_FB31: u32 = 2147483648;
pub const CAN_F0R2_FB0_Pos: u32 = 0;
pub const CAN_F0R2_FB0_Msk: u32 = 1;
pub const CAN_F0R2_FB0: u32 = 1;
pub const CAN_F0R2_FB1_Pos: u32 = 1;
pub const CAN_F0R2_FB1_Msk: u32 = 2;
pub const CAN_F0R2_FB1: u32 = 2;
pub const CAN_F0R2_FB2_Pos: u32 = 2;
pub const CAN_F0R2_FB2_Msk: u32 = 4;
pub const CAN_F0R2_FB2: u32 = 4;
pub const CAN_F0R2_FB3_Pos: u32 = 3;
pub const CAN_F0R2_FB3_Msk: u32 = 8;
pub const CAN_F0R2_FB3: u32 = 8;
pub const CAN_F0R2_FB4_Pos: u32 = 4;
pub const CAN_F0R2_FB4_Msk: u32 = 16;
pub const CAN_F0R2_FB4: u32 = 16;
pub const CAN_F0R2_FB5_Pos: u32 = 5;
pub const CAN_F0R2_FB5_Msk: u32 = 32;
pub const CAN_F0R2_FB5: u32 = 32;
pub const CAN_F0R2_FB6_Pos: u32 = 6;
pub const CAN_F0R2_FB6_Msk: u32 = 64;
pub const CAN_F0R2_FB6: u32 = 64;
pub const CAN_F0R2_FB7_Pos: u32 = 7;
pub const CAN_F0R2_FB7_Msk: u32 = 128;
pub const CAN_F0R2_FB7: u32 = 128;
pub const CAN_F0R2_FB8_Pos: u32 = 8;
pub const CAN_F0R2_FB8_Msk: u32 = 256;
pub const CAN_F0R2_FB8: u32 = 256;
pub const CAN_F0R2_FB9_Pos: u32 = 9;
pub const CAN_F0R2_FB9_Msk: u32 = 512;
pub const CAN_F0R2_FB9: u32 = 512;
pub const CAN_F0R2_FB10_Pos: u32 = 10;
pub const CAN_F0R2_FB10_Msk: u32 = 1024;
pub const CAN_F0R2_FB10: u32 = 1024;
pub const CAN_F0R2_FB11_Pos: u32 = 11;
pub const CAN_F0R2_FB11_Msk: u32 = 2048;
pub const CAN_F0R2_FB11: u32 = 2048;
pub const CAN_F0R2_FB12_Pos: u32 = 12;
pub const CAN_F0R2_FB12_Msk: u32 = 4096;
pub const CAN_F0R2_FB12: u32 = 4096;
pub const CAN_F0R2_FB13_Pos: u32 = 13;
pub const CAN_F0R2_FB13_Msk: u32 = 8192;
pub const CAN_F0R2_FB13: u32 = 8192;
pub const CAN_F0R2_FB14_Pos: u32 = 14;
pub const CAN_F0R2_FB14_Msk: u32 = 16384;
pub const CAN_F0R2_FB14: u32 = 16384;
pub const CAN_F0R2_FB15_Pos: u32 = 15;
pub const CAN_F0R2_FB15_Msk: u32 = 32768;
pub const CAN_F0R2_FB15: u32 = 32768;
pub const CAN_F0R2_FB16_Pos: u32 = 16;
pub const CAN_F0R2_FB16_Msk: u32 = 65536;
pub const CAN_F0R2_FB16: u32 = 65536;
pub const CAN_F0R2_FB17_Pos: u32 = 17;
pub const CAN_F0R2_FB17_Msk: u32 = 131072;
pub const CAN_F0R2_FB17: u32 = 131072;
pub const CAN_F0R2_FB18_Pos: u32 = 18;
pub const CAN_F0R2_FB18_Msk: u32 = 262144;
pub const CAN_F0R2_FB18: u32 = 262144;
pub const CAN_F0R2_FB19_Pos: u32 = 19;
pub const CAN_F0R2_FB19_Msk: u32 = 524288;
pub const CAN_F0R2_FB19: u32 = 524288;
pub const CAN_F0R2_FB20_Pos: u32 = 20;
pub const CAN_F0R2_FB20_Msk: u32 = 1048576;
pub const CAN_F0R2_FB20: u32 = 1048576;
pub const CAN_F0R2_FB21_Pos: u32 = 21;
pub const CAN_F0R2_FB21_Msk: u32 = 2097152;
pub const CAN_F0R2_FB21: u32 = 2097152;
pub const CAN_F0R2_FB22_Pos: u32 = 22;
pub const CAN_F0R2_FB22_Msk: u32 = 4194304;
pub const CAN_F0R2_FB22: u32 = 4194304;
pub const CAN_F0R2_FB23_Pos: u32 = 23;
pub const CAN_F0R2_FB23_Msk: u32 = 8388608;
pub const CAN_F0R2_FB23: u32 = 8388608;
pub const CAN_F0R2_FB24_Pos: u32 = 24;
pub const CAN_F0R2_FB24_Msk: u32 = 16777216;
pub const CAN_F0R2_FB24: u32 = 16777216;
pub const CAN_F0R2_FB25_Pos: u32 = 25;
pub const CAN_F0R2_FB25_Msk: u32 = 33554432;
pub const CAN_F0R2_FB25: u32 = 33554432;
pub const CAN_F0R2_FB26_Pos: u32 = 26;
pub const CAN_F0R2_FB26_Msk: u32 = 67108864;
pub const CAN_F0R2_FB26: u32 = 67108864;
pub const CAN_F0R2_FB27_Pos: u32 = 27;
pub const CAN_F0R2_FB27_Msk: u32 = 134217728;
pub const CAN_F0R2_FB27: u32 = 134217728;
pub const CAN_F0R2_FB28_Pos: u32 = 28;
pub const CAN_F0R2_FB28_Msk: u32 = 268435456;
pub const CAN_F0R2_FB28: u32 = 268435456;
pub const CAN_F0R2_FB29_Pos: u32 = 29;
pub const CAN_F0R2_FB29_Msk: u32 = 536870912;
pub const CAN_F0R2_FB29: u32 = 536870912;
pub const CAN_F0R2_FB30_Pos: u32 = 30;
pub const CAN_F0R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F0R2_FB30: u32 = 1073741824;
pub const CAN_F0R2_FB31_Pos: u32 = 31;
pub const CAN_F0R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F0R2_FB31: u32 = 2147483648;
pub const CAN_F1R2_FB0_Pos: u32 = 0;
pub const CAN_F1R2_FB0_Msk: u32 = 1;
pub const CAN_F1R2_FB0: u32 = 1;
pub const CAN_F1R2_FB1_Pos: u32 = 1;
pub const CAN_F1R2_FB1_Msk: u32 = 2;
pub const CAN_F1R2_FB1: u32 = 2;
pub const CAN_F1R2_FB2_Pos: u32 = 2;
pub const CAN_F1R2_FB2_Msk: u32 = 4;
pub const CAN_F1R2_FB2: u32 = 4;
pub const CAN_F1R2_FB3_Pos: u32 = 3;
pub const CAN_F1R2_FB3_Msk: u32 = 8;
pub const CAN_F1R2_FB3: u32 = 8;
pub const CAN_F1R2_FB4_Pos: u32 = 4;
pub const CAN_F1R2_FB4_Msk: u32 = 16;
pub const CAN_F1R2_FB4: u32 = 16;
pub const CAN_F1R2_FB5_Pos: u32 = 5;
pub const CAN_F1R2_FB5_Msk: u32 = 32;
pub const CAN_F1R2_FB5: u32 = 32;
pub const CAN_F1R2_FB6_Pos: u32 = 6;
pub const CAN_F1R2_FB6_Msk: u32 = 64;
pub const CAN_F1R2_FB6: u32 = 64;
pub const CAN_F1R2_FB7_Pos: u32 = 7;
pub const CAN_F1R2_FB7_Msk: u32 = 128;
pub const CAN_F1R2_FB7: u32 = 128;
pub const CAN_F1R2_FB8_Pos: u32 = 8;
pub const CAN_F1R2_FB8_Msk: u32 = 256;
pub const CAN_F1R2_FB8: u32 = 256;
pub const CAN_F1R2_FB9_Pos: u32 = 9;
pub const CAN_F1R2_FB9_Msk: u32 = 512;
pub const CAN_F1R2_FB9: u32 = 512;
pub const CAN_F1R2_FB10_Pos: u32 = 10;
pub const CAN_F1R2_FB10_Msk: u32 = 1024;
pub const CAN_F1R2_FB10: u32 = 1024;
pub const CAN_F1R2_FB11_Pos: u32 = 11;
pub const CAN_F1R2_FB11_Msk: u32 = 2048;
pub const CAN_F1R2_FB11: u32 = 2048;
pub const CAN_F1R2_FB12_Pos: u32 = 12;
pub const CAN_F1R2_FB12_Msk: u32 = 4096;
pub const CAN_F1R2_FB12: u32 = 4096;
pub const CAN_F1R2_FB13_Pos: u32 = 13;
pub const CAN_F1R2_FB13_Msk: u32 = 8192;
pub const CAN_F1R2_FB13: u32 = 8192;
pub const CAN_F1R2_FB14_Pos: u32 = 14;
pub const CAN_F1R2_FB14_Msk: u32 = 16384;
pub const CAN_F1R2_FB14: u32 = 16384;
pub const CAN_F1R2_FB15_Pos: u32 = 15;
pub const CAN_F1R2_FB15_Msk: u32 = 32768;
pub const CAN_F1R2_FB15: u32 = 32768;
pub const CAN_F1R2_FB16_Pos: u32 = 16;
pub const CAN_F1R2_FB16_Msk: u32 = 65536;
pub const CAN_F1R2_FB16: u32 = 65536;
pub const CAN_F1R2_FB17_Pos: u32 = 17;
pub const CAN_F1R2_FB17_Msk: u32 = 131072;
pub const CAN_F1R2_FB17: u32 = 131072;
pub const CAN_F1R2_FB18_Pos: u32 = 18;
pub const CAN_F1R2_FB18_Msk: u32 = 262144;
pub const CAN_F1R2_FB18: u32 = 262144;
pub const CAN_F1R2_FB19_Pos: u32 = 19;
pub const CAN_F1R2_FB19_Msk: u32 = 524288;
pub const CAN_F1R2_FB19: u32 = 524288;
pub const CAN_F1R2_FB20_Pos: u32 = 20;
pub const CAN_F1R2_FB20_Msk: u32 = 1048576;
pub const CAN_F1R2_FB20: u32 = 1048576;
pub const CAN_F1R2_FB21_Pos: u32 = 21;
pub const CAN_F1R2_FB21_Msk: u32 = 2097152;
pub const CAN_F1R2_FB21: u32 = 2097152;
pub const CAN_F1R2_FB22_Pos: u32 = 22;
pub const CAN_F1R2_FB22_Msk: u32 = 4194304;
pub const CAN_F1R2_FB22: u32 = 4194304;
pub const CAN_F1R2_FB23_Pos: u32 = 23;
pub const CAN_F1R2_FB23_Msk: u32 = 8388608;
pub const CAN_F1R2_FB23: u32 = 8388608;
pub const CAN_F1R2_FB24_Pos: u32 = 24;
pub const CAN_F1R2_FB24_Msk: u32 = 16777216;
pub const CAN_F1R2_FB24: u32 = 16777216;
pub const CAN_F1R2_FB25_Pos: u32 = 25;
pub const CAN_F1R2_FB25_Msk: u32 = 33554432;
pub const CAN_F1R2_FB25: u32 = 33554432;
pub const CAN_F1R2_FB26_Pos: u32 = 26;
pub const CAN_F1R2_FB26_Msk: u32 = 67108864;
pub const CAN_F1R2_FB26: u32 = 67108864;
pub const CAN_F1R2_FB27_Pos: u32 = 27;
pub const CAN_F1R2_FB27_Msk: u32 = 134217728;
pub const CAN_F1R2_FB27: u32 = 134217728;
pub const CAN_F1R2_FB28_Pos: u32 = 28;
pub const CAN_F1R2_FB28_Msk: u32 = 268435456;
pub const CAN_F1R2_FB28: u32 = 268435456;
pub const CAN_F1R2_FB29_Pos: u32 = 29;
pub const CAN_F1R2_FB29_Msk: u32 = 536870912;
pub const CAN_F1R2_FB29: u32 = 536870912;
pub const CAN_F1R2_FB30_Pos: u32 = 30;
pub const CAN_F1R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F1R2_FB30: u32 = 1073741824;
pub const CAN_F1R2_FB31_Pos: u32 = 31;
pub const CAN_F1R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F1R2_FB31: u32 = 2147483648;
pub const CAN_F2R2_FB0_Pos: u32 = 0;
pub const CAN_F2R2_FB0_Msk: u32 = 1;
pub const CAN_F2R2_FB0: u32 = 1;
pub const CAN_F2R2_FB1_Pos: u32 = 1;
pub const CAN_F2R2_FB1_Msk: u32 = 2;
pub const CAN_F2R2_FB1: u32 = 2;
pub const CAN_F2R2_FB2_Pos: u32 = 2;
pub const CAN_F2R2_FB2_Msk: u32 = 4;
pub const CAN_F2R2_FB2: u32 = 4;
pub const CAN_F2R2_FB3_Pos: u32 = 3;
pub const CAN_F2R2_FB3_Msk: u32 = 8;
pub const CAN_F2R2_FB3: u32 = 8;
pub const CAN_F2R2_FB4_Pos: u32 = 4;
pub const CAN_F2R2_FB4_Msk: u32 = 16;
pub const CAN_F2R2_FB4: u32 = 16;
pub const CAN_F2R2_FB5_Pos: u32 = 5;
pub const CAN_F2R2_FB5_Msk: u32 = 32;
pub const CAN_F2R2_FB5: u32 = 32;
pub const CAN_F2R2_FB6_Pos: u32 = 6;
pub const CAN_F2R2_FB6_Msk: u32 = 64;
pub const CAN_F2R2_FB6: u32 = 64;
pub const CAN_F2R2_FB7_Pos: u32 = 7;
pub const CAN_F2R2_FB7_Msk: u32 = 128;
pub const CAN_F2R2_FB7: u32 = 128;
pub const CAN_F2R2_FB8_Pos: u32 = 8;
pub const CAN_F2R2_FB8_Msk: u32 = 256;
pub const CAN_F2R2_FB8: u32 = 256;
pub const CAN_F2R2_FB9_Pos: u32 = 9;
pub const CAN_F2R2_FB9_Msk: u32 = 512;
pub const CAN_F2R2_FB9: u32 = 512;
pub const CAN_F2R2_FB10_Pos: u32 = 10;
pub const CAN_F2R2_FB10_Msk: u32 = 1024;
pub const CAN_F2R2_FB10: u32 = 1024;
pub const CAN_F2R2_FB11_Pos: u32 = 11;
pub const CAN_F2R2_FB11_Msk: u32 = 2048;
pub const CAN_F2R2_FB11: u32 = 2048;
pub const CAN_F2R2_FB12_Pos: u32 = 12;
pub const CAN_F2R2_FB12_Msk: u32 = 4096;
pub const CAN_F2R2_FB12: u32 = 4096;
pub const CAN_F2R2_FB13_Pos: u32 = 13;
pub const CAN_F2R2_FB13_Msk: u32 = 8192;
pub const CAN_F2R2_FB13: u32 = 8192;
pub const CAN_F2R2_FB14_Pos: u32 = 14;
pub const CAN_F2R2_FB14_Msk: u32 = 16384;
pub const CAN_F2R2_FB14: u32 = 16384;
pub const CAN_F2R2_FB15_Pos: u32 = 15;
pub const CAN_F2R2_FB15_Msk: u32 = 32768;
pub const CAN_F2R2_FB15: u32 = 32768;
pub const CAN_F2R2_FB16_Pos: u32 = 16;
pub const CAN_F2R2_FB16_Msk: u32 = 65536;
pub const CAN_F2R2_FB16: u32 = 65536;
pub const CAN_F2R2_FB17_Pos: u32 = 17;
pub const CAN_F2R2_FB17_Msk: u32 = 131072;
pub const CAN_F2R2_FB17: u32 = 131072;
pub const CAN_F2R2_FB18_Pos: u32 = 18;
pub const CAN_F2R2_FB18_Msk: u32 = 262144;
pub const CAN_F2R2_FB18: u32 = 262144;
pub const CAN_F2R2_FB19_Pos: u32 = 19;
pub const CAN_F2R2_FB19_Msk: u32 = 524288;
pub const CAN_F2R2_FB19: u32 = 524288;
pub const CAN_F2R2_FB20_Pos: u32 = 20;
pub const CAN_F2R2_FB20_Msk: u32 = 1048576;
pub const CAN_F2R2_FB20: u32 = 1048576;
pub const CAN_F2R2_FB21_Pos: u32 = 21;
pub const CAN_F2R2_FB21_Msk: u32 = 2097152;
pub const CAN_F2R2_FB21: u32 = 2097152;
pub const CAN_F2R2_FB22_Pos: u32 = 22;
pub const CAN_F2R2_FB22_Msk: u32 = 4194304;
pub const CAN_F2R2_FB22: u32 = 4194304;
pub const CAN_F2R2_FB23_Pos: u32 = 23;
pub const CAN_F2R2_FB23_Msk: u32 = 8388608;
pub const CAN_F2R2_FB23: u32 = 8388608;
pub const CAN_F2R2_FB24_Pos: u32 = 24;
pub const CAN_F2R2_FB24_Msk: u32 = 16777216;
pub const CAN_F2R2_FB24: u32 = 16777216;
pub const CAN_F2R2_FB25_Pos: u32 = 25;
pub const CAN_F2R2_FB25_Msk: u32 = 33554432;
pub const CAN_F2R2_FB25: u32 = 33554432;
pub const CAN_F2R2_FB26_Pos: u32 = 26;
pub const CAN_F2R2_FB26_Msk: u32 = 67108864;
pub const CAN_F2R2_FB26: u32 = 67108864;
pub const CAN_F2R2_FB27_Pos: u32 = 27;
pub const CAN_F2R2_FB27_Msk: u32 = 134217728;
pub const CAN_F2R2_FB27: u32 = 134217728;
pub const CAN_F2R2_FB28_Pos: u32 = 28;
pub const CAN_F2R2_FB28_Msk: u32 = 268435456;
pub const CAN_F2R2_FB28: u32 = 268435456;
pub const CAN_F2R2_FB29_Pos: u32 = 29;
pub const CAN_F2R2_FB29_Msk: u32 = 536870912;
pub const CAN_F2R2_FB29: u32 = 536870912;
pub const CAN_F2R2_FB30_Pos: u32 = 30;
pub const CAN_F2R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F2R2_FB30: u32 = 1073741824;
pub const CAN_F2R2_FB31_Pos: u32 = 31;
pub const CAN_F2R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F2R2_FB31: u32 = 2147483648;
pub const CAN_F3R2_FB0_Pos: u32 = 0;
pub const CAN_F3R2_FB0_Msk: u32 = 1;
pub const CAN_F3R2_FB0: u32 = 1;
pub const CAN_F3R2_FB1_Pos: u32 = 1;
pub const CAN_F3R2_FB1_Msk: u32 = 2;
pub const CAN_F3R2_FB1: u32 = 2;
pub const CAN_F3R2_FB2_Pos: u32 = 2;
pub const CAN_F3R2_FB2_Msk: u32 = 4;
pub const CAN_F3R2_FB2: u32 = 4;
pub const CAN_F3R2_FB3_Pos: u32 = 3;
pub const CAN_F3R2_FB3_Msk: u32 = 8;
pub const CAN_F3R2_FB3: u32 = 8;
pub const CAN_F3R2_FB4_Pos: u32 = 4;
pub const CAN_F3R2_FB4_Msk: u32 = 16;
pub const CAN_F3R2_FB4: u32 = 16;
pub const CAN_F3R2_FB5_Pos: u32 = 5;
pub const CAN_F3R2_FB5_Msk: u32 = 32;
pub const CAN_F3R2_FB5: u32 = 32;
pub const CAN_F3R2_FB6_Pos: u32 = 6;
pub const CAN_F3R2_FB6_Msk: u32 = 64;
pub const CAN_F3R2_FB6: u32 = 64;
pub const CAN_F3R2_FB7_Pos: u32 = 7;
pub const CAN_F3R2_FB7_Msk: u32 = 128;
pub const CAN_F3R2_FB7: u32 = 128;
pub const CAN_F3R2_FB8_Pos: u32 = 8;
pub const CAN_F3R2_FB8_Msk: u32 = 256;
pub const CAN_F3R2_FB8: u32 = 256;
pub const CAN_F3R2_FB9_Pos: u32 = 9;
pub const CAN_F3R2_FB9_Msk: u32 = 512;
pub const CAN_F3R2_FB9: u32 = 512;
pub const CAN_F3R2_FB10_Pos: u32 = 10;
pub const CAN_F3R2_FB10_Msk: u32 = 1024;
pub const CAN_F3R2_FB10: u32 = 1024;
pub const CAN_F3R2_FB11_Pos: u32 = 11;
pub const CAN_F3R2_FB11_Msk: u32 = 2048;
pub const CAN_F3R2_FB11: u32 = 2048;
pub const CAN_F3R2_FB12_Pos: u32 = 12;
pub const CAN_F3R2_FB12_Msk: u32 = 4096;
pub const CAN_F3R2_FB12: u32 = 4096;
pub const CAN_F3R2_FB13_Pos: u32 = 13;
pub const CAN_F3R2_FB13_Msk: u32 = 8192;
pub const CAN_F3R2_FB13: u32 = 8192;
pub const CAN_F3R2_FB14_Pos: u32 = 14;
pub const CAN_F3R2_FB14_Msk: u32 = 16384;
pub const CAN_F3R2_FB14: u32 = 16384;
pub const CAN_F3R2_FB15_Pos: u32 = 15;
pub const CAN_F3R2_FB15_Msk: u32 = 32768;
pub const CAN_F3R2_FB15: u32 = 32768;
pub const CAN_F3R2_FB16_Pos: u32 = 16;
pub const CAN_F3R2_FB16_Msk: u32 = 65536;
pub const CAN_F3R2_FB16: u32 = 65536;
pub const CAN_F3R2_FB17_Pos: u32 = 17;
pub const CAN_F3R2_FB17_Msk: u32 = 131072;
pub const CAN_F3R2_FB17: u32 = 131072;
pub const CAN_F3R2_FB18_Pos: u32 = 18;
pub const CAN_F3R2_FB18_Msk: u32 = 262144;
pub const CAN_F3R2_FB18: u32 = 262144;
pub const CAN_F3R2_FB19_Pos: u32 = 19;
pub const CAN_F3R2_FB19_Msk: u32 = 524288;
pub const CAN_F3R2_FB19: u32 = 524288;
pub const CAN_F3R2_FB20_Pos: u32 = 20;
pub const CAN_F3R2_FB20_Msk: u32 = 1048576;
pub const CAN_F3R2_FB20: u32 = 1048576;
pub const CAN_F3R2_FB21_Pos: u32 = 21;
pub const CAN_F3R2_FB21_Msk: u32 = 2097152;
pub const CAN_F3R2_FB21: u32 = 2097152;
pub const CAN_F3R2_FB22_Pos: u32 = 22;
pub const CAN_F3R2_FB22_Msk: u32 = 4194304;
pub const CAN_F3R2_FB22: u32 = 4194304;
pub const CAN_F3R2_FB23_Pos: u32 = 23;
pub const CAN_F3R2_FB23_Msk: u32 = 8388608;
pub const CAN_F3R2_FB23: u32 = 8388608;
pub const CAN_F3R2_FB24_Pos: u32 = 24;
pub const CAN_F3R2_FB24_Msk: u32 = 16777216;
pub const CAN_F3R2_FB24: u32 = 16777216;
pub const CAN_F3R2_FB25_Pos: u32 = 25;
pub const CAN_F3R2_FB25_Msk: u32 = 33554432;
pub const CAN_F3R2_FB25: u32 = 33554432;
pub const CAN_F3R2_FB26_Pos: u32 = 26;
pub const CAN_F3R2_FB26_Msk: u32 = 67108864;
pub const CAN_F3R2_FB26: u32 = 67108864;
pub const CAN_F3R2_FB27_Pos: u32 = 27;
pub const CAN_F3R2_FB27_Msk: u32 = 134217728;
pub const CAN_F3R2_FB27: u32 = 134217728;
pub const CAN_F3R2_FB28_Pos: u32 = 28;
pub const CAN_F3R2_FB28_Msk: u32 = 268435456;
pub const CAN_F3R2_FB28: u32 = 268435456;
pub const CAN_F3R2_FB29_Pos: u32 = 29;
pub const CAN_F3R2_FB29_Msk: u32 = 536870912;
pub const CAN_F3R2_FB29: u32 = 536870912;
pub const CAN_F3R2_FB30_Pos: u32 = 30;
pub const CAN_F3R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F3R2_FB30: u32 = 1073741824;
pub const CAN_F3R2_FB31_Pos: u32 = 31;
pub const CAN_F3R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F3R2_FB31: u32 = 2147483648;
pub const CAN_F4R2_FB0_Pos: u32 = 0;
pub const CAN_F4R2_FB0_Msk: u32 = 1;
pub const CAN_F4R2_FB0: u32 = 1;
pub const CAN_F4R2_FB1_Pos: u32 = 1;
pub const CAN_F4R2_FB1_Msk: u32 = 2;
pub const CAN_F4R2_FB1: u32 = 2;
pub const CAN_F4R2_FB2_Pos: u32 = 2;
pub const CAN_F4R2_FB2_Msk: u32 = 4;
pub const CAN_F4R2_FB2: u32 = 4;
pub const CAN_F4R2_FB3_Pos: u32 = 3;
pub const CAN_F4R2_FB3_Msk: u32 = 8;
pub const CAN_F4R2_FB3: u32 = 8;
pub const CAN_F4R2_FB4_Pos: u32 = 4;
pub const CAN_F4R2_FB4_Msk: u32 = 16;
pub const CAN_F4R2_FB4: u32 = 16;
pub const CAN_F4R2_FB5_Pos: u32 = 5;
pub const CAN_F4R2_FB5_Msk: u32 = 32;
pub const CAN_F4R2_FB5: u32 = 32;
pub const CAN_F4R2_FB6_Pos: u32 = 6;
pub const CAN_F4R2_FB6_Msk: u32 = 64;
pub const CAN_F4R2_FB6: u32 = 64;
pub const CAN_F4R2_FB7_Pos: u32 = 7;
pub const CAN_F4R2_FB7_Msk: u32 = 128;
pub const CAN_F4R2_FB7: u32 = 128;
pub const CAN_F4R2_FB8_Pos: u32 = 8;
pub const CAN_F4R2_FB8_Msk: u32 = 256;
pub const CAN_F4R2_FB8: u32 = 256;
pub const CAN_F4R2_FB9_Pos: u32 = 9;
pub const CAN_F4R2_FB9_Msk: u32 = 512;
pub const CAN_F4R2_FB9: u32 = 512;
pub const CAN_F4R2_FB10_Pos: u32 = 10;
pub const CAN_F4R2_FB10_Msk: u32 = 1024;
pub const CAN_F4R2_FB10: u32 = 1024;
pub const CAN_F4R2_FB11_Pos: u32 = 11;
pub const CAN_F4R2_FB11_Msk: u32 = 2048;
pub const CAN_F4R2_FB11: u32 = 2048;
pub const CAN_F4R2_FB12_Pos: u32 = 12;
pub const CAN_F4R2_FB12_Msk: u32 = 4096;
pub const CAN_F4R2_FB12: u32 = 4096;
pub const CAN_F4R2_FB13_Pos: u32 = 13;
pub const CAN_F4R2_FB13_Msk: u32 = 8192;
pub const CAN_F4R2_FB13: u32 = 8192;
pub const CAN_F4R2_FB14_Pos: u32 = 14;
pub const CAN_F4R2_FB14_Msk: u32 = 16384;
pub const CAN_F4R2_FB14: u32 = 16384;
pub const CAN_F4R2_FB15_Pos: u32 = 15;
pub const CAN_F4R2_FB15_Msk: u32 = 32768;
pub const CAN_F4R2_FB15: u32 = 32768;
pub const CAN_F4R2_FB16_Pos: u32 = 16;
pub const CAN_F4R2_FB16_Msk: u32 = 65536;
pub const CAN_F4R2_FB16: u32 = 65536;
pub const CAN_F4R2_FB17_Pos: u32 = 17;
pub const CAN_F4R2_FB17_Msk: u32 = 131072;
pub const CAN_F4R2_FB17: u32 = 131072;
pub const CAN_F4R2_FB18_Pos: u32 = 18;
pub const CAN_F4R2_FB18_Msk: u32 = 262144;
pub const CAN_F4R2_FB18: u32 = 262144;
pub const CAN_F4R2_FB19_Pos: u32 = 19;
pub const CAN_F4R2_FB19_Msk: u32 = 524288;
pub const CAN_F4R2_FB19: u32 = 524288;
pub const CAN_F4R2_FB20_Pos: u32 = 20;
pub const CAN_F4R2_FB20_Msk: u32 = 1048576;
pub const CAN_F4R2_FB20: u32 = 1048576;
pub const CAN_F4R2_FB21_Pos: u32 = 21;
pub const CAN_F4R2_FB21_Msk: u32 = 2097152;
pub const CAN_F4R2_FB21: u32 = 2097152;
pub const CAN_F4R2_FB22_Pos: u32 = 22;
pub const CAN_F4R2_FB22_Msk: u32 = 4194304;
pub const CAN_F4R2_FB22: u32 = 4194304;
pub const CAN_F4R2_FB23_Pos: u32 = 23;
pub const CAN_F4R2_FB23_Msk: u32 = 8388608;
pub const CAN_F4R2_FB23: u32 = 8388608;
pub const CAN_F4R2_FB24_Pos: u32 = 24;
pub const CAN_F4R2_FB24_Msk: u32 = 16777216;
pub const CAN_F4R2_FB24: u32 = 16777216;
pub const CAN_F4R2_FB25_Pos: u32 = 25;
pub const CAN_F4R2_FB25_Msk: u32 = 33554432;
pub const CAN_F4R2_FB25: u32 = 33554432;
pub const CAN_F4R2_FB26_Pos: u32 = 26;
pub const CAN_F4R2_FB26_Msk: u32 = 67108864;
pub const CAN_F4R2_FB26: u32 = 67108864;
pub const CAN_F4R2_FB27_Pos: u32 = 27;
pub const CAN_F4R2_FB27_Msk: u32 = 134217728;
pub const CAN_F4R2_FB27: u32 = 134217728;
pub const CAN_F4R2_FB28_Pos: u32 = 28;
pub const CAN_F4R2_FB28_Msk: u32 = 268435456;
pub const CAN_F4R2_FB28: u32 = 268435456;
pub const CAN_F4R2_FB29_Pos: u32 = 29;
pub const CAN_F4R2_FB29_Msk: u32 = 536870912;
pub const CAN_F4R2_FB29: u32 = 536870912;
pub const CAN_F4R2_FB30_Pos: u32 = 30;
pub const CAN_F4R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F4R2_FB30: u32 = 1073741824;
pub const CAN_F4R2_FB31_Pos: u32 = 31;
pub const CAN_F4R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F4R2_FB31: u32 = 2147483648;
pub const CAN_F5R2_FB0_Pos: u32 = 0;
pub const CAN_F5R2_FB0_Msk: u32 = 1;
pub const CAN_F5R2_FB0: u32 = 1;
pub const CAN_F5R2_FB1_Pos: u32 = 1;
pub const CAN_F5R2_FB1_Msk: u32 = 2;
pub const CAN_F5R2_FB1: u32 = 2;
pub const CAN_F5R2_FB2_Pos: u32 = 2;
pub const CAN_F5R2_FB2_Msk: u32 = 4;
pub const CAN_F5R2_FB2: u32 = 4;
pub const CAN_F5R2_FB3_Pos: u32 = 3;
pub const CAN_F5R2_FB3_Msk: u32 = 8;
pub const CAN_F5R2_FB3: u32 = 8;
pub const CAN_F5R2_FB4_Pos: u32 = 4;
pub const CAN_F5R2_FB4_Msk: u32 = 16;
pub const CAN_F5R2_FB4: u32 = 16;
pub const CAN_F5R2_FB5_Pos: u32 = 5;
pub const CAN_F5R2_FB5_Msk: u32 = 32;
pub const CAN_F5R2_FB5: u32 = 32;
pub const CAN_F5R2_FB6_Pos: u32 = 6;
pub const CAN_F5R2_FB6_Msk: u32 = 64;
pub const CAN_F5R2_FB6: u32 = 64;
pub const CAN_F5R2_FB7_Pos: u32 = 7;
pub const CAN_F5R2_FB7_Msk: u32 = 128;
pub const CAN_F5R2_FB7: u32 = 128;
pub const CAN_F5R2_FB8_Pos: u32 = 8;
pub const CAN_F5R2_FB8_Msk: u32 = 256;
pub const CAN_F5R2_FB8: u32 = 256;
pub const CAN_F5R2_FB9_Pos: u32 = 9;
pub const CAN_F5R2_FB9_Msk: u32 = 512;
pub const CAN_F5R2_FB9: u32 = 512;
pub const CAN_F5R2_FB10_Pos: u32 = 10;
pub const CAN_F5R2_FB10_Msk: u32 = 1024;
pub const CAN_F5R2_FB10: u32 = 1024;
pub const CAN_F5R2_FB11_Pos: u32 = 11;
pub const CAN_F5R2_FB11_Msk: u32 = 2048;
pub const CAN_F5R2_FB11: u32 = 2048;
pub const CAN_F5R2_FB12_Pos: u32 = 12;
pub const CAN_F5R2_FB12_Msk: u32 = 4096;
pub const CAN_F5R2_FB12: u32 = 4096;
pub const CAN_F5R2_FB13_Pos: u32 = 13;
pub const CAN_F5R2_FB13_Msk: u32 = 8192;
pub const CAN_F5R2_FB13: u32 = 8192;
pub const CAN_F5R2_FB14_Pos: u32 = 14;
pub const CAN_F5R2_FB14_Msk: u32 = 16384;
pub const CAN_F5R2_FB14: u32 = 16384;
pub const CAN_F5R2_FB15_Pos: u32 = 15;
pub const CAN_F5R2_FB15_Msk: u32 = 32768;
pub const CAN_F5R2_FB15: u32 = 32768;
pub const CAN_F5R2_FB16_Pos: u32 = 16;
pub const CAN_F5R2_FB16_Msk: u32 = 65536;
pub const CAN_F5R2_FB16: u32 = 65536;
pub const CAN_F5R2_FB17_Pos: u32 = 17;
pub const CAN_F5R2_FB17_Msk: u32 = 131072;
pub const CAN_F5R2_FB17: u32 = 131072;
pub const CAN_F5R2_FB18_Pos: u32 = 18;
pub const CAN_F5R2_FB18_Msk: u32 = 262144;
pub const CAN_F5R2_FB18: u32 = 262144;
pub const CAN_F5R2_FB19_Pos: u32 = 19;
pub const CAN_F5R2_FB19_Msk: u32 = 524288;
pub const CAN_F5R2_FB19: u32 = 524288;
pub const CAN_F5R2_FB20_Pos: u32 = 20;
pub const CAN_F5R2_FB20_Msk: u32 = 1048576;
pub const CAN_F5R2_FB20: u32 = 1048576;
pub const CAN_F5R2_FB21_Pos: u32 = 21;
pub const CAN_F5R2_FB21_Msk: u32 = 2097152;
pub const CAN_F5R2_FB21: u32 = 2097152;
pub const CAN_F5R2_FB22_Pos: u32 = 22;
pub const CAN_F5R2_FB22_Msk: u32 = 4194304;
pub const CAN_F5R2_FB22: u32 = 4194304;
pub const CAN_F5R2_FB23_Pos: u32 = 23;
pub const CAN_F5R2_FB23_Msk: u32 = 8388608;
pub const CAN_F5R2_FB23: u32 = 8388608;
pub const CAN_F5R2_FB24_Pos: u32 = 24;
pub const CAN_F5R2_FB24_Msk: u32 = 16777216;
pub const CAN_F5R2_FB24: u32 = 16777216;
pub const CAN_F5R2_FB25_Pos: u32 = 25;
pub const CAN_F5R2_FB25_Msk: u32 = 33554432;
pub const CAN_F5R2_FB25: u32 = 33554432;
pub const CAN_F5R2_FB26_Pos: u32 = 26;
pub const CAN_F5R2_FB26_Msk: u32 = 67108864;
pub const CAN_F5R2_FB26: u32 = 67108864;
pub const CAN_F5R2_FB27_Pos: u32 = 27;
pub const CAN_F5R2_FB27_Msk: u32 = 134217728;
pub const CAN_F5R2_FB27: u32 = 134217728;
pub const CAN_F5R2_FB28_Pos: u32 = 28;
pub const CAN_F5R2_FB28_Msk: u32 = 268435456;
pub const CAN_F5R2_FB28: u32 = 268435456;
pub const CAN_F5R2_FB29_Pos: u32 = 29;
pub const CAN_F5R2_FB29_Msk: u32 = 536870912;
pub const CAN_F5R2_FB29: u32 = 536870912;
pub const CAN_F5R2_FB30_Pos: u32 = 30;
pub const CAN_F5R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F5R2_FB30: u32 = 1073741824;
pub const CAN_F5R2_FB31_Pos: u32 = 31;
pub const CAN_F5R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F5R2_FB31: u32 = 2147483648;
pub const CAN_F6R2_FB0_Pos: u32 = 0;
pub const CAN_F6R2_FB0_Msk: u32 = 1;
pub const CAN_F6R2_FB0: u32 = 1;
pub const CAN_F6R2_FB1_Pos: u32 = 1;
pub const CAN_F6R2_FB1_Msk: u32 = 2;
pub const CAN_F6R2_FB1: u32 = 2;
pub const CAN_F6R2_FB2_Pos: u32 = 2;
pub const CAN_F6R2_FB2_Msk: u32 = 4;
pub const CAN_F6R2_FB2: u32 = 4;
pub const CAN_F6R2_FB3_Pos: u32 = 3;
pub const CAN_F6R2_FB3_Msk: u32 = 8;
pub const CAN_F6R2_FB3: u32 = 8;
pub const CAN_F6R2_FB4_Pos: u32 = 4;
pub const CAN_F6R2_FB4_Msk: u32 = 16;
pub const CAN_F6R2_FB4: u32 = 16;
pub const CAN_F6R2_FB5_Pos: u32 = 5;
pub const CAN_F6R2_FB5_Msk: u32 = 32;
pub const CAN_F6R2_FB5: u32 = 32;
pub const CAN_F6R2_FB6_Pos: u32 = 6;
pub const CAN_F6R2_FB6_Msk: u32 = 64;
pub const CAN_F6R2_FB6: u32 = 64;
pub const CAN_F6R2_FB7_Pos: u32 = 7;
pub const CAN_F6R2_FB7_Msk: u32 = 128;
pub const CAN_F6R2_FB7: u32 = 128;
pub const CAN_F6R2_FB8_Pos: u32 = 8;
pub const CAN_F6R2_FB8_Msk: u32 = 256;
pub const CAN_F6R2_FB8: u32 = 256;
pub const CAN_F6R2_FB9_Pos: u32 = 9;
pub const CAN_F6R2_FB9_Msk: u32 = 512;
pub const CAN_F6R2_FB9: u32 = 512;
pub const CAN_F6R2_FB10_Pos: u32 = 10;
pub const CAN_F6R2_FB10_Msk: u32 = 1024;
pub const CAN_F6R2_FB10: u32 = 1024;
pub const CAN_F6R2_FB11_Pos: u32 = 11;
pub const CAN_F6R2_FB11_Msk: u32 = 2048;
pub const CAN_F6R2_FB11: u32 = 2048;
pub const CAN_F6R2_FB12_Pos: u32 = 12;
pub const CAN_F6R2_FB12_Msk: u32 = 4096;
pub const CAN_F6R2_FB12: u32 = 4096;
pub const CAN_F6R2_FB13_Pos: u32 = 13;
pub const CAN_F6R2_FB13_Msk: u32 = 8192;
pub const CAN_F6R2_FB13: u32 = 8192;
pub const CAN_F6R2_FB14_Pos: u32 = 14;
pub const CAN_F6R2_FB14_Msk: u32 = 16384;
pub const CAN_F6R2_FB14: u32 = 16384;
pub const CAN_F6R2_FB15_Pos: u32 = 15;
pub const CAN_F6R2_FB15_Msk: u32 = 32768;
pub const CAN_F6R2_FB15: u32 = 32768;
pub const CAN_F6R2_FB16_Pos: u32 = 16;
pub const CAN_F6R2_FB16_Msk: u32 = 65536;
pub const CAN_F6R2_FB16: u32 = 65536;
pub const CAN_F6R2_FB17_Pos: u32 = 17;
pub const CAN_F6R2_FB17_Msk: u32 = 131072;
pub const CAN_F6R2_FB17: u32 = 131072;
pub const CAN_F6R2_FB18_Pos: u32 = 18;
pub const CAN_F6R2_FB18_Msk: u32 = 262144;
pub const CAN_F6R2_FB18: u32 = 262144;
pub const CAN_F6R2_FB19_Pos: u32 = 19;
pub const CAN_F6R2_FB19_Msk: u32 = 524288;
pub const CAN_F6R2_FB19: u32 = 524288;
pub const CAN_F6R2_FB20_Pos: u32 = 20;
pub const CAN_F6R2_FB20_Msk: u32 = 1048576;
pub const CAN_F6R2_FB20: u32 = 1048576;
pub const CAN_F6R2_FB21_Pos: u32 = 21;
pub const CAN_F6R2_FB21_Msk: u32 = 2097152;
pub const CAN_F6R2_FB21: u32 = 2097152;
pub const CAN_F6R2_FB22_Pos: u32 = 22;
pub const CAN_F6R2_FB22_Msk: u32 = 4194304;
pub const CAN_F6R2_FB22: u32 = 4194304;
pub const CAN_F6R2_FB23_Pos: u32 = 23;
pub const CAN_F6R2_FB23_Msk: u32 = 8388608;
pub const CAN_F6R2_FB23: u32 = 8388608;
pub const CAN_F6R2_FB24_Pos: u32 = 24;
pub const CAN_F6R2_FB24_Msk: u32 = 16777216;
pub const CAN_F6R2_FB24: u32 = 16777216;
pub const CAN_F6R2_FB25_Pos: u32 = 25;
pub const CAN_F6R2_FB25_Msk: u32 = 33554432;
pub const CAN_F6R2_FB25: u32 = 33554432;
pub const CAN_F6R2_FB26_Pos: u32 = 26;
pub const CAN_F6R2_FB26_Msk: u32 = 67108864;
pub const CAN_F6R2_FB26: u32 = 67108864;
pub const CAN_F6R2_FB27_Pos: u32 = 27;
pub const CAN_F6R2_FB27_Msk: u32 = 134217728;
pub const CAN_F6R2_FB27: u32 = 134217728;
pub const CAN_F6R2_FB28_Pos: u32 = 28;
pub const CAN_F6R2_FB28_Msk: u32 = 268435456;
pub const CAN_F6R2_FB28: u32 = 268435456;
pub const CAN_F6R2_FB29_Pos: u32 = 29;
pub const CAN_F6R2_FB29_Msk: u32 = 536870912;
pub const CAN_F6R2_FB29: u32 = 536870912;
pub const CAN_F6R2_FB30_Pos: u32 = 30;
pub const CAN_F6R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F6R2_FB30: u32 = 1073741824;
pub const CAN_F6R2_FB31_Pos: u32 = 31;
pub const CAN_F6R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F6R2_FB31: u32 = 2147483648;
pub const CAN_F7R2_FB0_Pos: u32 = 0;
pub const CAN_F7R2_FB0_Msk: u32 = 1;
pub const CAN_F7R2_FB0: u32 = 1;
pub const CAN_F7R2_FB1_Pos: u32 = 1;
pub const CAN_F7R2_FB1_Msk: u32 = 2;
pub const CAN_F7R2_FB1: u32 = 2;
pub const CAN_F7R2_FB2_Pos: u32 = 2;
pub const CAN_F7R2_FB2_Msk: u32 = 4;
pub const CAN_F7R2_FB2: u32 = 4;
pub const CAN_F7R2_FB3_Pos: u32 = 3;
pub const CAN_F7R2_FB3_Msk: u32 = 8;
pub const CAN_F7R2_FB3: u32 = 8;
pub const CAN_F7R2_FB4_Pos: u32 = 4;
pub const CAN_F7R2_FB4_Msk: u32 = 16;
pub const CAN_F7R2_FB4: u32 = 16;
pub const CAN_F7R2_FB5_Pos: u32 = 5;
pub const CAN_F7R2_FB5_Msk: u32 = 32;
pub const CAN_F7R2_FB5: u32 = 32;
pub const CAN_F7R2_FB6_Pos: u32 = 6;
pub const CAN_F7R2_FB6_Msk: u32 = 64;
pub const CAN_F7R2_FB6: u32 = 64;
pub const CAN_F7R2_FB7_Pos: u32 = 7;
pub const CAN_F7R2_FB7_Msk: u32 = 128;
pub const CAN_F7R2_FB7: u32 = 128;
pub const CAN_F7R2_FB8_Pos: u32 = 8;
pub const CAN_F7R2_FB8_Msk: u32 = 256;
pub const CAN_F7R2_FB8: u32 = 256;
pub const CAN_F7R2_FB9_Pos: u32 = 9;
pub const CAN_F7R2_FB9_Msk: u32 = 512;
pub const CAN_F7R2_FB9: u32 = 512;
pub const CAN_F7R2_FB10_Pos: u32 = 10;
pub const CAN_F7R2_FB10_Msk: u32 = 1024;
pub const CAN_F7R2_FB10: u32 = 1024;
pub const CAN_F7R2_FB11_Pos: u32 = 11;
pub const CAN_F7R2_FB11_Msk: u32 = 2048;
pub const CAN_F7R2_FB11: u32 = 2048;
pub const CAN_F7R2_FB12_Pos: u32 = 12;
pub const CAN_F7R2_FB12_Msk: u32 = 4096;
pub const CAN_F7R2_FB12: u32 = 4096;
pub const CAN_F7R2_FB13_Pos: u32 = 13;
pub const CAN_F7R2_FB13_Msk: u32 = 8192;
pub const CAN_F7R2_FB13: u32 = 8192;
pub const CAN_F7R2_FB14_Pos: u32 = 14;
pub const CAN_F7R2_FB14_Msk: u32 = 16384;
pub const CAN_F7R2_FB14: u32 = 16384;
pub const CAN_F7R2_FB15_Pos: u32 = 15;
pub const CAN_F7R2_FB15_Msk: u32 = 32768;
pub const CAN_F7R2_FB15: u32 = 32768;
pub const CAN_F7R2_FB16_Pos: u32 = 16;
pub const CAN_F7R2_FB16_Msk: u32 = 65536;
pub const CAN_F7R2_FB16: u32 = 65536;
pub const CAN_F7R2_FB17_Pos: u32 = 17;
pub const CAN_F7R2_FB17_Msk: u32 = 131072;
pub const CAN_F7R2_FB17: u32 = 131072;
pub const CAN_F7R2_FB18_Pos: u32 = 18;
pub const CAN_F7R2_FB18_Msk: u32 = 262144;
pub const CAN_F7R2_FB18: u32 = 262144;
pub const CAN_F7R2_FB19_Pos: u32 = 19;
pub const CAN_F7R2_FB19_Msk: u32 = 524288;
pub const CAN_F7R2_FB19: u32 = 524288;
pub const CAN_F7R2_FB20_Pos: u32 = 20;
pub const CAN_F7R2_FB20_Msk: u32 = 1048576;
pub const CAN_F7R2_FB20: u32 = 1048576;
pub const CAN_F7R2_FB21_Pos: u32 = 21;
pub const CAN_F7R2_FB21_Msk: u32 = 2097152;
pub const CAN_F7R2_FB21: u32 = 2097152;
pub const CAN_F7R2_FB22_Pos: u32 = 22;
pub const CAN_F7R2_FB22_Msk: u32 = 4194304;
pub const CAN_F7R2_FB22: u32 = 4194304;
pub const CAN_F7R2_FB23_Pos: u32 = 23;
pub const CAN_F7R2_FB23_Msk: u32 = 8388608;
pub const CAN_F7R2_FB23: u32 = 8388608;
pub const CAN_F7R2_FB24_Pos: u32 = 24;
pub const CAN_F7R2_FB24_Msk: u32 = 16777216;
pub const CAN_F7R2_FB24: u32 = 16777216;
pub const CAN_F7R2_FB25_Pos: u32 = 25;
pub const CAN_F7R2_FB25_Msk: u32 = 33554432;
pub const CAN_F7R2_FB25: u32 = 33554432;
pub const CAN_F7R2_FB26_Pos: u32 = 26;
pub const CAN_F7R2_FB26_Msk: u32 = 67108864;
pub const CAN_F7R2_FB26: u32 = 67108864;
pub const CAN_F7R2_FB27_Pos: u32 = 27;
pub const CAN_F7R2_FB27_Msk: u32 = 134217728;
pub const CAN_F7R2_FB27: u32 = 134217728;
pub const CAN_F7R2_FB28_Pos: u32 = 28;
pub const CAN_F7R2_FB28_Msk: u32 = 268435456;
pub const CAN_F7R2_FB28: u32 = 268435456;
pub const CAN_F7R2_FB29_Pos: u32 = 29;
pub const CAN_F7R2_FB29_Msk: u32 = 536870912;
pub const CAN_F7R2_FB29: u32 = 536870912;
pub const CAN_F7R2_FB30_Pos: u32 = 30;
pub const CAN_F7R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F7R2_FB30: u32 = 1073741824;
pub const CAN_F7R2_FB31_Pos: u32 = 31;
pub const CAN_F7R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F7R2_FB31: u32 = 2147483648;
pub const CAN_F8R2_FB0_Pos: u32 = 0;
pub const CAN_F8R2_FB0_Msk: u32 = 1;
pub const CAN_F8R2_FB0: u32 = 1;
pub const CAN_F8R2_FB1_Pos: u32 = 1;
pub const CAN_F8R2_FB1_Msk: u32 = 2;
pub const CAN_F8R2_FB1: u32 = 2;
pub const CAN_F8R2_FB2_Pos: u32 = 2;
pub const CAN_F8R2_FB2_Msk: u32 = 4;
pub const CAN_F8R2_FB2: u32 = 4;
pub const CAN_F8R2_FB3_Pos: u32 = 3;
pub const CAN_F8R2_FB3_Msk: u32 = 8;
pub const CAN_F8R2_FB3: u32 = 8;
pub const CAN_F8R2_FB4_Pos: u32 = 4;
pub const CAN_F8R2_FB4_Msk: u32 = 16;
pub const CAN_F8R2_FB4: u32 = 16;
pub const CAN_F8R2_FB5_Pos: u32 = 5;
pub const CAN_F8R2_FB5_Msk: u32 = 32;
pub const CAN_F8R2_FB5: u32 = 32;
pub const CAN_F8R2_FB6_Pos: u32 = 6;
pub const CAN_F8R2_FB6_Msk: u32 = 64;
pub const CAN_F8R2_FB6: u32 = 64;
pub const CAN_F8R2_FB7_Pos: u32 = 7;
pub const CAN_F8R2_FB7_Msk: u32 = 128;
pub const CAN_F8R2_FB7: u32 = 128;
pub const CAN_F8R2_FB8_Pos: u32 = 8;
pub const CAN_F8R2_FB8_Msk: u32 = 256;
pub const CAN_F8R2_FB8: u32 = 256;
pub const CAN_F8R2_FB9_Pos: u32 = 9;
pub const CAN_F8R2_FB9_Msk: u32 = 512;
pub const CAN_F8R2_FB9: u32 = 512;
pub const CAN_F8R2_FB10_Pos: u32 = 10;
pub const CAN_F8R2_FB10_Msk: u32 = 1024;
pub const CAN_F8R2_FB10: u32 = 1024;
pub const CAN_F8R2_FB11_Pos: u32 = 11;
pub const CAN_F8R2_FB11_Msk: u32 = 2048;
pub const CAN_F8R2_FB11: u32 = 2048;
pub const CAN_F8R2_FB12_Pos: u32 = 12;
pub const CAN_F8R2_FB12_Msk: u32 = 4096;
pub const CAN_F8R2_FB12: u32 = 4096;
pub const CAN_F8R2_FB13_Pos: u32 = 13;
pub const CAN_F8R2_FB13_Msk: u32 = 8192;
pub const CAN_F8R2_FB13: u32 = 8192;
pub const CAN_F8R2_FB14_Pos: u32 = 14;
pub const CAN_F8R2_FB14_Msk: u32 = 16384;
pub const CAN_F8R2_FB14: u32 = 16384;
pub const CAN_F8R2_FB15_Pos: u32 = 15;
pub const CAN_F8R2_FB15_Msk: u32 = 32768;
pub const CAN_F8R2_FB15: u32 = 32768;
pub const CAN_F8R2_FB16_Pos: u32 = 16;
pub const CAN_F8R2_FB16_Msk: u32 = 65536;
pub const CAN_F8R2_FB16: u32 = 65536;
pub const CAN_F8R2_FB17_Pos: u32 = 17;
pub const CAN_F8R2_FB17_Msk: u32 = 131072;
pub const CAN_F8R2_FB17: u32 = 131072;
pub const CAN_F8R2_FB18_Pos: u32 = 18;
pub const CAN_F8R2_FB18_Msk: u32 = 262144;
pub const CAN_F8R2_FB18: u32 = 262144;
pub const CAN_F8R2_FB19_Pos: u32 = 19;
pub const CAN_F8R2_FB19_Msk: u32 = 524288;
pub const CAN_F8R2_FB19: u32 = 524288;
pub const CAN_F8R2_FB20_Pos: u32 = 20;
pub const CAN_F8R2_FB20_Msk: u32 = 1048576;
pub const CAN_F8R2_FB20: u32 = 1048576;
pub const CAN_F8R2_FB21_Pos: u32 = 21;
pub const CAN_F8R2_FB21_Msk: u32 = 2097152;
pub const CAN_F8R2_FB21: u32 = 2097152;
pub const CAN_F8R2_FB22_Pos: u32 = 22;
pub const CAN_F8R2_FB22_Msk: u32 = 4194304;
pub const CAN_F8R2_FB22: u32 = 4194304;
pub const CAN_F8R2_FB23_Pos: u32 = 23;
pub const CAN_F8R2_FB23_Msk: u32 = 8388608;
pub const CAN_F8R2_FB23: u32 = 8388608;
pub const CAN_F8R2_FB24_Pos: u32 = 24;
pub const CAN_F8R2_FB24_Msk: u32 = 16777216;
pub const CAN_F8R2_FB24: u32 = 16777216;
pub const CAN_F8R2_FB25_Pos: u32 = 25;
pub const CAN_F8R2_FB25_Msk: u32 = 33554432;
pub const CAN_F8R2_FB25: u32 = 33554432;
pub const CAN_F8R2_FB26_Pos: u32 = 26;
pub const CAN_F8R2_FB26_Msk: u32 = 67108864;
pub const CAN_F8R2_FB26: u32 = 67108864;
pub const CAN_F8R2_FB27_Pos: u32 = 27;
pub const CAN_F8R2_FB27_Msk: u32 = 134217728;
pub const CAN_F8R2_FB27: u32 = 134217728;
pub const CAN_F8R2_FB28_Pos: u32 = 28;
pub const CAN_F8R2_FB28_Msk: u32 = 268435456;
pub const CAN_F8R2_FB28: u32 = 268435456;
pub const CAN_F8R2_FB29_Pos: u32 = 29;
pub const CAN_F8R2_FB29_Msk: u32 = 536870912;
pub const CAN_F8R2_FB29: u32 = 536870912;
pub const CAN_F8R2_FB30_Pos: u32 = 30;
pub const CAN_F8R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F8R2_FB30: u32 = 1073741824;
pub const CAN_F8R2_FB31_Pos: u32 = 31;
pub const CAN_F8R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F8R2_FB31: u32 = 2147483648;
pub const CAN_F9R2_FB0_Pos: u32 = 0;
pub const CAN_F9R2_FB0_Msk: u32 = 1;
pub const CAN_F9R2_FB0: u32 = 1;
pub const CAN_F9R2_FB1_Pos: u32 = 1;
pub const CAN_F9R2_FB1_Msk: u32 = 2;
pub const CAN_F9R2_FB1: u32 = 2;
pub const CAN_F9R2_FB2_Pos: u32 = 2;
pub const CAN_F9R2_FB2_Msk: u32 = 4;
pub const CAN_F9R2_FB2: u32 = 4;
pub const CAN_F9R2_FB3_Pos: u32 = 3;
pub const CAN_F9R2_FB3_Msk: u32 = 8;
pub const CAN_F9R2_FB3: u32 = 8;
pub const CAN_F9R2_FB4_Pos: u32 = 4;
pub const CAN_F9R2_FB4_Msk: u32 = 16;
pub const CAN_F9R2_FB4: u32 = 16;
pub const CAN_F9R2_FB5_Pos: u32 = 5;
pub const CAN_F9R2_FB5_Msk: u32 = 32;
pub const CAN_F9R2_FB5: u32 = 32;
pub const CAN_F9R2_FB6_Pos: u32 = 6;
pub const CAN_F9R2_FB6_Msk: u32 = 64;
pub const CAN_F9R2_FB6: u32 = 64;
pub const CAN_F9R2_FB7_Pos: u32 = 7;
pub const CAN_F9R2_FB7_Msk: u32 = 128;
pub const CAN_F9R2_FB7: u32 = 128;
pub const CAN_F9R2_FB8_Pos: u32 = 8;
pub const CAN_F9R2_FB8_Msk: u32 = 256;
pub const CAN_F9R2_FB8: u32 = 256;
pub const CAN_F9R2_FB9_Pos: u32 = 9;
pub const CAN_F9R2_FB9_Msk: u32 = 512;
pub const CAN_F9R2_FB9: u32 = 512;
pub const CAN_F9R2_FB10_Pos: u32 = 10;
pub const CAN_F9R2_FB10_Msk: u32 = 1024;
pub const CAN_F9R2_FB10: u32 = 1024;
pub const CAN_F9R2_FB11_Pos: u32 = 11;
pub const CAN_F9R2_FB11_Msk: u32 = 2048;
pub const CAN_F9R2_FB11: u32 = 2048;
pub const CAN_F9R2_FB12_Pos: u32 = 12;
pub const CAN_F9R2_FB12_Msk: u32 = 4096;
pub const CAN_F9R2_FB12: u32 = 4096;
pub const CAN_F9R2_FB13_Pos: u32 = 13;
pub const CAN_F9R2_FB13_Msk: u32 = 8192;
pub const CAN_F9R2_FB13: u32 = 8192;
pub const CAN_F9R2_FB14_Pos: u32 = 14;
pub const CAN_F9R2_FB14_Msk: u32 = 16384;
pub const CAN_F9R2_FB14: u32 = 16384;
pub const CAN_F9R2_FB15_Pos: u32 = 15;
pub const CAN_F9R2_FB15_Msk: u32 = 32768;
pub const CAN_F9R2_FB15: u32 = 32768;
pub const CAN_F9R2_FB16_Pos: u32 = 16;
pub const CAN_F9R2_FB16_Msk: u32 = 65536;
pub const CAN_F9R2_FB16: u32 = 65536;
pub const CAN_F9R2_FB17_Pos: u32 = 17;
pub const CAN_F9R2_FB17_Msk: u32 = 131072;
pub const CAN_F9R2_FB17: u32 = 131072;
pub const CAN_F9R2_FB18_Pos: u32 = 18;
pub const CAN_F9R2_FB18_Msk: u32 = 262144;
pub const CAN_F9R2_FB18: u32 = 262144;
pub const CAN_F9R2_FB19_Pos: u32 = 19;
pub const CAN_F9R2_FB19_Msk: u32 = 524288;
pub const CAN_F9R2_FB19: u32 = 524288;
pub const CAN_F9R2_FB20_Pos: u32 = 20;
pub const CAN_F9R2_FB20_Msk: u32 = 1048576;
pub const CAN_F9R2_FB20: u32 = 1048576;
pub const CAN_F9R2_FB21_Pos: u32 = 21;
pub const CAN_F9R2_FB21_Msk: u32 = 2097152;
pub const CAN_F9R2_FB21: u32 = 2097152;
pub const CAN_F9R2_FB22_Pos: u32 = 22;
pub const CAN_F9R2_FB22_Msk: u32 = 4194304;
pub const CAN_F9R2_FB22: u32 = 4194304;
pub const CAN_F9R2_FB23_Pos: u32 = 23;
pub const CAN_F9R2_FB23_Msk: u32 = 8388608;
pub const CAN_F9R2_FB23: u32 = 8388608;
pub const CAN_F9R2_FB24_Pos: u32 = 24;
pub const CAN_F9R2_FB24_Msk: u32 = 16777216;
pub const CAN_F9R2_FB24: u32 = 16777216;
pub const CAN_F9R2_FB25_Pos: u32 = 25;
pub const CAN_F9R2_FB25_Msk: u32 = 33554432;
pub const CAN_F9R2_FB25: u32 = 33554432;
pub const CAN_F9R2_FB26_Pos: u32 = 26;
pub const CAN_F9R2_FB26_Msk: u32 = 67108864;
pub const CAN_F9R2_FB26: u32 = 67108864;
pub const CAN_F9R2_FB27_Pos: u32 = 27;
pub const CAN_F9R2_FB27_Msk: u32 = 134217728;
pub const CAN_F9R2_FB27: u32 = 134217728;
pub const CAN_F9R2_FB28_Pos: u32 = 28;
pub const CAN_F9R2_FB28_Msk: u32 = 268435456;
pub const CAN_F9R2_FB28: u32 = 268435456;
pub const CAN_F9R2_FB29_Pos: u32 = 29;
pub const CAN_F9R2_FB29_Msk: u32 = 536870912;
pub const CAN_F9R2_FB29: u32 = 536870912;
pub const CAN_F9R2_FB30_Pos: u32 = 30;
pub const CAN_F9R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F9R2_FB30: u32 = 1073741824;
pub const CAN_F9R2_FB31_Pos: u32 = 31;
pub const CAN_F9R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F9R2_FB31: u32 = 2147483648;
pub const CAN_F10R2_FB0_Pos: u32 = 0;
pub const CAN_F10R2_FB0_Msk: u32 = 1;
pub const CAN_F10R2_FB0: u32 = 1;
pub const CAN_F10R2_FB1_Pos: u32 = 1;
pub const CAN_F10R2_FB1_Msk: u32 = 2;
pub const CAN_F10R2_FB1: u32 = 2;
pub const CAN_F10R2_FB2_Pos: u32 = 2;
pub const CAN_F10R2_FB2_Msk: u32 = 4;
pub const CAN_F10R2_FB2: u32 = 4;
pub const CAN_F10R2_FB3_Pos: u32 = 3;
pub const CAN_F10R2_FB3_Msk: u32 = 8;
pub const CAN_F10R2_FB3: u32 = 8;
pub const CAN_F10R2_FB4_Pos: u32 = 4;
pub const CAN_F10R2_FB4_Msk: u32 = 16;
pub const CAN_F10R2_FB4: u32 = 16;
pub const CAN_F10R2_FB5_Pos: u32 = 5;
pub const CAN_F10R2_FB5_Msk: u32 = 32;
pub const CAN_F10R2_FB5: u32 = 32;
pub const CAN_F10R2_FB6_Pos: u32 = 6;
pub const CAN_F10R2_FB6_Msk: u32 = 64;
pub const CAN_F10R2_FB6: u32 = 64;
pub const CAN_F10R2_FB7_Pos: u32 = 7;
pub const CAN_F10R2_FB7_Msk: u32 = 128;
pub const CAN_F10R2_FB7: u32 = 128;
pub const CAN_F10R2_FB8_Pos: u32 = 8;
pub const CAN_F10R2_FB8_Msk: u32 = 256;
pub const CAN_F10R2_FB8: u32 = 256;
pub const CAN_F10R2_FB9_Pos: u32 = 9;
pub const CAN_F10R2_FB9_Msk: u32 = 512;
pub const CAN_F10R2_FB9: u32 = 512;
pub const CAN_F10R2_FB10_Pos: u32 = 10;
pub const CAN_F10R2_FB10_Msk: u32 = 1024;
pub const CAN_F10R2_FB10: u32 = 1024;
pub const CAN_F10R2_FB11_Pos: u32 = 11;
pub const CAN_F10R2_FB11_Msk: u32 = 2048;
pub const CAN_F10R2_FB11: u32 = 2048;
pub const CAN_F10R2_FB12_Pos: u32 = 12;
pub const CAN_F10R2_FB12_Msk: u32 = 4096;
pub const CAN_F10R2_FB12: u32 = 4096;
pub const CAN_F10R2_FB13_Pos: u32 = 13;
pub const CAN_F10R2_FB13_Msk: u32 = 8192;
pub const CAN_F10R2_FB13: u32 = 8192;
pub const CAN_F10R2_FB14_Pos: u32 = 14;
pub const CAN_F10R2_FB14_Msk: u32 = 16384;
pub const CAN_F10R2_FB14: u32 = 16384;
pub const CAN_F10R2_FB15_Pos: u32 = 15;
pub const CAN_F10R2_FB15_Msk: u32 = 32768;
pub const CAN_F10R2_FB15: u32 = 32768;
pub const CAN_F10R2_FB16_Pos: u32 = 16;
pub const CAN_F10R2_FB16_Msk: u32 = 65536;
pub const CAN_F10R2_FB16: u32 = 65536;
pub const CAN_F10R2_FB17_Pos: u32 = 17;
pub const CAN_F10R2_FB17_Msk: u32 = 131072;
pub const CAN_F10R2_FB17: u32 = 131072;
pub const CAN_F10R2_FB18_Pos: u32 = 18;
pub const CAN_F10R2_FB18_Msk: u32 = 262144;
pub const CAN_F10R2_FB18: u32 = 262144;
pub const CAN_F10R2_FB19_Pos: u32 = 19;
pub const CAN_F10R2_FB19_Msk: u32 = 524288;
pub const CAN_F10R2_FB19: u32 = 524288;
pub const CAN_F10R2_FB20_Pos: u32 = 20;
pub const CAN_F10R2_FB20_Msk: u32 = 1048576;
pub const CAN_F10R2_FB20: u32 = 1048576;
pub const CAN_F10R2_FB21_Pos: u32 = 21;
pub const CAN_F10R2_FB21_Msk: u32 = 2097152;
pub const CAN_F10R2_FB21: u32 = 2097152;
pub const CAN_F10R2_FB22_Pos: u32 = 22;
pub const CAN_F10R2_FB22_Msk: u32 = 4194304;
pub const CAN_F10R2_FB22: u32 = 4194304;
pub const CAN_F10R2_FB23_Pos: u32 = 23;
pub const CAN_F10R2_FB23_Msk: u32 = 8388608;
pub const CAN_F10R2_FB23: u32 = 8388608;
pub const CAN_F10R2_FB24_Pos: u32 = 24;
pub const CAN_F10R2_FB24_Msk: u32 = 16777216;
pub const CAN_F10R2_FB24: u32 = 16777216;
pub const CAN_F10R2_FB25_Pos: u32 = 25;
pub const CAN_F10R2_FB25_Msk: u32 = 33554432;
pub const CAN_F10R2_FB25: u32 = 33554432;
pub const CAN_F10R2_FB26_Pos: u32 = 26;
pub const CAN_F10R2_FB26_Msk: u32 = 67108864;
pub const CAN_F10R2_FB26: u32 = 67108864;
pub const CAN_F10R2_FB27_Pos: u32 = 27;
pub const CAN_F10R2_FB27_Msk: u32 = 134217728;
pub const CAN_F10R2_FB27: u32 = 134217728;
pub const CAN_F10R2_FB28_Pos: u32 = 28;
pub const CAN_F10R2_FB28_Msk: u32 = 268435456;
pub const CAN_F10R2_FB28: u32 = 268435456;
pub const CAN_F10R2_FB29_Pos: u32 = 29;
pub const CAN_F10R2_FB29_Msk: u32 = 536870912;
pub const CAN_F10R2_FB29: u32 = 536870912;
pub const CAN_F10R2_FB30_Pos: u32 = 30;
pub const CAN_F10R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F10R2_FB30: u32 = 1073741824;
pub const CAN_F10R2_FB31_Pos: u32 = 31;
pub const CAN_F10R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F10R2_FB31: u32 = 2147483648;
pub const CAN_F11R2_FB0_Pos: u32 = 0;
pub const CAN_F11R2_FB0_Msk: u32 = 1;
pub const CAN_F11R2_FB0: u32 = 1;
pub const CAN_F11R2_FB1_Pos: u32 = 1;
pub const CAN_F11R2_FB1_Msk: u32 = 2;
pub const CAN_F11R2_FB1: u32 = 2;
pub const CAN_F11R2_FB2_Pos: u32 = 2;
pub const CAN_F11R2_FB2_Msk: u32 = 4;
pub const CAN_F11R2_FB2: u32 = 4;
pub const CAN_F11R2_FB3_Pos: u32 = 3;
pub const CAN_F11R2_FB3_Msk: u32 = 8;
pub const CAN_F11R2_FB3: u32 = 8;
pub const CAN_F11R2_FB4_Pos: u32 = 4;
pub const CAN_F11R2_FB4_Msk: u32 = 16;
pub const CAN_F11R2_FB4: u32 = 16;
pub const CAN_F11R2_FB5_Pos: u32 = 5;
pub const CAN_F11R2_FB5_Msk: u32 = 32;
pub const CAN_F11R2_FB5: u32 = 32;
pub const CAN_F11R2_FB6_Pos: u32 = 6;
pub const CAN_F11R2_FB6_Msk: u32 = 64;
pub const CAN_F11R2_FB6: u32 = 64;
pub const CAN_F11R2_FB7_Pos: u32 = 7;
pub const CAN_F11R2_FB7_Msk: u32 = 128;
pub const CAN_F11R2_FB7: u32 = 128;
pub const CAN_F11R2_FB8_Pos: u32 = 8;
pub const CAN_F11R2_FB8_Msk: u32 = 256;
pub const CAN_F11R2_FB8: u32 = 256;
pub const CAN_F11R2_FB9_Pos: u32 = 9;
pub const CAN_F11R2_FB9_Msk: u32 = 512;
pub const CAN_F11R2_FB9: u32 = 512;
pub const CAN_F11R2_FB10_Pos: u32 = 10;
pub const CAN_F11R2_FB10_Msk: u32 = 1024;
pub const CAN_F11R2_FB10: u32 = 1024;
pub const CAN_F11R2_FB11_Pos: u32 = 11;
pub const CAN_F11R2_FB11_Msk: u32 = 2048;
pub const CAN_F11R2_FB11: u32 = 2048;
pub const CAN_F11R2_FB12_Pos: u32 = 12;
pub const CAN_F11R2_FB12_Msk: u32 = 4096;
pub const CAN_F11R2_FB12: u32 = 4096;
pub const CAN_F11R2_FB13_Pos: u32 = 13;
pub const CAN_F11R2_FB13_Msk: u32 = 8192;
pub const CAN_F11R2_FB13: u32 = 8192;
pub const CAN_F11R2_FB14_Pos: u32 = 14;
pub const CAN_F11R2_FB14_Msk: u32 = 16384;
pub const CAN_F11R2_FB14: u32 = 16384;
pub const CAN_F11R2_FB15_Pos: u32 = 15;
pub const CAN_F11R2_FB15_Msk: u32 = 32768;
pub const CAN_F11R2_FB15: u32 = 32768;
pub const CAN_F11R2_FB16_Pos: u32 = 16;
pub const CAN_F11R2_FB16_Msk: u32 = 65536;
pub const CAN_F11R2_FB16: u32 = 65536;
pub const CAN_F11R2_FB17_Pos: u32 = 17;
pub const CAN_F11R2_FB17_Msk: u32 = 131072;
pub const CAN_F11R2_FB17: u32 = 131072;
pub const CAN_F11R2_FB18_Pos: u32 = 18;
pub const CAN_F11R2_FB18_Msk: u32 = 262144;
pub const CAN_F11R2_FB18: u32 = 262144;
pub const CAN_F11R2_FB19_Pos: u32 = 19;
pub const CAN_F11R2_FB19_Msk: u32 = 524288;
pub const CAN_F11R2_FB19: u32 = 524288;
pub const CAN_F11R2_FB20_Pos: u32 = 20;
pub const CAN_F11R2_FB20_Msk: u32 = 1048576;
pub const CAN_F11R2_FB20: u32 = 1048576;
pub const CAN_F11R2_FB21_Pos: u32 = 21;
pub const CAN_F11R2_FB21_Msk: u32 = 2097152;
pub const CAN_F11R2_FB21: u32 = 2097152;
pub const CAN_F11R2_FB22_Pos: u32 = 22;
pub const CAN_F11R2_FB22_Msk: u32 = 4194304;
pub const CAN_F11R2_FB22: u32 = 4194304;
pub const CAN_F11R2_FB23_Pos: u32 = 23;
pub const CAN_F11R2_FB23_Msk: u32 = 8388608;
pub const CAN_F11R2_FB23: u32 = 8388608;
pub const CAN_F11R2_FB24_Pos: u32 = 24;
pub const CAN_F11R2_FB24_Msk: u32 = 16777216;
pub const CAN_F11R2_FB24: u32 = 16777216;
pub const CAN_F11R2_FB25_Pos: u32 = 25;
pub const CAN_F11R2_FB25_Msk: u32 = 33554432;
pub const CAN_F11R2_FB25: u32 = 33554432;
pub const CAN_F11R2_FB26_Pos: u32 = 26;
pub const CAN_F11R2_FB26_Msk: u32 = 67108864;
pub const CAN_F11R2_FB26: u32 = 67108864;
pub const CAN_F11R2_FB27_Pos: u32 = 27;
pub const CAN_F11R2_FB27_Msk: u32 = 134217728;
pub const CAN_F11R2_FB27: u32 = 134217728;
pub const CAN_F11R2_FB28_Pos: u32 = 28;
pub const CAN_F11R2_FB28_Msk: u32 = 268435456;
pub const CAN_F11R2_FB28: u32 = 268435456;
pub const CAN_F11R2_FB29_Pos: u32 = 29;
pub const CAN_F11R2_FB29_Msk: u32 = 536870912;
pub const CAN_F11R2_FB29: u32 = 536870912;
pub const CAN_F11R2_FB30_Pos: u32 = 30;
pub const CAN_F11R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F11R2_FB30: u32 = 1073741824;
pub const CAN_F11R2_FB31_Pos: u32 = 31;
pub const CAN_F11R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F11R2_FB31: u32 = 2147483648;
pub const CAN_F12R2_FB0_Pos: u32 = 0;
pub const CAN_F12R2_FB0_Msk: u32 = 1;
pub const CAN_F12R2_FB0: u32 = 1;
pub const CAN_F12R2_FB1_Pos: u32 = 1;
pub const CAN_F12R2_FB1_Msk: u32 = 2;
pub const CAN_F12R2_FB1: u32 = 2;
pub const CAN_F12R2_FB2_Pos: u32 = 2;
pub const CAN_F12R2_FB2_Msk: u32 = 4;
pub const CAN_F12R2_FB2: u32 = 4;
pub const CAN_F12R2_FB3_Pos: u32 = 3;
pub const CAN_F12R2_FB3_Msk: u32 = 8;
pub const CAN_F12R2_FB3: u32 = 8;
pub const CAN_F12R2_FB4_Pos: u32 = 4;
pub const CAN_F12R2_FB4_Msk: u32 = 16;
pub const CAN_F12R2_FB4: u32 = 16;
pub const CAN_F12R2_FB5_Pos: u32 = 5;
pub const CAN_F12R2_FB5_Msk: u32 = 32;
pub const CAN_F12R2_FB5: u32 = 32;
pub const CAN_F12R2_FB6_Pos: u32 = 6;
pub const CAN_F12R2_FB6_Msk: u32 = 64;
pub const CAN_F12R2_FB6: u32 = 64;
pub const CAN_F12R2_FB7_Pos: u32 = 7;
pub const CAN_F12R2_FB7_Msk: u32 = 128;
pub const CAN_F12R2_FB7: u32 = 128;
pub const CAN_F12R2_FB8_Pos: u32 = 8;
pub const CAN_F12R2_FB8_Msk: u32 = 256;
pub const CAN_F12R2_FB8: u32 = 256;
pub const CAN_F12R2_FB9_Pos: u32 = 9;
pub const CAN_F12R2_FB9_Msk: u32 = 512;
pub const CAN_F12R2_FB9: u32 = 512;
pub const CAN_F12R2_FB10_Pos: u32 = 10;
pub const CAN_F12R2_FB10_Msk: u32 = 1024;
pub const CAN_F12R2_FB10: u32 = 1024;
pub const CAN_F12R2_FB11_Pos: u32 = 11;
pub const CAN_F12R2_FB11_Msk: u32 = 2048;
pub const CAN_F12R2_FB11: u32 = 2048;
pub const CAN_F12R2_FB12_Pos: u32 = 12;
pub const CAN_F12R2_FB12_Msk: u32 = 4096;
pub const CAN_F12R2_FB12: u32 = 4096;
pub const CAN_F12R2_FB13_Pos: u32 = 13;
pub const CAN_F12R2_FB13_Msk: u32 = 8192;
pub const CAN_F12R2_FB13: u32 = 8192;
pub const CAN_F12R2_FB14_Pos: u32 = 14;
pub const CAN_F12R2_FB14_Msk: u32 = 16384;
pub const CAN_F12R2_FB14: u32 = 16384;
pub const CAN_F12R2_FB15_Pos: u32 = 15;
pub const CAN_F12R2_FB15_Msk: u32 = 32768;
pub const CAN_F12R2_FB15: u32 = 32768;
pub const CAN_F12R2_FB16_Pos: u32 = 16;
pub const CAN_F12R2_FB16_Msk: u32 = 65536;
pub const CAN_F12R2_FB16: u32 = 65536;
pub const CAN_F12R2_FB17_Pos: u32 = 17;
pub const CAN_F12R2_FB17_Msk: u32 = 131072;
pub const CAN_F12R2_FB17: u32 = 131072;
pub const CAN_F12R2_FB18_Pos: u32 = 18;
pub const CAN_F12R2_FB18_Msk: u32 = 262144;
pub const CAN_F12R2_FB18: u32 = 262144;
pub const CAN_F12R2_FB19_Pos: u32 = 19;
pub const CAN_F12R2_FB19_Msk: u32 = 524288;
pub const CAN_F12R2_FB19: u32 = 524288;
pub const CAN_F12R2_FB20_Pos: u32 = 20;
pub const CAN_F12R2_FB20_Msk: u32 = 1048576;
pub const CAN_F12R2_FB20: u32 = 1048576;
pub const CAN_F12R2_FB21_Pos: u32 = 21;
pub const CAN_F12R2_FB21_Msk: u32 = 2097152;
pub const CAN_F12R2_FB21: u32 = 2097152;
pub const CAN_F12R2_FB22_Pos: u32 = 22;
pub const CAN_F12R2_FB22_Msk: u32 = 4194304;
pub const CAN_F12R2_FB22: u32 = 4194304;
pub const CAN_F12R2_FB23_Pos: u32 = 23;
pub const CAN_F12R2_FB23_Msk: u32 = 8388608;
pub const CAN_F12R2_FB23: u32 = 8388608;
pub const CAN_F12R2_FB24_Pos: u32 = 24;
pub const CAN_F12R2_FB24_Msk: u32 = 16777216;
pub const CAN_F12R2_FB24: u32 = 16777216;
pub const CAN_F12R2_FB25_Pos: u32 = 25;
pub const CAN_F12R2_FB25_Msk: u32 = 33554432;
pub const CAN_F12R2_FB25: u32 = 33554432;
pub const CAN_F12R2_FB26_Pos: u32 = 26;
pub const CAN_F12R2_FB26_Msk: u32 = 67108864;
pub const CAN_F12R2_FB26: u32 = 67108864;
pub const CAN_F12R2_FB27_Pos: u32 = 27;
pub const CAN_F12R2_FB27_Msk: u32 = 134217728;
pub const CAN_F12R2_FB27: u32 = 134217728;
pub const CAN_F12R2_FB28_Pos: u32 = 28;
pub const CAN_F12R2_FB28_Msk: u32 = 268435456;
pub const CAN_F12R2_FB28: u32 = 268435456;
pub const CAN_F12R2_FB29_Pos: u32 = 29;
pub const CAN_F12R2_FB29_Msk: u32 = 536870912;
pub const CAN_F12R2_FB29: u32 = 536870912;
pub const CAN_F12R2_FB30_Pos: u32 = 30;
pub const CAN_F12R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F12R2_FB30: u32 = 1073741824;
pub const CAN_F12R2_FB31_Pos: u32 = 31;
pub const CAN_F12R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F12R2_FB31: u32 = 2147483648;
pub const CAN_F13R2_FB0_Pos: u32 = 0;
pub const CAN_F13R2_FB0_Msk: u32 = 1;
pub const CAN_F13R2_FB0: u32 = 1;
pub const CAN_F13R2_FB1_Pos: u32 = 1;
pub const CAN_F13R2_FB1_Msk: u32 = 2;
pub const CAN_F13R2_FB1: u32 = 2;
pub const CAN_F13R2_FB2_Pos: u32 = 2;
pub const CAN_F13R2_FB2_Msk: u32 = 4;
pub const CAN_F13R2_FB2: u32 = 4;
pub const CAN_F13R2_FB3_Pos: u32 = 3;
pub const CAN_F13R2_FB3_Msk: u32 = 8;
pub const CAN_F13R2_FB3: u32 = 8;
pub const CAN_F13R2_FB4_Pos: u32 = 4;
pub const CAN_F13R2_FB4_Msk: u32 = 16;
pub const CAN_F13R2_FB4: u32 = 16;
pub const CAN_F13R2_FB5_Pos: u32 = 5;
pub const CAN_F13R2_FB5_Msk: u32 = 32;
pub const CAN_F13R2_FB5: u32 = 32;
pub const CAN_F13R2_FB6_Pos: u32 = 6;
pub const CAN_F13R2_FB6_Msk: u32 = 64;
pub const CAN_F13R2_FB6: u32 = 64;
pub const CAN_F13R2_FB7_Pos: u32 = 7;
pub const CAN_F13R2_FB7_Msk: u32 = 128;
pub const CAN_F13R2_FB7: u32 = 128;
pub const CAN_F13R2_FB8_Pos: u32 = 8;
pub const CAN_F13R2_FB8_Msk: u32 = 256;
pub const CAN_F13R2_FB8: u32 = 256;
pub const CAN_F13R2_FB9_Pos: u32 = 9;
pub const CAN_F13R2_FB9_Msk: u32 = 512;
pub const CAN_F13R2_FB9: u32 = 512;
pub const CAN_F13R2_FB10_Pos: u32 = 10;
pub const CAN_F13R2_FB10_Msk: u32 = 1024;
pub const CAN_F13R2_FB10: u32 = 1024;
pub const CAN_F13R2_FB11_Pos: u32 = 11;
pub const CAN_F13R2_FB11_Msk: u32 = 2048;
pub const CAN_F13R2_FB11: u32 = 2048;
pub const CAN_F13R2_FB12_Pos: u32 = 12;
pub const CAN_F13R2_FB12_Msk: u32 = 4096;
pub const CAN_F13R2_FB12: u32 = 4096;
pub const CAN_F13R2_FB13_Pos: u32 = 13;
pub const CAN_F13R2_FB13_Msk: u32 = 8192;
pub const CAN_F13R2_FB13: u32 = 8192;
pub const CAN_F13R2_FB14_Pos: u32 = 14;
pub const CAN_F13R2_FB14_Msk: u32 = 16384;
pub const CAN_F13R2_FB14: u32 = 16384;
pub const CAN_F13R2_FB15_Pos: u32 = 15;
pub const CAN_F13R2_FB15_Msk: u32 = 32768;
pub const CAN_F13R2_FB15: u32 = 32768;
pub const CAN_F13R2_FB16_Pos: u32 = 16;
pub const CAN_F13R2_FB16_Msk: u32 = 65536;
pub const CAN_F13R2_FB16: u32 = 65536;
pub const CAN_F13R2_FB17_Pos: u32 = 17;
pub const CAN_F13R2_FB17_Msk: u32 = 131072;
pub const CAN_F13R2_FB17: u32 = 131072;
pub const CAN_F13R2_FB18_Pos: u32 = 18;
pub const CAN_F13R2_FB18_Msk: u32 = 262144;
pub const CAN_F13R2_FB18: u32 = 262144;
pub const CAN_F13R2_FB19_Pos: u32 = 19;
pub const CAN_F13R2_FB19_Msk: u32 = 524288;
pub const CAN_F13R2_FB19: u32 = 524288;
pub const CAN_F13R2_FB20_Pos: u32 = 20;
pub const CAN_F13R2_FB20_Msk: u32 = 1048576;
pub const CAN_F13R2_FB20: u32 = 1048576;
pub const CAN_F13R2_FB21_Pos: u32 = 21;
pub const CAN_F13R2_FB21_Msk: u32 = 2097152;
pub const CAN_F13R2_FB21: u32 = 2097152;
pub const CAN_F13R2_FB22_Pos: u32 = 22;
pub const CAN_F13R2_FB22_Msk: u32 = 4194304;
pub const CAN_F13R2_FB22: u32 = 4194304;
pub const CAN_F13R2_FB23_Pos: u32 = 23;
pub const CAN_F13R2_FB23_Msk: u32 = 8388608;
pub const CAN_F13R2_FB23: u32 = 8388608;
pub const CAN_F13R2_FB24_Pos: u32 = 24;
pub const CAN_F13R2_FB24_Msk: u32 = 16777216;
pub const CAN_F13R2_FB24: u32 = 16777216;
pub const CAN_F13R2_FB25_Pos: u32 = 25;
pub const CAN_F13R2_FB25_Msk: u32 = 33554432;
pub const CAN_F13R2_FB25: u32 = 33554432;
pub const CAN_F13R2_FB26_Pos: u32 = 26;
pub const CAN_F13R2_FB26_Msk: u32 = 67108864;
pub const CAN_F13R2_FB26: u32 = 67108864;
pub const CAN_F13R2_FB27_Pos: u32 = 27;
pub const CAN_F13R2_FB27_Msk: u32 = 134217728;
pub const CAN_F13R2_FB27: u32 = 134217728;
pub const CAN_F13R2_FB28_Pos: u32 = 28;
pub const CAN_F13R2_FB28_Msk: u32 = 268435456;
pub const CAN_F13R2_FB28: u32 = 268435456;
pub const CAN_F13R2_FB29_Pos: u32 = 29;
pub const CAN_F13R2_FB29_Msk: u32 = 536870912;
pub const CAN_F13R2_FB29: u32 = 536870912;
pub const CAN_F13R2_FB30_Pos: u32 = 30;
pub const CAN_F13R2_FB30_Msk: u32 = 1073741824;
pub const CAN_F13R2_FB30: u32 = 1073741824;
pub const CAN_F13R2_FB31_Pos: u32 = 31;
pub const CAN_F13R2_FB31_Msk: u32 = 2147483648;
pub const CAN_F13R2_FB31: u32 = 2147483648;
pub const CRC_DR_DR_Pos: u32 = 0;
pub const CRC_DR_DR_Msk: u32 = 4294967295;
pub const CRC_DR_DR: u32 = 4294967295;
pub const CRC_CR_RESET_Pos: u32 = 0;
pub const CRC_CR_RESET_Msk: u32 = 1;
pub const CRC_CR_RESET: u32 = 1;
pub const CRC_CR_POLYSIZE_Pos: u32 = 3;
pub const CRC_CR_POLYSIZE_Msk: u32 = 24;
pub const CRC_CR_POLYSIZE: u32 = 24;
pub const CRC_CR_POLYSIZE_0: u32 = 8;
pub const CRC_CR_POLYSIZE_1: u32 = 16;
pub const CRC_CR_REV_IN_Pos: u32 = 5;
pub const CRC_CR_REV_IN_Msk: u32 = 96;
pub const CRC_CR_REV_IN: u32 = 96;
pub const CRC_CR_REV_IN_0: u32 = 32;
pub const CRC_CR_REV_IN_1: u32 = 64;
pub const CRC_CR_REV_OUT_Pos: u32 = 7;
pub const CRC_CR_REV_OUT_Msk: u32 = 128;
pub const CRC_CR_REV_OUT: u32 = 128;
pub const CRC_INIT_INIT_Pos: u32 = 0;
pub const CRC_INIT_INIT_Msk: u32 = 4294967295;
pub const CRC_INIT_INIT: u32 = 4294967295;
pub const CRC_POL_POL_Pos: u32 = 0;
pub const CRC_POL_POL_Msk: u32 = 4294967295;
pub const CRC_POL_POL: u32 = 4294967295;
pub const DAC_CR_EN1_Pos: u32 = 0;
pub const DAC_CR_EN1_Msk: u32 = 1;
pub const DAC_CR_EN1: u32 = 1;
pub const DAC_CR_BOFF1_Pos: u32 = 1;
pub const DAC_CR_BOFF1_Msk: u32 = 2;
pub const DAC_CR_BOFF1: u32 = 2;
pub const DAC_CR_TEN1_Pos: u32 = 2;
pub const DAC_CR_TEN1_Msk: u32 = 4;
pub const DAC_CR_TEN1: u32 = 4;
pub const DAC_CR_TSEL1_Pos: u32 = 3;
pub const DAC_CR_TSEL1_Msk: u32 = 56;
pub const DAC_CR_TSEL1: u32 = 56;
pub const DAC_CR_TSEL1_0: u32 = 8;
pub const DAC_CR_TSEL1_1: u32 = 16;
pub const DAC_CR_TSEL1_2: u32 = 32;
pub const DAC_CR_WAVE1_Pos: u32 = 6;
pub const DAC_CR_WAVE1_Msk: u32 = 192;
pub const DAC_CR_WAVE1: u32 = 192;
pub const DAC_CR_WAVE1_0: u32 = 64;
pub const DAC_CR_WAVE1_1: u32 = 128;
pub const DAC_CR_MAMP1_Pos: u32 = 8;
pub const DAC_CR_MAMP1_Msk: u32 = 3840;
pub const DAC_CR_MAMP1: u32 = 3840;
pub const DAC_CR_MAMP1_0: u32 = 256;
pub const DAC_CR_MAMP1_1: u32 = 512;
pub const DAC_CR_MAMP1_2: u32 = 1024;
pub const DAC_CR_MAMP1_3: u32 = 2048;
pub const DAC_CR_DMAEN1_Pos: u32 = 12;
pub const DAC_CR_DMAEN1_Msk: u32 = 4096;
pub const DAC_CR_DMAEN1: u32 = 4096;
pub const DAC_CR_DMAUDRIE1_Pos: u32 = 13;
pub const DAC_CR_DMAUDRIE1_Msk: u32 = 8192;
pub const DAC_CR_DMAUDRIE1: u32 = 8192;
pub const DAC_CR_EN2_Pos: u32 = 16;
pub const DAC_CR_EN2_Msk: u32 = 65536;
pub const DAC_CR_EN2: u32 = 65536;
pub const DAC_CR_BOFF2_Pos: u32 = 17;
pub const DAC_CR_BOFF2_Msk: u32 = 131072;
pub const DAC_CR_BOFF2: u32 = 131072;
pub const DAC_CR_TEN2_Pos: u32 = 18;
pub const DAC_CR_TEN2_Msk: u32 = 262144;
pub const DAC_CR_TEN2: u32 = 262144;
pub const DAC_CR_TSEL2_Pos: u32 = 19;
pub const DAC_CR_TSEL2_Msk: u32 = 3670016;
pub const DAC_CR_TSEL2: u32 = 3670016;
pub const DAC_CR_TSEL2_0: u32 = 524288;
pub const DAC_CR_TSEL2_1: u32 = 1048576;
pub const DAC_CR_TSEL2_2: u32 = 2097152;
pub const DAC_CR_WAVE2_Pos: u32 = 22;
pub const DAC_CR_WAVE2_Msk: u32 = 12582912;
pub const DAC_CR_WAVE2: u32 = 12582912;
pub const DAC_CR_WAVE2_0: u32 = 4194304;
pub const DAC_CR_WAVE2_1: u32 = 8388608;
pub const DAC_CR_MAMP2_Pos: u32 = 24;
pub const DAC_CR_MAMP2_Msk: u32 = 251658240;
pub const DAC_CR_MAMP2: u32 = 251658240;
pub const DAC_CR_MAMP2_0: u32 = 16777216;
pub const DAC_CR_MAMP2_1: u32 = 33554432;
pub const DAC_CR_MAMP2_2: u32 = 67108864;
pub const DAC_CR_MAMP2_3: u32 = 134217728;
pub const DAC_CR_DMAEN2_Pos: u32 = 28;
pub const DAC_CR_DMAEN2_Msk: u32 = 268435456;
pub const DAC_CR_DMAEN2: u32 = 268435456;
pub const DAC_CR_DMAUDRIE2_Pos: u32 = 29;
pub const DAC_CR_DMAUDRIE2_Msk: u32 = 536870912;
pub const DAC_CR_DMAUDRIE2: u32 = 536870912;
pub const DAC_SWTRIGR_SWTRIG1_Pos: u32 = 0;
pub const DAC_SWTRIGR_SWTRIG1_Msk: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG1: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Pos: u32 = 1;
pub const DAC_SWTRIGR_SWTRIG2_Msk: u32 = 2;
pub const DAC_SWTRIGR_SWTRIG2: u32 = 2;
pub const DAC_DHR12R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12R1_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12R1_DACC1DHR: u32 = 4095;
pub const DAC_DHR12L1_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12L1_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12L1_DACC1DHR: u32 = 65520;
pub const DAC_DHR8R1_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8R1_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8R1_DACC1DHR: u32 = 255;
pub const DAC_DHR12R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR12R2_DACC2DHR_Msk: u32 = 4095;
pub const DAC_DHR12R2_DACC2DHR: u32 = 4095;
pub const DAC_DHR12L2_DACC2DHR_Pos: u32 = 4;
pub const DAC_DHR12L2_DACC2DHR_Msk: u32 = 65520;
pub const DAC_DHR12L2_DACC2DHR: u32 = 65520;
pub const DAC_DHR8R2_DACC2DHR_Pos: u32 = 0;
pub const DAC_DHR8R2_DACC2DHR_Msk: u32 = 255;
pub const DAC_DHR8R2_DACC2DHR: u32 = 255;
pub const DAC_DHR12RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR12RD_DACC1DHR_Msk: u32 = 4095;
pub const DAC_DHR12RD_DACC1DHR: u32 = 4095;
pub const DAC_DHR12RD_DACC2DHR_Pos: u32 = 16;
pub const DAC_DHR12RD_DACC2DHR_Msk: u32 = 268369920;
pub const DAC_DHR12RD_DACC2DHR: u32 = 268369920;
pub const DAC_DHR12LD_DACC1DHR_Pos: u32 = 4;
pub const DAC_DHR12LD_DACC1DHR_Msk: u32 = 65520;
pub const DAC_DHR12LD_DACC1DHR: u32 = 65520;
pub const DAC_DHR12LD_DACC2DHR_Pos: u32 = 20;
pub const DAC_DHR12LD_DACC2DHR_Msk: u32 = 4293918720;
pub const DAC_DHR12LD_DACC2DHR: u32 = 4293918720;
pub const DAC_DHR8RD_DACC1DHR_Pos: u32 = 0;
pub const DAC_DHR8RD_DACC1DHR_Msk: u32 = 255;
pub const DAC_DHR8RD_DACC1DHR: u32 = 255;
pub const DAC_DHR8RD_DACC2DHR_Pos: u32 = 8;
pub const DAC_DHR8RD_DACC2DHR_Msk: u32 = 65280;
pub const DAC_DHR8RD_DACC2DHR: u32 = 65280;
pub const DAC_DOR1_DACC1DOR_Pos: u32 = 0;
pub const DAC_DOR1_DACC1DOR_Msk: u32 = 4095;
pub const DAC_DOR1_DACC1DOR: u32 = 4095;
pub const DAC_DOR2_DACC2DOR_Pos: u32 = 0;
pub const DAC_DOR2_DACC2DOR_Msk: u32 = 4095;
pub const DAC_DOR2_DACC2DOR: u32 = 4095;
pub const DAC_SR_DMAUDR1_Pos: u32 = 13;
pub const DAC_SR_DMAUDR1_Msk: u32 = 8192;
pub const DAC_SR_DMAUDR1: u32 = 8192;
pub const DAC_SR_DMAUDR2_Pos: u32 = 29;
pub const DAC_SR_DMAUDR2_Msk: u32 = 536870912;
pub const DAC_SR_DMAUDR2: u32 = 536870912;
pub const DBGMCU_IDCODE_DEV_ID_Pos: u32 = 0;
pub const DBGMCU_IDCODE_DEV_ID_Msk: u32 = 4095;
pub const DBGMCU_IDCODE_DEV_ID: u32 = 4095;
pub const DBGMCU_IDCODE_REV_ID_Pos: u32 = 16;
pub const DBGMCU_IDCODE_REV_ID_Msk: u32 = 4294901760;
pub const DBGMCU_IDCODE_REV_ID: u32 = 4294901760;
pub const DBGMCU_CR_DBG_SLEEP_Pos: u32 = 0;
pub const DBGMCU_CR_DBG_SLEEP_Msk: u32 = 1;
pub const DBGMCU_CR_DBG_SLEEP: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Pos: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Msk: u32 = 2;
pub const DBGMCU_CR_DBG_STOP: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Pos: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Msk: u32 = 4;
pub const DBGMCU_CR_DBG_STANDBY: u32 = 4;
pub const DBGMCU_CR_TRACE_IOEN_Pos: u32 = 5;
pub const DBGMCU_CR_TRACE_IOEN_Msk: u32 = 32;
pub const DBGMCU_CR_TRACE_IOEN: u32 = 32;
pub const DBGMCU_CR_TRACE_MODE_Pos: u32 = 6;
pub const DBGMCU_CR_TRACE_MODE_Msk: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE_0: u32 = 64;
pub const DBGMCU_CR_TRACE_MODE_1: u32 = 128;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos: u32 = 0;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk: u32 = 16;
pub const DBGMCU_APB1_FZ_DBG_TIM6_STOP: u32 = 16;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos: u32 = 5;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk: u32 = 32;
pub const DBGMCU_APB1_FZ_DBG_TIM7_STOP: u32 = 32;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos: u32 = 10;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos: u32 = 11;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos: u32 = 12;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos: u32 = 21;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos: u32 = 22;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos: u32 = 25;
pub const DBGMCU_APB1_FZ_DBG_CAN_STOP_Msk: u32 = 33554432;
pub const DBGMCU_APB1_FZ_DBG_CAN_STOP: u32 = 33554432;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos: u32 = 0;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk: u32 = 1;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP: u32 = 1;
pub const DBGMCU_APB2_FZ_DBG_TIM8_STOP_Pos: u32 = 1;
pub const DBGMCU_APB2_FZ_DBG_TIM8_STOP_Msk: u32 = 2;
pub const DBGMCU_APB2_FZ_DBG_TIM8_STOP: u32 = 2;
pub const DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos: u32 = 2;
pub const DBGMCU_APB2_FZ_DBG_TIM15_STOP_Msk: u32 = 4;
pub const DBGMCU_APB2_FZ_DBG_TIM15_STOP: u32 = 4;
pub const DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos: u32 = 3;
pub const DBGMCU_APB2_FZ_DBG_TIM16_STOP_Msk: u32 = 8;
pub const DBGMCU_APB2_FZ_DBG_TIM16_STOP: u32 = 8;
pub const DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos: u32 = 4;
pub const DBGMCU_APB2_FZ_DBG_TIM17_STOP_Msk: u32 = 16;
pub const DBGMCU_APB2_FZ_DBG_TIM17_STOP: u32 = 16;
pub const DMA_ISR_GIF1_Pos: u32 = 0;
pub const DMA_ISR_GIF1_Msk: u32 = 1;
pub const DMA_ISR_GIF1: u32 = 1;
pub const DMA_ISR_TCIF1_Pos: u32 = 1;
pub const DMA_ISR_TCIF1_Msk: u32 = 2;
pub const DMA_ISR_TCIF1: u32 = 2;
pub const DMA_ISR_HTIF1_Pos: u32 = 2;
pub const DMA_ISR_HTIF1_Msk: u32 = 4;
pub const DMA_ISR_HTIF1: u32 = 4;
pub const DMA_ISR_TEIF1_Pos: u32 = 3;
pub const DMA_ISR_TEIF1_Msk: u32 = 8;
pub const DMA_ISR_TEIF1: u32 = 8;
pub const DMA_ISR_GIF2_Pos: u32 = 4;
pub const DMA_ISR_GIF2_Msk: u32 = 16;
pub const DMA_ISR_GIF2: u32 = 16;
pub const DMA_ISR_TCIF2_Pos: u32 = 5;
pub const DMA_ISR_TCIF2_Msk: u32 = 32;
pub const DMA_ISR_TCIF2: u32 = 32;
pub const DMA_ISR_HTIF2_Pos: u32 = 6;
pub const DMA_ISR_HTIF2_Msk: u32 = 64;
pub const DMA_ISR_HTIF2: u32 = 64;
pub const DMA_ISR_TEIF2_Pos: u32 = 7;
pub const DMA_ISR_TEIF2_Msk: u32 = 128;
pub const DMA_ISR_TEIF2: u32 = 128;
pub const DMA_ISR_GIF3_Pos: u32 = 8;
pub const DMA_ISR_GIF3_Msk: u32 = 256;
pub const DMA_ISR_GIF3: u32 = 256;
pub const DMA_ISR_TCIF3_Pos: u32 = 9;
pub const DMA_ISR_TCIF3_Msk: u32 = 512;
pub const DMA_ISR_TCIF3: u32 = 512;
pub const DMA_ISR_HTIF3_Pos: u32 = 10;
pub const DMA_ISR_HTIF3_Msk: u32 = 1024;
pub const DMA_ISR_HTIF3: u32 = 1024;
pub const DMA_ISR_TEIF3_Pos: u32 = 11;
pub const DMA_ISR_TEIF3_Msk: u32 = 2048;
pub const DMA_ISR_TEIF3: u32 = 2048;
pub const DMA_ISR_GIF4_Pos: u32 = 12;
pub const DMA_ISR_GIF4_Msk: u32 = 4096;
pub const DMA_ISR_GIF4: u32 = 4096;
pub const DMA_ISR_TCIF4_Pos: u32 = 13;
pub const DMA_ISR_TCIF4_Msk: u32 = 8192;
pub const DMA_ISR_TCIF4: u32 = 8192;
pub const DMA_ISR_HTIF4_Pos: u32 = 14;
pub const DMA_ISR_HTIF4_Msk: u32 = 16384;
pub const DMA_ISR_HTIF4: u32 = 16384;
pub const DMA_ISR_TEIF4_Pos: u32 = 15;
pub const DMA_ISR_TEIF4_Msk: u32 = 32768;
pub const DMA_ISR_TEIF4: u32 = 32768;
pub const DMA_ISR_GIF5_Pos: u32 = 16;
pub const DMA_ISR_GIF5_Msk: u32 = 65536;
pub const DMA_ISR_GIF5: u32 = 65536;
pub const DMA_ISR_TCIF5_Pos: u32 = 17;
pub const DMA_ISR_TCIF5_Msk: u32 = 131072;
pub const DMA_ISR_TCIF5: u32 = 131072;
pub const DMA_ISR_HTIF5_Pos: u32 = 18;
pub const DMA_ISR_HTIF5_Msk: u32 = 262144;
pub const DMA_ISR_HTIF5: u32 = 262144;
pub const DMA_ISR_TEIF5_Pos: u32 = 19;
pub const DMA_ISR_TEIF5_Msk: u32 = 524288;
pub const DMA_ISR_TEIF5: u32 = 524288;
pub const DMA_ISR_GIF6_Pos: u32 = 20;
pub const DMA_ISR_GIF6_Msk: u32 = 1048576;
pub const DMA_ISR_GIF6: u32 = 1048576;
pub const DMA_ISR_TCIF6_Pos: u32 = 21;
pub const DMA_ISR_TCIF6_Msk: u32 = 2097152;
pub const DMA_ISR_TCIF6: u32 = 2097152;
pub const DMA_ISR_HTIF6_Pos: u32 = 22;
pub const DMA_ISR_HTIF6_Msk: u32 = 4194304;
pub const DMA_ISR_HTIF6: u32 = 4194304;
pub const DMA_ISR_TEIF6_Pos: u32 = 23;
pub const DMA_ISR_TEIF6_Msk: u32 = 8388608;
pub const DMA_ISR_TEIF6: u32 = 8388608;
pub const DMA_ISR_GIF7_Pos: u32 = 24;
pub const DMA_ISR_GIF7_Msk: u32 = 16777216;
pub const DMA_ISR_GIF7: u32 = 16777216;
pub const DMA_ISR_TCIF7_Pos: u32 = 25;
pub const DMA_ISR_TCIF7_Msk: u32 = 33554432;
pub const DMA_ISR_TCIF7: u32 = 33554432;
pub const DMA_ISR_HTIF7_Pos: u32 = 26;
pub const DMA_ISR_HTIF7_Msk: u32 = 67108864;
pub const DMA_ISR_HTIF7: u32 = 67108864;
pub const DMA_ISR_TEIF7_Pos: u32 = 27;
pub const DMA_ISR_TEIF7_Msk: u32 = 134217728;
pub const DMA_ISR_TEIF7: u32 = 134217728;
pub const DMA_IFCR_CGIF1_Pos: u32 = 0;
pub const DMA_IFCR_CGIF1_Msk: u32 = 1;
pub const DMA_IFCR_CGIF1: u32 = 1;
pub const DMA_IFCR_CTCIF1_Pos: u32 = 1;
pub const DMA_IFCR_CTCIF1_Msk: u32 = 2;
pub const DMA_IFCR_CTCIF1: u32 = 2;
pub const DMA_IFCR_CHTIF1_Pos: u32 = 2;
pub const DMA_IFCR_CHTIF1_Msk: u32 = 4;
pub const DMA_IFCR_CHTIF1: u32 = 4;
pub const DMA_IFCR_CTEIF1_Pos: u32 = 3;
pub const DMA_IFCR_CTEIF1_Msk: u32 = 8;
pub const DMA_IFCR_CTEIF1: u32 = 8;
pub const DMA_IFCR_CGIF2_Pos: u32 = 4;
pub const DMA_IFCR_CGIF2_Msk: u32 = 16;
pub const DMA_IFCR_CGIF2: u32 = 16;
pub const DMA_IFCR_CTCIF2_Pos: u32 = 5;
pub const DMA_IFCR_CTCIF2_Msk: u32 = 32;
pub const DMA_IFCR_CTCIF2: u32 = 32;
pub const DMA_IFCR_CHTIF2_Pos: u32 = 6;
pub const DMA_IFCR_CHTIF2_Msk: u32 = 64;
pub const DMA_IFCR_CHTIF2: u32 = 64;
pub const DMA_IFCR_CTEIF2_Pos: u32 = 7;
pub const DMA_IFCR_CTEIF2_Msk: u32 = 128;
pub const DMA_IFCR_CTEIF2: u32 = 128;
pub const DMA_IFCR_CGIF3_Pos: u32 = 8;
pub const DMA_IFCR_CGIF3_Msk: u32 = 256;
pub const DMA_IFCR_CGIF3: u32 = 256;
pub const DMA_IFCR_CTCIF3_Pos: u32 = 9;
pub const DMA_IFCR_CTCIF3_Msk: u32 = 512;
pub const DMA_IFCR_CTCIF3: u32 = 512;
pub const DMA_IFCR_CHTIF3_Pos: u32 = 10;
pub const DMA_IFCR_CHTIF3_Msk: u32 = 1024;
pub const DMA_IFCR_CHTIF3: u32 = 1024;
pub const DMA_IFCR_CTEIF3_Pos: u32 = 11;
pub const DMA_IFCR_CTEIF3_Msk: u32 = 2048;
pub const DMA_IFCR_CTEIF3: u32 = 2048;
pub const DMA_IFCR_CGIF4_Pos: u32 = 12;
pub const DMA_IFCR_CGIF4_Msk: u32 = 4096;
pub const DMA_IFCR_CGIF4: u32 = 4096;
pub const DMA_IFCR_CTCIF4_Pos: u32 = 13;
pub const DMA_IFCR_CTCIF4_Msk: u32 = 8192;
pub const DMA_IFCR_CTCIF4: u32 = 8192;
pub const DMA_IFCR_CHTIF4_Pos: u32 = 14;
pub const DMA_IFCR_CHTIF4_Msk: u32 = 16384;
pub const DMA_IFCR_CHTIF4: u32 = 16384;
pub const DMA_IFCR_CTEIF4_Pos: u32 = 15;
pub const DMA_IFCR_CTEIF4_Msk: u32 = 32768;
pub const DMA_IFCR_CTEIF4: u32 = 32768;
pub const DMA_IFCR_CGIF5_Pos: u32 = 16;
pub const DMA_IFCR_CGIF5_Msk: u32 = 65536;
pub const DMA_IFCR_CGIF5: u32 = 65536;
pub const DMA_IFCR_CTCIF5_Pos: u32 = 17;
pub const DMA_IFCR_CTCIF5_Msk: u32 = 131072;
pub const DMA_IFCR_CTCIF5: u32 = 131072;
pub const DMA_IFCR_CHTIF5_Pos: u32 = 18;
pub const DMA_IFCR_CHTIF5_Msk: u32 = 262144;
pub const DMA_IFCR_CHTIF5: u32 = 262144;
pub const DMA_IFCR_CTEIF5_Pos: u32 = 19;
pub const DMA_IFCR_CTEIF5_Msk: u32 = 524288;
pub const DMA_IFCR_CTEIF5: u32 = 524288;
pub const DMA_IFCR_CGIF6_Pos: u32 = 20;
pub const DMA_IFCR_CGIF6_Msk: u32 = 1048576;
pub const DMA_IFCR_CGIF6: u32 = 1048576;
pub const DMA_IFCR_CTCIF6_Pos: u32 = 21;
pub const DMA_IFCR_CTCIF6_Msk: u32 = 2097152;
pub const DMA_IFCR_CTCIF6: u32 = 2097152;
pub const DMA_IFCR_CHTIF6_Pos: u32 = 22;
pub const DMA_IFCR_CHTIF6_Msk: u32 = 4194304;
pub const DMA_IFCR_CHTIF6: u32 = 4194304;
pub const DMA_IFCR_CTEIF6_Pos: u32 = 23;
pub const DMA_IFCR_CTEIF6_Msk: u32 = 8388608;
pub const DMA_IFCR_CTEIF6: u32 = 8388608;
pub const DMA_IFCR_CGIF7_Pos: u32 = 24;
pub const DMA_IFCR_CGIF7_Msk: u32 = 16777216;
pub const DMA_IFCR_CGIF7: u32 = 16777216;
pub const DMA_IFCR_CTCIF7_Pos: u32 = 25;
pub const DMA_IFCR_CTCIF7_Msk: u32 = 33554432;
pub const DMA_IFCR_CTCIF7: u32 = 33554432;
pub const DMA_IFCR_CHTIF7_Pos: u32 = 26;
pub const DMA_IFCR_CHTIF7_Msk: u32 = 67108864;
pub const DMA_IFCR_CHTIF7: u32 = 67108864;
pub const DMA_IFCR_CTEIF7_Pos: u32 = 27;
pub const DMA_IFCR_CTEIF7_Msk: u32 = 134217728;
pub const DMA_IFCR_CTEIF7: u32 = 134217728;
pub const DMA_CCR_EN_Pos: u32 = 0;
pub const DMA_CCR_EN_Msk: u32 = 1;
pub const DMA_CCR_EN: u32 = 1;
pub const DMA_CCR_TCIE_Pos: u32 = 1;
pub const DMA_CCR_TCIE_Msk: u32 = 2;
pub const DMA_CCR_TCIE: u32 = 2;
pub const DMA_CCR_HTIE_Pos: u32 = 2;
pub const DMA_CCR_HTIE_Msk: u32 = 4;
pub const DMA_CCR_HTIE: u32 = 4;
pub const DMA_CCR_TEIE_Pos: u32 = 3;
pub const DMA_CCR_TEIE_Msk: u32 = 8;
pub const DMA_CCR_TEIE: u32 = 8;
pub const DMA_CCR_DIR_Pos: u32 = 4;
pub const DMA_CCR_DIR_Msk: u32 = 16;
pub const DMA_CCR_DIR: u32 = 16;
pub const DMA_CCR_CIRC_Pos: u32 = 5;
pub const DMA_CCR_CIRC_Msk: u32 = 32;
pub const DMA_CCR_CIRC: u32 = 32;
pub const DMA_CCR_PINC_Pos: u32 = 6;
pub const DMA_CCR_PINC_Msk: u32 = 64;
pub const DMA_CCR_PINC: u32 = 64;
pub const DMA_CCR_MINC_Pos: u32 = 7;
pub const DMA_CCR_MINC_Msk: u32 = 128;
pub const DMA_CCR_MINC: u32 = 128;
pub const DMA_CCR_PSIZE_Pos: u32 = 8;
pub const DMA_CCR_PSIZE_Msk: u32 = 768;
pub const DMA_CCR_PSIZE: u32 = 768;
pub const DMA_CCR_PSIZE_0: u32 = 256;
pub const DMA_CCR_PSIZE_1: u32 = 512;
pub const DMA_CCR_MSIZE_Pos: u32 = 10;
pub const DMA_CCR_MSIZE_Msk: u32 = 3072;
pub const DMA_CCR_MSIZE: u32 = 3072;
pub const DMA_CCR_MSIZE_0: u32 = 1024;
pub const DMA_CCR_MSIZE_1: u32 = 2048;
pub const DMA_CCR_PL_Pos: u32 = 12;
pub const DMA_CCR_PL_Msk: u32 = 12288;
pub const DMA_CCR_PL: u32 = 12288;
pub const DMA_CCR_PL_0: u32 = 4096;
pub const DMA_CCR_PL_1: u32 = 8192;
pub const DMA_CCR_MEM2MEM_Pos: u32 = 14;
pub const DMA_CCR_MEM2MEM_Msk: u32 = 16384;
pub const DMA_CCR_MEM2MEM: u32 = 16384;
pub const DMA_CNDTR_NDT_Pos: u32 = 0;
pub const DMA_CNDTR_NDT_Msk: u32 = 65535;
pub const DMA_CNDTR_NDT: u32 = 65535;
pub const DMA_CPAR_PA_Pos: u32 = 0;
pub const DMA_CPAR_PA_Msk: u32 = 4294967295;
pub const DMA_CPAR_PA: u32 = 4294967295;
pub const DMA_CMAR_MA_Pos: u32 = 0;
pub const DMA_CMAR_MA_Msk: u32 = 4294967295;
pub const DMA_CMAR_MA: u32 = 4294967295;
pub const EXTI_IMR_MR0_Pos: u32 = 0;
pub const EXTI_IMR_MR0_Msk: u32 = 1;
pub const EXTI_IMR_MR0: u32 = 1;
pub const EXTI_IMR_MR1_Pos: u32 = 1;
pub const EXTI_IMR_MR1_Msk: u32 = 2;
pub const EXTI_IMR_MR1: u32 = 2;
pub const EXTI_IMR_MR2_Pos: u32 = 2;
pub const EXTI_IMR_MR2_Msk: u32 = 4;
pub const EXTI_IMR_MR2: u32 = 4;
pub const EXTI_IMR_MR3_Pos: u32 = 3;
pub const EXTI_IMR_MR3_Msk: u32 = 8;
pub const EXTI_IMR_MR3: u32 = 8;
pub const EXTI_IMR_MR4_Pos: u32 = 4;
pub const EXTI_IMR_MR4_Msk: u32 = 16;
pub const EXTI_IMR_MR4: u32 = 16;
pub const EXTI_IMR_MR5_Pos: u32 = 5;
pub const EXTI_IMR_MR5_Msk: u32 = 32;
pub const EXTI_IMR_MR5: u32 = 32;
pub const EXTI_IMR_MR6_Pos: u32 = 6;
pub const EXTI_IMR_MR6_Msk: u32 = 64;
pub const EXTI_IMR_MR6: u32 = 64;
pub const EXTI_IMR_MR7_Pos: u32 = 7;
pub const EXTI_IMR_MR7_Msk: u32 = 128;
pub const EXTI_IMR_MR7: u32 = 128;
pub const EXTI_IMR_MR8_Pos: u32 = 8;
pub const EXTI_IMR_MR8_Msk: u32 = 256;
pub const EXTI_IMR_MR8: u32 = 256;
pub const EXTI_IMR_MR9_Pos: u32 = 9;
pub const EXTI_IMR_MR9_Msk: u32 = 512;
pub const EXTI_IMR_MR9: u32 = 512;
pub const EXTI_IMR_MR10_Pos: u32 = 10;
pub const EXTI_IMR_MR10_Msk: u32 = 1024;
pub const EXTI_IMR_MR10: u32 = 1024;
pub const EXTI_IMR_MR11_Pos: u32 = 11;
pub const EXTI_IMR_MR11_Msk: u32 = 2048;
pub const EXTI_IMR_MR11: u32 = 2048;
pub const EXTI_IMR_MR12_Pos: u32 = 12;
pub const EXTI_IMR_MR12_Msk: u32 = 4096;
pub const EXTI_IMR_MR12: u32 = 4096;
pub const EXTI_IMR_MR13_Pos: u32 = 13;
pub const EXTI_IMR_MR13_Msk: u32 = 8192;
pub const EXTI_IMR_MR13: u32 = 8192;
pub const EXTI_IMR_MR14_Pos: u32 = 14;
pub const EXTI_IMR_MR14_Msk: u32 = 16384;
pub const EXTI_IMR_MR14: u32 = 16384;
pub const EXTI_IMR_MR15_Pos: u32 = 15;
pub const EXTI_IMR_MR15_Msk: u32 = 32768;
pub const EXTI_IMR_MR15: u32 = 32768;
pub const EXTI_IMR_MR16_Pos: u32 = 16;
pub const EXTI_IMR_MR16_Msk: u32 = 65536;
pub const EXTI_IMR_MR16: u32 = 65536;
pub const EXTI_IMR_MR17_Pos: u32 = 17;
pub const EXTI_IMR_MR17_Msk: u32 = 131072;
pub const EXTI_IMR_MR17: u32 = 131072;
pub const EXTI_IMR_MR18_Pos: u32 = 18;
pub const EXTI_IMR_MR18_Msk: u32 = 262144;
pub const EXTI_IMR_MR18: u32 = 262144;
pub const EXTI_IMR_MR19_Pos: u32 = 19;
pub const EXTI_IMR_MR19_Msk: u32 = 524288;
pub const EXTI_IMR_MR19: u32 = 524288;
pub const EXTI_IMR_MR20_Pos: u32 = 20;
pub const EXTI_IMR_MR20_Msk: u32 = 1048576;
pub const EXTI_IMR_MR20: u32 = 1048576;
pub const EXTI_IMR_MR21_Pos: u32 = 21;
pub const EXTI_IMR_MR21_Msk: u32 = 2097152;
pub const EXTI_IMR_MR21: u32 = 2097152;
pub const EXTI_IMR_MR22_Pos: u32 = 22;
pub const EXTI_IMR_MR22_Msk: u32 = 4194304;
pub const EXTI_IMR_MR22: u32 = 4194304;
pub const EXTI_IMR_MR23_Pos: u32 = 23;
pub const EXTI_IMR_MR23_Msk: u32 = 8388608;
pub const EXTI_IMR_MR23: u32 = 8388608;
pub const EXTI_IMR_MR24_Pos: u32 = 24;
pub const EXTI_IMR_MR24_Msk: u32 = 16777216;
pub const EXTI_IMR_MR24: u32 = 16777216;
pub const EXTI_IMR_MR25_Pos: u32 = 25;
pub const EXTI_IMR_MR25_Msk: u32 = 33554432;
pub const EXTI_IMR_MR25: u32 = 33554432;
pub const EXTI_IMR_MR26_Pos: u32 = 26;
pub const EXTI_IMR_MR26_Msk: u32 = 67108864;
pub const EXTI_IMR_MR26: u32 = 67108864;
pub const EXTI_IMR_MR28_Pos: u32 = 28;
pub const EXTI_IMR_MR28_Msk: u32 = 268435456;
pub const EXTI_IMR_MR28: u32 = 268435456;
pub const EXTI_IMR_MR29_Pos: u32 = 29;
pub const EXTI_IMR_MR29_Msk: u32 = 536870912;
pub const EXTI_IMR_MR29: u32 = 536870912;
pub const EXTI_IMR_MR30_Pos: u32 = 30;
pub const EXTI_IMR_MR30_Msk: u32 = 1073741824;
pub const EXTI_IMR_MR30: u32 = 1073741824;
pub const EXTI_IMR_MR31_Pos: u32 = 31;
pub const EXTI_IMR_MR31_Msk: u32 = 2147483648;
pub const EXTI_IMR_MR31: u32 = 2147483648;
pub const EXTI_IMR_IM0: u32 = 1;
pub const EXTI_IMR_IM1: u32 = 2;
pub const EXTI_IMR_IM2: u32 = 4;
pub const EXTI_IMR_IM3: u32 = 8;
pub const EXTI_IMR_IM4: u32 = 16;
pub const EXTI_IMR_IM5: u32 = 32;
pub const EXTI_IMR_IM6: u32 = 64;
pub const EXTI_IMR_IM7: u32 = 128;
pub const EXTI_IMR_IM8: u32 = 256;
pub const EXTI_IMR_IM9: u32 = 512;
pub const EXTI_IMR_IM10: u32 = 1024;
pub const EXTI_IMR_IM11: u32 = 2048;
pub const EXTI_IMR_IM12: u32 = 4096;
pub const EXTI_IMR_IM13: u32 = 8192;
pub const EXTI_IMR_IM14: u32 = 16384;
pub const EXTI_IMR_IM15: u32 = 32768;
pub const EXTI_IMR_IM16: u32 = 65536;
pub const EXTI_IMR_IM17: u32 = 131072;
pub const EXTI_IMR_IM18: u32 = 262144;
pub const EXTI_IMR_IM19: u32 = 524288;
pub const EXTI_IMR_IM20: u32 = 1048576;
pub const EXTI_IMR_IM21: u32 = 2097152;
pub const EXTI_IMR_IM22: u32 = 4194304;
pub const EXTI_IMR_IM23: u32 = 8388608;
pub const EXTI_IMR_IM24: u32 = 16777216;
pub const EXTI_IMR_IM25: u32 = 33554432;
pub const EXTI_IMR_IM26: u32 = 67108864;
pub const EXTI_IMR_IM28: u32 = 268435456;
pub const EXTI_IMR_IM29: u32 = 536870912;
pub const EXTI_IMR_IM30: u32 = 1073741824;
pub const EXTI_IMR_IM31: u32 = 2147483648;
pub const EXTI_IMR_IM_Pos: u32 = 0;
pub const EXTI_IMR_IM_Msk: u32 = 4294967295;
pub const EXTI_IMR_IM: u32 = 4294967295;
pub const EXTI_EMR_MR0_Pos: u32 = 0;
pub const EXTI_EMR_MR0_Msk: u32 = 1;
pub const EXTI_EMR_MR0: u32 = 1;
pub const EXTI_EMR_MR1_Pos: u32 = 1;
pub const EXTI_EMR_MR1_Msk: u32 = 2;
pub const EXTI_EMR_MR1: u32 = 2;
pub const EXTI_EMR_MR2_Pos: u32 = 2;
pub const EXTI_EMR_MR2_Msk: u32 = 4;
pub const EXTI_EMR_MR2: u32 = 4;
pub const EXTI_EMR_MR3_Pos: u32 = 3;
pub const EXTI_EMR_MR3_Msk: u32 = 8;
pub const EXTI_EMR_MR3: u32 = 8;
pub const EXTI_EMR_MR4_Pos: u32 = 4;
pub const EXTI_EMR_MR4_Msk: u32 = 16;
pub const EXTI_EMR_MR4: u32 = 16;
pub const EXTI_EMR_MR5_Pos: u32 = 5;
pub const EXTI_EMR_MR5_Msk: u32 = 32;
pub const EXTI_EMR_MR5: u32 = 32;
pub const EXTI_EMR_MR6_Pos: u32 = 6;
pub const EXTI_EMR_MR6_Msk: u32 = 64;
pub const EXTI_EMR_MR6: u32 = 64;
pub const EXTI_EMR_MR7_Pos: u32 = 7;
pub const EXTI_EMR_MR7_Msk: u32 = 128;
pub const EXTI_EMR_MR7: u32 = 128;
pub const EXTI_EMR_MR8_Pos: u32 = 8;
pub const EXTI_EMR_MR8_Msk: u32 = 256;
pub const EXTI_EMR_MR8: u32 = 256;
pub const EXTI_EMR_MR9_Pos: u32 = 9;
pub const EXTI_EMR_MR9_Msk: u32 = 512;
pub const EXTI_EMR_MR9: u32 = 512;
pub const EXTI_EMR_MR10_Pos: u32 = 10;
pub const EXTI_EMR_MR10_Msk: u32 = 1024;
pub const EXTI_EMR_MR10: u32 = 1024;
pub const EXTI_EMR_MR11_Pos: u32 = 11;
pub const EXTI_EMR_MR11_Msk: u32 = 2048;
pub const EXTI_EMR_MR11: u32 = 2048;
pub const EXTI_EMR_MR12_Pos: u32 = 12;
pub const EXTI_EMR_MR12_Msk: u32 = 4096;
pub const EXTI_EMR_MR12: u32 = 4096;
pub const EXTI_EMR_MR13_Pos: u32 = 13;
pub const EXTI_EMR_MR13_Msk: u32 = 8192;
pub const EXTI_EMR_MR13: u32 = 8192;
pub const EXTI_EMR_MR14_Pos: u32 = 14;
pub const EXTI_EMR_MR14_Msk: u32 = 16384;
pub const EXTI_EMR_MR14: u32 = 16384;
pub const EXTI_EMR_MR15_Pos: u32 = 15;
pub const EXTI_EMR_MR15_Msk: u32 = 32768;
pub const EXTI_EMR_MR15: u32 = 32768;
pub const EXTI_EMR_MR16_Pos: u32 = 16;
pub const EXTI_EMR_MR16_Msk: u32 = 65536;
pub const EXTI_EMR_MR16: u32 = 65536;
pub const EXTI_EMR_MR17_Pos: u32 = 17;
pub const EXTI_EMR_MR17_Msk: u32 = 131072;
pub const EXTI_EMR_MR17: u32 = 131072;
pub const EXTI_EMR_MR18_Pos: u32 = 18;
pub const EXTI_EMR_MR18_Msk: u32 = 262144;
pub const EXTI_EMR_MR18: u32 = 262144;
pub const EXTI_EMR_MR19_Pos: u32 = 19;
pub const EXTI_EMR_MR19_Msk: u32 = 524288;
pub const EXTI_EMR_MR19: u32 = 524288;
pub const EXTI_EMR_MR20_Pos: u32 = 20;
pub const EXTI_EMR_MR20_Msk: u32 = 1048576;
pub const EXTI_EMR_MR20: u32 = 1048576;
pub const EXTI_EMR_MR21_Pos: u32 = 21;
pub const EXTI_EMR_MR21_Msk: u32 = 2097152;
pub const EXTI_EMR_MR21: u32 = 2097152;
pub const EXTI_EMR_MR22_Pos: u32 = 22;
pub const EXTI_EMR_MR22_Msk: u32 = 4194304;
pub const EXTI_EMR_MR22: u32 = 4194304;
pub const EXTI_EMR_MR23_Pos: u32 = 23;
pub const EXTI_EMR_MR23_Msk: u32 = 8388608;
pub const EXTI_EMR_MR23: u32 = 8388608;
pub const EXTI_EMR_MR24_Pos: u32 = 24;
pub const EXTI_EMR_MR24_Msk: u32 = 16777216;
pub const EXTI_EMR_MR24: u32 = 16777216;
pub const EXTI_EMR_MR25_Pos: u32 = 25;
pub const EXTI_EMR_MR25_Msk: u32 = 33554432;
pub const EXTI_EMR_MR25: u32 = 33554432;
pub const EXTI_EMR_MR26_Pos: u32 = 26;
pub const EXTI_EMR_MR26_Msk: u32 = 67108864;
pub const EXTI_EMR_MR26: u32 = 67108864;
pub const EXTI_EMR_MR28_Pos: u32 = 28;
pub const EXTI_EMR_MR28_Msk: u32 = 268435456;
pub const EXTI_EMR_MR28: u32 = 268435456;
pub const EXTI_EMR_MR29_Pos: u32 = 29;
pub const EXTI_EMR_MR29_Msk: u32 = 536870912;
pub const EXTI_EMR_MR29: u32 = 536870912;
pub const EXTI_EMR_MR30_Pos: u32 = 30;
pub const EXTI_EMR_MR30_Msk: u32 = 1073741824;
pub const EXTI_EMR_MR30: u32 = 1073741824;
pub const EXTI_EMR_MR31_Pos: u32 = 31;
pub const EXTI_EMR_MR31_Msk: u32 = 2147483648;
pub const EXTI_EMR_MR31: u32 = 2147483648;
pub const EXTI_EMR_EM0: u32 = 1;
pub const EXTI_EMR_EM1: u32 = 2;
pub const EXTI_EMR_EM2: u32 = 4;
pub const EXTI_EMR_EM3: u32 = 8;
pub const EXTI_EMR_EM4: u32 = 16;
pub const EXTI_EMR_EM5: u32 = 32;
pub const EXTI_EMR_EM6: u32 = 64;
pub const EXTI_EMR_EM7: u32 = 128;
pub const EXTI_EMR_EM8: u32 = 256;
pub const EXTI_EMR_EM9: u32 = 512;
pub const EXTI_EMR_EM10: u32 = 1024;
pub const EXTI_EMR_EM11: u32 = 2048;
pub const EXTI_EMR_EM12: u32 = 4096;
pub const EXTI_EMR_EM13: u32 = 8192;
pub const EXTI_EMR_EM14: u32 = 16384;
pub const EXTI_EMR_EM15: u32 = 32768;
pub const EXTI_EMR_EM16: u32 = 65536;
pub const EXTI_EMR_EM17: u32 = 131072;
pub const EXTI_EMR_EM18: u32 = 262144;
pub const EXTI_EMR_EM19: u32 = 524288;
pub const EXTI_EMR_EM20: u32 = 1048576;
pub const EXTI_EMR_EM21: u32 = 2097152;
pub const EXTI_EMR_EM22: u32 = 4194304;
pub const EXTI_EMR_EM23: u32 = 8388608;
pub const EXTI_EMR_EM24: u32 = 16777216;
pub const EXTI_EMR_EM25: u32 = 33554432;
pub const EXTI_EMR_EM26: u32 = 67108864;
pub const EXTI_EMR_EM28: u32 = 268435456;
pub const EXTI_EMR_EM29: u32 = 536870912;
pub const EXTI_EMR_EM30: u32 = 1073741824;
pub const EXTI_EMR_EM31: u32 = 2147483648;
pub const EXTI_RTSR_TR0_Pos: u32 = 0;
pub const EXTI_RTSR_TR0_Msk: u32 = 1;
pub const EXTI_RTSR_TR0: u32 = 1;
pub const EXTI_RTSR_TR1_Pos: u32 = 1;
pub const EXTI_RTSR_TR1_Msk: u32 = 2;
pub const EXTI_RTSR_TR1: u32 = 2;
pub const EXTI_RTSR_TR2_Pos: u32 = 2;
pub const EXTI_RTSR_TR2_Msk: u32 = 4;
pub const EXTI_RTSR_TR2: u32 = 4;
pub const EXTI_RTSR_TR3_Pos: u32 = 3;
pub const EXTI_RTSR_TR3_Msk: u32 = 8;
pub const EXTI_RTSR_TR3: u32 = 8;
pub const EXTI_RTSR_TR4_Pos: u32 = 4;
pub const EXTI_RTSR_TR4_Msk: u32 = 16;
pub const EXTI_RTSR_TR4: u32 = 16;
pub const EXTI_RTSR_TR5_Pos: u32 = 5;
pub const EXTI_RTSR_TR5_Msk: u32 = 32;
pub const EXTI_RTSR_TR5: u32 = 32;
pub const EXTI_RTSR_TR6_Pos: u32 = 6;
pub const EXTI_RTSR_TR6_Msk: u32 = 64;
pub const EXTI_RTSR_TR6: u32 = 64;
pub const EXTI_RTSR_TR7_Pos: u32 = 7;
pub const EXTI_RTSR_TR7_Msk: u32 = 128;
pub const EXTI_RTSR_TR7: u32 = 128;
pub const EXTI_RTSR_TR8_Pos: u32 = 8;
pub const EXTI_RTSR_TR8_Msk: u32 = 256;
pub const EXTI_RTSR_TR8: u32 = 256;
pub const EXTI_RTSR_TR9_Pos: u32 = 9;
pub const EXTI_RTSR_TR9_Msk: u32 = 512;
pub const EXTI_RTSR_TR9: u32 = 512;
pub const EXTI_RTSR_TR10_Pos: u32 = 10;
pub const EXTI_RTSR_TR10_Msk: u32 = 1024;
pub const EXTI_RTSR_TR10: u32 = 1024;
pub const EXTI_RTSR_TR11_Pos: u32 = 11;
pub const EXTI_RTSR_TR11_Msk: u32 = 2048;
pub const EXTI_RTSR_TR11: u32 = 2048;
pub const EXTI_RTSR_TR12_Pos: u32 = 12;
pub const EXTI_RTSR_TR12_Msk: u32 = 4096;
pub const EXTI_RTSR_TR12: u32 = 4096;
pub const EXTI_RTSR_TR13_Pos: u32 = 13;
pub const EXTI_RTSR_TR13_Msk: u32 = 8192;
pub const EXTI_RTSR_TR13: u32 = 8192;
pub const EXTI_RTSR_TR14_Pos: u32 = 14;
pub const EXTI_RTSR_TR14_Msk: u32 = 16384;
pub const EXTI_RTSR_TR14: u32 = 16384;
pub const EXTI_RTSR_TR15_Pos: u32 = 15;
pub const EXTI_RTSR_TR15_Msk: u32 = 32768;
pub const EXTI_RTSR_TR15: u32 = 32768;
pub const EXTI_RTSR_TR16_Pos: u32 = 16;
pub const EXTI_RTSR_TR16_Msk: u32 = 65536;
pub const EXTI_RTSR_TR16: u32 = 65536;
pub const EXTI_RTSR_TR17_Pos: u32 = 17;
pub const EXTI_RTSR_TR17_Msk: u32 = 131072;
pub const EXTI_RTSR_TR17: u32 = 131072;
pub const EXTI_RTSR_TR18_Pos: u32 = 18;
pub const EXTI_RTSR_TR18_Msk: u32 = 262144;
pub const EXTI_RTSR_TR18: u32 = 262144;
pub const EXTI_RTSR_TR19_Pos: u32 = 19;
pub const EXTI_RTSR_TR19_Msk: u32 = 524288;
pub const EXTI_RTSR_TR19: u32 = 524288;
pub const EXTI_RTSR_TR20_Pos: u32 = 20;
pub const EXTI_RTSR_TR20_Msk: u32 = 1048576;
pub const EXTI_RTSR_TR20: u32 = 1048576;
pub const EXTI_RTSR_TR21_Pos: u32 = 21;
pub const EXTI_RTSR_TR21_Msk: u32 = 2097152;
pub const EXTI_RTSR_TR21: u32 = 2097152;
pub const EXTI_RTSR_TR22_Pos: u32 = 22;
pub const EXTI_RTSR_TR22_Msk: u32 = 4194304;
pub const EXTI_RTSR_TR22: u32 = 4194304;
pub const EXTI_RTSR_TR29_Pos: u32 = 29;
pub const EXTI_RTSR_TR29_Msk: u32 = 536870912;
pub const EXTI_RTSR_TR29: u32 = 536870912;
pub const EXTI_RTSR_TR30_Pos: u32 = 30;
pub const EXTI_RTSR_TR30_Msk: u32 = 1073741824;
pub const EXTI_RTSR_TR30: u32 = 1073741824;
pub const EXTI_RTSR_TR31_Pos: u32 = 31;
pub const EXTI_RTSR_TR31_Msk: u32 = 2147483648;
pub const EXTI_RTSR_TR31: u32 = 2147483648;
pub const EXTI_RTSR_RT0: u32 = 1;
pub const EXTI_RTSR_RT1: u32 = 2;
pub const EXTI_RTSR_RT2: u32 = 4;
pub const EXTI_RTSR_RT3: u32 = 8;
pub const EXTI_RTSR_RT4: u32 = 16;
pub const EXTI_RTSR_RT5: u32 = 32;
pub const EXTI_RTSR_RT6: u32 = 64;
pub const EXTI_RTSR_RT7: u32 = 128;
pub const EXTI_RTSR_RT8: u32 = 256;
pub const EXTI_RTSR_RT9: u32 = 512;
pub const EXTI_RTSR_RT10: u32 = 1024;
pub const EXTI_RTSR_RT11: u32 = 2048;
pub const EXTI_RTSR_RT12: u32 = 4096;
pub const EXTI_RTSR_RT13: u32 = 8192;
pub const EXTI_RTSR_RT14: u32 = 16384;
pub const EXTI_RTSR_RT15: u32 = 32768;
pub const EXTI_RTSR_RT16: u32 = 65536;
pub const EXTI_RTSR_RT17: u32 = 131072;
pub const EXTI_RTSR_RT18: u32 = 262144;
pub const EXTI_RTSR_RT19: u32 = 524288;
pub const EXTI_RTSR_RT20: u32 = 1048576;
pub const EXTI_RTSR_RT21: u32 = 2097152;
pub const EXTI_RTSR_RT22: u32 = 4194304;
pub const EXTI_RTSR_RT29: u32 = 536870912;
pub const EXTI_RTSR_RT30: u32 = 1073741824;
pub const EXTI_RTSR_RT31: u32 = 2147483648;
pub const EXTI_FTSR_TR0_Pos: u32 = 0;
pub const EXTI_FTSR_TR0_Msk: u32 = 1;
pub const EXTI_FTSR_TR0: u32 = 1;
pub const EXTI_FTSR_TR1_Pos: u32 = 1;
pub const EXTI_FTSR_TR1_Msk: u32 = 2;
pub const EXTI_FTSR_TR1: u32 = 2;
pub const EXTI_FTSR_TR2_Pos: u32 = 2;
pub const EXTI_FTSR_TR2_Msk: u32 = 4;
pub const EXTI_FTSR_TR2: u32 = 4;
pub const EXTI_FTSR_TR3_Pos: u32 = 3;
pub const EXTI_FTSR_TR3_Msk: u32 = 8;
pub const EXTI_FTSR_TR3: u32 = 8;
pub const EXTI_FTSR_TR4_Pos: u32 = 4;
pub const EXTI_FTSR_TR4_Msk: u32 = 16;
pub const EXTI_FTSR_TR4: u32 = 16;
pub const EXTI_FTSR_TR5_Pos: u32 = 5;
pub const EXTI_FTSR_TR5_Msk: u32 = 32;
pub const EXTI_FTSR_TR5: u32 = 32;
pub const EXTI_FTSR_TR6_Pos: u32 = 6;
pub const EXTI_FTSR_TR6_Msk: u32 = 64;
pub const EXTI_FTSR_TR6: u32 = 64;
pub const EXTI_FTSR_TR7_Pos: u32 = 7;
pub const EXTI_FTSR_TR7_Msk: u32 = 128;
pub const EXTI_FTSR_TR7: u32 = 128;
pub const EXTI_FTSR_TR8_Pos: u32 = 8;
pub const EXTI_FTSR_TR8_Msk: u32 = 256;
pub const EXTI_FTSR_TR8: u32 = 256;
pub const EXTI_FTSR_TR9_Pos: u32 = 9;
pub const EXTI_FTSR_TR9_Msk: u32 = 512;
pub const EXTI_FTSR_TR9: u32 = 512;
pub const EXTI_FTSR_TR10_Pos: u32 = 10;
pub const EXTI_FTSR_TR10_Msk: u32 = 1024;
pub const EXTI_FTSR_TR10: u32 = 1024;
pub const EXTI_FTSR_TR11_Pos: u32 = 11;
pub const EXTI_FTSR_TR11_Msk: u32 = 2048;
pub const EXTI_FTSR_TR11: u32 = 2048;
pub const EXTI_FTSR_TR12_Pos: u32 = 12;
pub const EXTI_FTSR_TR12_Msk: u32 = 4096;
pub const EXTI_FTSR_TR12: u32 = 4096;
pub const EXTI_FTSR_TR13_Pos: u32 = 13;
pub const EXTI_FTSR_TR13_Msk: u32 = 8192;
pub const EXTI_FTSR_TR13: u32 = 8192;
pub const EXTI_FTSR_TR14_Pos: u32 = 14;
pub const EXTI_FTSR_TR14_Msk: u32 = 16384;
pub const EXTI_FTSR_TR14: u32 = 16384;
pub const EXTI_FTSR_TR15_Pos: u32 = 15;
pub const EXTI_FTSR_TR15_Msk: u32 = 32768;
pub const EXTI_FTSR_TR15: u32 = 32768;
pub const EXTI_FTSR_TR16_Pos: u32 = 16;
pub const EXTI_FTSR_TR16_Msk: u32 = 65536;
pub const EXTI_FTSR_TR16: u32 = 65536;
pub const EXTI_FTSR_TR17_Pos: u32 = 17;
pub const EXTI_FTSR_TR17_Msk: u32 = 131072;
pub const EXTI_FTSR_TR17: u32 = 131072;
pub const EXTI_FTSR_TR18_Pos: u32 = 18;
pub const EXTI_FTSR_TR18_Msk: u32 = 262144;
pub const EXTI_FTSR_TR18: u32 = 262144;
pub const EXTI_FTSR_TR19_Pos: u32 = 19;
pub const EXTI_FTSR_TR19_Msk: u32 = 524288;
pub const EXTI_FTSR_TR19: u32 = 524288;
pub const EXTI_FTSR_TR20_Pos: u32 = 20;
pub const EXTI_FTSR_TR20_Msk: u32 = 1048576;
pub const EXTI_FTSR_TR20: u32 = 1048576;
pub const EXTI_FTSR_TR21_Pos: u32 = 21;
pub const EXTI_FTSR_TR21_Msk: u32 = 2097152;
pub const EXTI_FTSR_TR21: u32 = 2097152;
pub const EXTI_FTSR_TR22_Pos: u32 = 22;
pub const EXTI_FTSR_TR22_Msk: u32 = 4194304;
pub const EXTI_FTSR_TR22: u32 = 4194304;
pub const EXTI_FTSR_TR29_Pos: u32 = 29;
pub const EXTI_FTSR_TR29_Msk: u32 = 536870912;
pub const EXTI_FTSR_TR29: u32 = 536870912;
pub const EXTI_FTSR_TR30_Pos: u32 = 30;
pub const EXTI_FTSR_TR30_Msk: u32 = 1073741824;
pub const EXTI_FTSR_TR30: u32 = 1073741824;
pub const EXTI_FTSR_TR31_Pos: u32 = 31;
pub const EXTI_FTSR_TR31_Msk: u32 = 2147483648;
pub const EXTI_FTSR_TR31: u32 = 2147483648;
pub const EXTI_FTSR_FT0: u32 = 1;
pub const EXTI_FTSR_FT1: u32 = 2;
pub const EXTI_FTSR_FT2: u32 = 4;
pub const EXTI_FTSR_FT3: u32 = 8;
pub const EXTI_FTSR_FT4: u32 = 16;
pub const EXTI_FTSR_FT5: u32 = 32;
pub const EXTI_FTSR_FT6: u32 = 64;
pub const EXTI_FTSR_FT7: u32 = 128;
pub const EXTI_FTSR_FT8: u32 = 256;
pub const EXTI_FTSR_FT9: u32 = 512;
pub const EXTI_FTSR_FT10: u32 = 1024;
pub const EXTI_FTSR_FT11: u32 = 2048;
pub const EXTI_FTSR_FT12: u32 = 4096;
pub const EXTI_FTSR_FT13: u32 = 8192;
pub const EXTI_FTSR_FT14: u32 = 16384;
pub const EXTI_FTSR_FT15: u32 = 32768;
pub const EXTI_FTSR_FT16: u32 = 65536;
pub const EXTI_FTSR_FT17: u32 = 131072;
pub const EXTI_FTSR_FT18: u32 = 262144;
pub const EXTI_FTSR_FT19: u32 = 524288;
pub const EXTI_FTSR_FT20: u32 = 1048576;
pub const EXTI_FTSR_FT21: u32 = 2097152;
pub const EXTI_FTSR_FT22: u32 = 4194304;
pub const EXTI_FTSR_FT29: u32 = 536870912;
pub const EXTI_FTSR_FT30: u32 = 1073741824;
pub const EXTI_FTSR_FT31: u32 = 2147483648;
pub const EXTI_SWIER_SWIER0_Pos: u32 = 0;
pub const EXTI_SWIER_SWIER0_Msk: u32 = 1;
pub const EXTI_SWIER_SWIER0: u32 = 1;
pub const EXTI_SWIER_SWIER1_Pos: u32 = 1;
pub const EXTI_SWIER_SWIER1_Msk: u32 = 2;
pub const EXTI_SWIER_SWIER1: u32 = 2;
pub const EXTI_SWIER_SWIER2_Pos: u32 = 2;
pub const EXTI_SWIER_SWIER2_Msk: u32 = 4;
pub const EXTI_SWIER_SWIER2: u32 = 4;
pub const EXTI_SWIER_SWIER3_Pos: u32 = 3;
pub const EXTI_SWIER_SWIER3_Msk: u32 = 8;
pub const EXTI_SWIER_SWIER3: u32 = 8;
pub const EXTI_SWIER_SWIER4_Pos: u32 = 4;
pub const EXTI_SWIER_SWIER4_Msk: u32 = 16;
pub const EXTI_SWIER_SWIER4: u32 = 16;
pub const EXTI_SWIER_SWIER5_Pos: u32 = 5;
pub const EXTI_SWIER_SWIER5_Msk: u32 = 32;
pub const EXTI_SWIER_SWIER5: u32 = 32;
pub const EXTI_SWIER_SWIER6_Pos: u32 = 6;
pub const EXTI_SWIER_SWIER6_Msk: u32 = 64;
pub const EXTI_SWIER_SWIER6: u32 = 64;
pub const EXTI_SWIER_SWIER7_Pos: u32 = 7;
pub const EXTI_SWIER_SWIER7_Msk: u32 = 128;
pub const EXTI_SWIER_SWIER7: u32 = 128;
pub const EXTI_SWIER_SWIER8_Pos: u32 = 8;
pub const EXTI_SWIER_SWIER8_Msk: u32 = 256;
pub const EXTI_SWIER_SWIER8: u32 = 256;
pub const EXTI_SWIER_SWIER9_Pos: u32 = 9;
pub const EXTI_SWIER_SWIER9_Msk: u32 = 512;
pub const EXTI_SWIER_SWIER9: u32 = 512;
pub const EXTI_SWIER_SWIER10_Pos: u32 = 10;
pub const EXTI_SWIER_SWIER10_Msk: u32 = 1024;
pub const EXTI_SWIER_SWIER10: u32 = 1024;
pub const EXTI_SWIER_SWIER11_Pos: u32 = 11;
pub const EXTI_SWIER_SWIER11_Msk: u32 = 2048;
pub const EXTI_SWIER_SWIER11: u32 = 2048;
pub const EXTI_SWIER_SWIER12_Pos: u32 = 12;
pub const EXTI_SWIER_SWIER12_Msk: u32 = 4096;
pub const EXTI_SWIER_SWIER12: u32 = 4096;
pub const EXTI_SWIER_SWIER13_Pos: u32 = 13;
pub const EXTI_SWIER_SWIER13_Msk: u32 = 8192;
pub const EXTI_SWIER_SWIER13: u32 = 8192;
pub const EXTI_SWIER_SWIER14_Pos: u32 = 14;
pub const EXTI_SWIER_SWIER14_Msk: u32 = 16384;
pub const EXTI_SWIER_SWIER14: u32 = 16384;
pub const EXTI_SWIER_SWIER15_Pos: u32 = 15;
pub const EXTI_SWIER_SWIER15_Msk: u32 = 32768;
pub const EXTI_SWIER_SWIER15: u32 = 32768;
pub const EXTI_SWIER_SWIER16_Pos: u32 = 16;
pub const EXTI_SWIER_SWIER16_Msk: u32 = 65536;
pub const EXTI_SWIER_SWIER16: u32 = 65536;
pub const EXTI_SWIER_SWIER17_Pos: u32 = 17;
pub const EXTI_SWIER_SWIER17_Msk: u32 = 131072;
pub const EXTI_SWIER_SWIER17: u32 = 131072;
pub const EXTI_SWIER_SWIER18_Pos: u32 = 18;
pub const EXTI_SWIER_SWIER18_Msk: u32 = 262144;
pub const EXTI_SWIER_SWIER18: u32 = 262144;
pub const EXTI_SWIER_SWIER19_Pos: u32 = 19;
pub const EXTI_SWIER_SWIER19_Msk: u32 = 524288;
pub const EXTI_SWIER_SWIER19: u32 = 524288;
pub const EXTI_SWIER_SWIER20_Pos: u32 = 20;
pub const EXTI_SWIER_SWIER20_Msk: u32 = 1048576;
pub const EXTI_SWIER_SWIER20: u32 = 1048576;
pub const EXTI_SWIER_SWIER21_Pos: u32 = 21;
pub const EXTI_SWIER_SWIER21_Msk: u32 = 2097152;
pub const EXTI_SWIER_SWIER21: u32 = 2097152;
pub const EXTI_SWIER_SWIER22_Pos: u32 = 22;
pub const EXTI_SWIER_SWIER22_Msk: u32 = 4194304;
pub const EXTI_SWIER_SWIER22: u32 = 4194304;
pub const EXTI_SWIER_SWIER29_Pos: u32 = 29;
pub const EXTI_SWIER_SWIER29_Msk: u32 = 536870912;
pub const EXTI_SWIER_SWIER29: u32 = 536870912;
pub const EXTI_SWIER_SWIER30_Pos: u32 = 30;
pub const EXTI_SWIER_SWIER30_Msk: u32 = 1073741824;
pub const EXTI_SWIER_SWIER30: u32 = 1073741824;
pub const EXTI_SWIER_SWIER31_Pos: u32 = 31;
pub const EXTI_SWIER_SWIER31_Msk: u32 = 2147483648;
pub const EXTI_SWIER_SWIER31: u32 = 2147483648;
pub const EXTI_SWIER_SWI0: u32 = 1;
pub const EXTI_SWIER_SWI1: u32 = 2;
pub const EXTI_SWIER_SWI2: u32 = 4;
pub const EXTI_SWIER_SWI3: u32 = 8;
pub const EXTI_SWIER_SWI4: u32 = 16;
pub const EXTI_SWIER_SWI5: u32 = 32;
pub const EXTI_SWIER_SWI6: u32 = 64;
pub const EXTI_SWIER_SWI7: u32 = 128;
pub const EXTI_SWIER_SWI8: u32 = 256;
pub const EXTI_SWIER_SWI9: u32 = 512;
pub const EXTI_SWIER_SWI10: u32 = 1024;
pub const EXTI_SWIER_SWI11: u32 = 2048;
pub const EXTI_SWIER_SWI12: u32 = 4096;
pub const EXTI_SWIER_SWI13: u32 = 8192;
pub const EXTI_SWIER_SWI14: u32 = 16384;
pub const EXTI_SWIER_SWI15: u32 = 32768;
pub const EXTI_SWIER_SWI16: u32 = 65536;
pub const EXTI_SWIER_SWI17: u32 = 131072;
pub const EXTI_SWIER_SWI18: u32 = 262144;
pub const EXTI_SWIER_SWI19: u32 = 524288;
pub const EXTI_SWIER_SWI20: u32 = 1048576;
pub const EXTI_SWIER_SWI21: u32 = 2097152;
pub const EXTI_SWIER_SWI22: u32 = 4194304;
pub const EXTI_SWIER_SWI29: u32 = 536870912;
pub const EXTI_SWIER_SWI30: u32 = 1073741824;
pub const EXTI_SWIER_SWI31: u32 = 2147483648;
pub const EXTI_PR_PR0_Pos: u32 = 0;
pub const EXTI_PR_PR0_Msk: u32 = 1;
pub const EXTI_PR_PR0: u32 = 1;
pub const EXTI_PR_PR1_Pos: u32 = 1;
pub const EXTI_PR_PR1_Msk: u32 = 2;
pub const EXTI_PR_PR1: u32 = 2;
pub const EXTI_PR_PR2_Pos: u32 = 2;
pub const EXTI_PR_PR2_Msk: u32 = 4;
pub const EXTI_PR_PR2: u32 = 4;
pub const EXTI_PR_PR3_Pos: u32 = 3;
pub const EXTI_PR_PR3_Msk: u32 = 8;
pub const EXTI_PR_PR3: u32 = 8;
pub const EXTI_PR_PR4_Pos: u32 = 4;
pub const EXTI_PR_PR4_Msk: u32 = 16;
pub const EXTI_PR_PR4: u32 = 16;
pub const EXTI_PR_PR5_Pos: u32 = 5;
pub const EXTI_PR_PR5_Msk: u32 = 32;
pub const EXTI_PR_PR5: u32 = 32;
pub const EXTI_PR_PR6_Pos: u32 = 6;
pub const EXTI_PR_PR6_Msk: u32 = 64;
pub const EXTI_PR_PR6: u32 = 64;
pub const EXTI_PR_PR7_Pos: u32 = 7;
pub const EXTI_PR_PR7_Msk: u32 = 128;
pub const EXTI_PR_PR7: u32 = 128;
pub const EXTI_PR_PR8_Pos: u32 = 8;
pub const EXTI_PR_PR8_Msk: u32 = 256;
pub const EXTI_PR_PR8: u32 = 256;
pub const EXTI_PR_PR9_Pos: u32 = 9;
pub const EXTI_PR_PR9_Msk: u32 = 512;
pub const EXTI_PR_PR9: u32 = 512;
pub const EXTI_PR_PR10_Pos: u32 = 10;
pub const EXTI_PR_PR10_Msk: u32 = 1024;
pub const EXTI_PR_PR10: u32 = 1024;
pub const EXTI_PR_PR11_Pos: u32 = 11;
pub const EXTI_PR_PR11_Msk: u32 = 2048;
pub const EXTI_PR_PR11: u32 = 2048;
pub const EXTI_PR_PR12_Pos: u32 = 12;
pub const EXTI_PR_PR12_Msk: u32 = 4096;
pub const EXTI_PR_PR12: u32 = 4096;
pub const EXTI_PR_PR13_Pos: u32 = 13;
pub const EXTI_PR_PR13_Msk: u32 = 8192;
pub const EXTI_PR_PR13: u32 = 8192;
pub const EXTI_PR_PR14_Pos: u32 = 14;
pub const EXTI_PR_PR14_Msk: u32 = 16384;
pub const EXTI_PR_PR14: u32 = 16384;
pub const EXTI_PR_PR15_Pos: u32 = 15;
pub const EXTI_PR_PR15_Msk: u32 = 32768;
pub const EXTI_PR_PR15: u32 = 32768;
pub const EXTI_PR_PR16_Pos: u32 = 16;
pub const EXTI_PR_PR16_Msk: u32 = 65536;
pub const EXTI_PR_PR16: u32 = 65536;
pub const EXTI_PR_PR17_Pos: u32 = 17;
pub const EXTI_PR_PR17_Msk: u32 = 131072;
pub const EXTI_PR_PR17: u32 = 131072;
pub const EXTI_PR_PR18_Pos: u32 = 18;
pub const EXTI_PR_PR18_Msk: u32 = 262144;
pub const EXTI_PR_PR18: u32 = 262144;
pub const EXTI_PR_PR19_Pos: u32 = 19;
pub const EXTI_PR_PR19_Msk: u32 = 524288;
pub const EXTI_PR_PR19: u32 = 524288;
pub const EXTI_PR_PR20_Pos: u32 = 20;
pub const EXTI_PR_PR20_Msk: u32 = 1048576;
pub const EXTI_PR_PR20: u32 = 1048576;
pub const EXTI_PR_PR21_Pos: u32 = 21;
pub const EXTI_PR_PR21_Msk: u32 = 2097152;
pub const EXTI_PR_PR21: u32 = 2097152;
pub const EXTI_PR_PR22_Pos: u32 = 22;
pub const EXTI_PR_PR22_Msk: u32 = 4194304;
pub const EXTI_PR_PR22: u32 = 4194304;
pub const EXTI_PR_PR29_Pos: u32 = 29;
pub const EXTI_PR_PR29_Msk: u32 = 536870912;
pub const EXTI_PR_PR29: u32 = 536870912;
pub const EXTI_PR_PR30_Pos: u32 = 30;
pub const EXTI_PR_PR30_Msk: u32 = 1073741824;
pub const EXTI_PR_PR30: u32 = 1073741824;
pub const EXTI_PR_PR31_Pos: u32 = 31;
pub const EXTI_PR_PR31_Msk: u32 = 2147483648;
pub const EXTI_PR_PR31: u32 = 2147483648;
pub const EXTI_PR_PIF0: u32 = 1;
pub const EXTI_PR_PIF1: u32 = 2;
pub const EXTI_PR_PIF2: u32 = 4;
pub const EXTI_PR_PIF3: u32 = 8;
pub const EXTI_PR_PIF4: u32 = 16;
pub const EXTI_PR_PIF5: u32 = 32;
pub const EXTI_PR_PIF6: u32 = 64;
pub const EXTI_PR_PIF7: u32 = 128;
pub const EXTI_PR_PIF8: u32 = 256;
pub const EXTI_PR_PIF9: u32 = 512;
pub const EXTI_PR_PIF10: u32 = 1024;
pub const EXTI_PR_PIF11: u32 = 2048;
pub const EXTI_PR_PIF12: u32 = 4096;
pub const EXTI_PR_PIF13: u32 = 8192;
pub const EXTI_PR_PIF14: u32 = 16384;
pub const EXTI_PR_PIF15: u32 = 32768;
pub const EXTI_PR_PIF16: u32 = 65536;
pub const EXTI_PR_PIF17: u32 = 131072;
pub const EXTI_PR_PIF18: u32 = 262144;
pub const EXTI_PR_PIF19: u32 = 524288;
pub const EXTI_PR_PIF20: u32 = 1048576;
pub const EXTI_PR_PIF21: u32 = 2097152;
pub const EXTI_PR_PIF22: u32 = 4194304;
pub const EXTI_PR_PIF29: u32 = 536870912;
pub const EXTI_PR_PIF30: u32 = 1073741824;
pub const EXTI_PR_PIF31: u32 = 2147483648;
pub const EXTI_IMR2_MR32_Pos: u32 = 0;
pub const EXTI_IMR2_MR32_Msk: u32 = 1;
pub const EXTI_IMR2_MR32: u32 = 1;
pub const EXTI_IMR2_MR33_Pos: u32 = 1;
pub const EXTI_IMR2_MR33_Msk: u32 = 2;
pub const EXTI_IMR2_MR33: u32 = 2;
pub const EXTI_IMR2_MR34_Pos: u32 = 2;
pub const EXTI_IMR2_MR34_Msk: u32 = 4;
pub const EXTI_IMR2_MR34: u32 = 4;
pub const EXTI_IMR2_MR35_Pos: u32 = 3;
pub const EXTI_IMR2_MR35_Msk: u32 = 8;
pub const EXTI_IMR2_MR35: u32 = 8;
pub const EXTI_IMR2_IM32: u32 = 1;
pub const EXTI_IMR2_IM33: u32 = 2;
pub const EXTI_IMR2_IM34: u32 = 4;
pub const EXTI_IMR2_IM35: u32 = 8;
pub const EXTI_IMR2_IM_Pos: u32 = 0;
pub const EXTI_IMR2_IM_Msk: u32 = 15;
pub const EXTI_IMR2_IM: u32 = 15;
pub const EXTI_EMR2_MR32_Pos: u32 = 0;
pub const EXTI_EMR2_MR32_Msk: u32 = 1;
pub const EXTI_EMR2_MR32: u32 = 1;
pub const EXTI_EMR2_MR33_Pos: u32 = 1;
pub const EXTI_EMR2_MR33_Msk: u32 = 2;
pub const EXTI_EMR2_MR33: u32 = 2;
pub const EXTI_EMR2_MR34_Pos: u32 = 2;
pub const EXTI_EMR2_MR34_Msk: u32 = 4;
pub const EXTI_EMR2_MR34: u32 = 4;
pub const EXTI_EMR2_MR35_Pos: u32 = 3;
pub const EXTI_EMR2_MR35_Msk: u32 = 8;
pub const EXTI_EMR2_MR35: u32 = 8;
pub const EXTI_EMR2_EM32: u32 = 1;
pub const EXTI_EMR2_EM33: u32 = 2;
pub const EXTI_EMR2_EM34: u32 = 4;
pub const EXTI_EMR2_EM35: u32 = 8;
pub const EXTI_EMR2_EM_Pos: u32 = 0;
pub const EXTI_EMR2_EM_Msk: u32 = 15;
pub const EXTI_EMR2_EM: u32 = 15;
pub const EXTI_RTSR2_TR32_Pos: u32 = 0;
pub const EXTI_RTSR2_TR32_Msk: u32 = 1;
pub const EXTI_RTSR2_TR32: u32 = 1;
pub const EXTI_RTSR2_TR33_Pos: u32 = 1;
pub const EXTI_RTSR2_TR33_Msk: u32 = 2;
pub const EXTI_RTSR2_TR33: u32 = 2;
pub const EXTI_RTSR2_RT32: u32 = 1;
pub const EXTI_RTSR2_RT33: u32 = 2;
pub const EXTI_FTSR2_TR32_Pos: u32 = 0;
pub const EXTI_FTSR2_TR32_Msk: u32 = 1;
pub const EXTI_FTSR2_TR32: u32 = 1;
pub const EXTI_FTSR2_TR33_Pos: u32 = 1;
pub const EXTI_FTSR2_TR33_Msk: u32 = 2;
pub const EXTI_FTSR2_TR33: u32 = 2;
pub const EXTI_FTSR2_FT32: u32 = 1;
pub const EXTI_FTSR2_FT33: u32 = 2;
pub const EXTI_SWIER2_SWIER32_Pos: u32 = 0;
pub const EXTI_SWIER2_SWIER32_Msk: u32 = 1;
pub const EXTI_SWIER2_SWIER32: u32 = 1;
pub const EXTI_SWIER2_SWIER33_Pos: u32 = 1;
pub const EXTI_SWIER2_SWIER33_Msk: u32 = 2;
pub const EXTI_SWIER2_SWIER33: u32 = 2;
pub const EXTI_SWIER2_SWI32: u32 = 1;
pub const EXTI_SWIER2_SWI33: u32 = 2;
pub const EXTI_PR2_PR32_Pos: u32 = 0;
pub const EXTI_PR2_PR32_Msk: u32 = 1;
pub const EXTI_PR2_PR32: u32 = 1;
pub const EXTI_PR2_PR33_Pos: u32 = 1;
pub const EXTI_PR2_PR33_Msk: u32 = 2;
pub const EXTI_PR2_PR33: u32 = 2;
pub const EXTI_PR2_PIF32: u32 = 1;
pub const EXTI_PR2_PIF33: u32 = 2;
pub const FLASH_ACR_LATENCY_Pos: u32 = 0;
pub const FLASH_ACR_LATENCY_Msk: u32 = 7;
pub const FLASH_ACR_LATENCY: u32 = 7;
pub const FLASH_ACR_LATENCY_0: u32 = 1;
pub const FLASH_ACR_LATENCY_1: u32 = 2;
pub const FLASH_ACR_LATENCY_2: u32 = 4;
pub const FLASH_ACR_HLFCYA_Pos: u32 = 3;
pub const FLASH_ACR_HLFCYA_Msk: u32 = 8;
pub const FLASH_ACR_HLFCYA: u32 = 8;
pub const FLASH_ACR_PRFTBE_Pos: u32 = 4;
pub const FLASH_ACR_PRFTBE_Msk: u32 = 16;
pub const FLASH_ACR_PRFTBE: u32 = 16;
pub const FLASH_ACR_PRFTBS_Pos: u32 = 5;
pub const FLASH_ACR_PRFTBS_Msk: u32 = 32;
pub const FLASH_ACR_PRFTBS: u32 = 32;
pub const FLASH_KEYR_FKEYR_Pos: u32 = 0;
pub const FLASH_KEYR_FKEYR_Msk: u32 = 4294967295;
pub const FLASH_KEYR_FKEYR: u32 = 4294967295;
pub const RDP_KEY_Pos: u32 = 0;
pub const RDP_KEY_Msk: u32 = 165;
pub const RDP_KEY: u32 = 165;
pub const FLASH_KEY1_Pos: u32 = 0;
pub const FLASH_KEY1_Msk: u32 = 1164378403;
pub const FLASH_KEY1: u32 = 1164378403;
pub const FLASH_KEY2_Pos: u32 = 0;
pub const FLASH_KEY2_Msk: u32 = 3455027627;
pub const FLASH_KEY2: u32 = 3455027627;
pub const FLASH_OPTKEYR_OPTKEYR_Pos: u32 = 0;
pub const FLASH_OPTKEYR_OPTKEYR_Msk: u32 = 4294967295;
pub const FLASH_OPTKEYR_OPTKEYR: u32 = 4294967295;
pub const FLASH_OPTKEY1: u32 = 1164378403;
pub const FLASH_OPTKEY2: u32 = 3455027627;
pub const FLASH_SR_BSY_Pos: u32 = 0;
pub const FLASH_SR_BSY_Msk: u32 = 1;
pub const FLASH_SR_BSY: u32 = 1;
pub const FLASH_SR_PGERR_Pos: u32 = 2;
pub const FLASH_SR_PGERR_Msk: u32 = 4;
pub const FLASH_SR_PGERR: u32 = 4;
pub const FLASH_SR_WRPERR_Pos: u32 = 4;
pub const FLASH_SR_WRPERR_Msk: u32 = 16;
pub const FLASH_SR_WRPERR: u32 = 16;
pub const FLASH_SR_EOP_Pos: u32 = 5;
pub const FLASH_SR_EOP_Msk: u32 = 32;
pub const FLASH_SR_EOP: u32 = 32;
pub const FLASH_CR_PG_Pos: u32 = 0;
pub const FLASH_CR_PG_Msk: u32 = 1;
pub const FLASH_CR_PG: u32 = 1;
pub const FLASH_CR_PER_Pos: u32 = 1;
pub const FLASH_CR_PER_Msk: u32 = 2;
pub const FLASH_CR_PER: u32 = 2;
pub const FLASH_CR_MER_Pos: u32 = 2;
pub const FLASH_CR_MER_Msk: u32 = 4;
pub const FLASH_CR_MER: u32 = 4;
pub const FLASH_CR_OPTPG_Pos: u32 = 4;
pub const FLASH_CR_OPTPG_Msk: u32 = 16;
pub const FLASH_CR_OPTPG: u32 = 16;
pub const FLASH_CR_OPTER_Pos: u32 = 5;
pub const FLASH_CR_OPTER_Msk: u32 = 32;
pub const FLASH_CR_OPTER: u32 = 32;
pub const FLASH_CR_STRT_Pos: u32 = 6;
pub const FLASH_CR_STRT_Msk: u32 = 64;
pub const FLASH_CR_STRT: u32 = 64;
pub const FLASH_CR_LOCK_Pos: u32 = 7;
pub const FLASH_CR_LOCK_Msk: u32 = 128;
pub const FLASH_CR_LOCK: u32 = 128;
pub const FLASH_CR_OPTWRE_Pos: u32 = 9;
pub const FLASH_CR_OPTWRE_Msk: u32 = 512;
pub const FLASH_CR_OPTWRE: u32 = 512;
pub const FLASH_CR_ERRIE_Pos: u32 = 10;
pub const FLASH_CR_ERRIE_Msk: u32 = 1024;
pub const FLASH_CR_ERRIE: u32 = 1024;
pub const FLASH_CR_EOPIE_Pos: u32 = 12;
pub const FLASH_CR_EOPIE_Msk: u32 = 4096;
pub const FLASH_CR_EOPIE: u32 = 4096;
pub const FLASH_CR_OBL_LAUNCH_Pos: u32 = 13;
pub const FLASH_CR_OBL_LAUNCH_Msk: u32 = 8192;
pub const FLASH_CR_OBL_LAUNCH: u32 = 8192;
pub const FLASH_AR_FAR_Pos: u32 = 0;
pub const FLASH_AR_FAR_Msk: u32 = 4294967295;
pub const FLASH_AR_FAR: u32 = 4294967295;
pub const FLASH_OBR_OPTERR_Pos: u32 = 0;
pub const FLASH_OBR_OPTERR_Msk: u32 = 1;
pub const FLASH_OBR_OPTERR: u32 = 1;
pub const FLASH_OBR_RDPRT_Pos: u32 = 1;
pub const FLASH_OBR_RDPRT_Msk: u32 = 6;
pub const FLASH_OBR_RDPRT: u32 = 6;
pub const FLASH_OBR_RDPRT_1: u32 = 2;
pub const FLASH_OBR_RDPRT_2: u32 = 6;
pub const FLASH_OBR_USER_Pos: u32 = 8;
pub const FLASH_OBR_USER_Msk: u32 = 30464;
pub const FLASH_OBR_USER: u32 = 30464;
pub const FLASH_OBR_IWDG_SW_Pos: u32 = 8;
pub const FLASH_OBR_IWDG_SW_Msk: u32 = 256;
pub const FLASH_OBR_IWDG_SW: u32 = 256;
pub const FLASH_OBR_nRST_STOP_Pos: u32 = 9;
pub const FLASH_OBR_nRST_STOP_Msk: u32 = 512;
pub const FLASH_OBR_nRST_STOP: u32 = 512;
pub const FLASH_OBR_nRST_STDBY_Pos: u32 = 10;
pub const FLASH_OBR_nRST_STDBY_Msk: u32 = 1024;
pub const FLASH_OBR_nRST_STDBY: u32 = 1024;
pub const FLASH_OBR_nBOOT1_Pos: u32 = 12;
pub const FLASH_OBR_nBOOT1_Msk: u32 = 4096;
pub const FLASH_OBR_nBOOT1: u32 = 4096;
pub const FLASH_OBR_VDDA_MONITOR_Pos: u32 = 13;
pub const FLASH_OBR_VDDA_MONITOR_Msk: u32 = 8192;
pub const FLASH_OBR_VDDA_MONITOR: u32 = 8192;
pub const FLASH_OBR_SRAM_PE_Pos: u32 = 14;
pub const FLASH_OBR_SRAM_PE_Msk: u32 = 16384;
pub const FLASH_OBR_SRAM_PE: u32 = 16384;
pub const FLASH_OBR_DATA0_Pos: u32 = 16;
pub const FLASH_OBR_DATA0_Msk: u32 = 16711680;
pub const FLASH_OBR_DATA0: u32 = 16711680;
pub const FLASH_OBR_DATA1_Pos: u32 = 24;
pub const FLASH_OBR_DATA1_Msk: u32 = 4278190080;
pub const FLASH_OBR_DATA1: u32 = 4278190080;
pub const FLASH_OBR_WDG_SW: u32 = 256;
pub const FLASH_WRPR_WRP_Pos: u32 = 0;
pub const FLASH_WRPR_WRP_Msk: u32 = 4294967295;
pub const FLASH_WRPR_WRP: u32 = 4294967295;
pub const OB_RDP_RDP_Pos: u32 = 0;
pub const OB_RDP_RDP_Msk: u32 = 255;
pub const OB_RDP_RDP: u32 = 255;
pub const OB_RDP_nRDP_Pos: u32 = 8;
pub const OB_RDP_nRDP_Msk: u32 = 65280;
pub const OB_RDP_nRDP: u32 = 65280;
pub const OB_USER_USER_Pos: u32 = 16;
pub const OB_USER_USER_Msk: u32 = 16711680;
pub const OB_USER_USER: u32 = 16711680;
pub const OB_USER_nUSER_Pos: u32 = 24;
pub const OB_USER_nUSER_Msk: u32 = 4278190080;
pub const OB_USER_nUSER: u32 = 4278190080;
pub const OB_WRP0_WRP0_Pos: u32 = 0;
pub const OB_WRP0_WRP0_Msk: u32 = 255;
pub const OB_WRP0_WRP0: u32 = 255;
pub const OB_WRP0_nWRP0_Pos: u32 = 8;
pub const OB_WRP0_nWRP0_Msk: u32 = 65280;
pub const OB_WRP0_nWRP0: u32 = 65280;
pub const OB_WRP1_WRP1_Pos: u32 = 16;
pub const OB_WRP1_WRP1_Msk: u32 = 16711680;
pub const OB_WRP1_WRP1: u32 = 16711680;
pub const OB_WRP1_nWRP1_Pos: u32 = 24;
pub const OB_WRP1_nWRP1_Msk: u32 = 4278190080;
pub const OB_WRP1_nWRP1: u32 = 4278190080;
pub const OB_WRP2_WRP2_Pos: u32 = 0;
pub const OB_WRP2_WRP2_Msk: u32 = 255;
pub const OB_WRP2_WRP2: u32 = 255;
pub const OB_WRP2_nWRP2_Pos: u32 = 8;
pub const OB_WRP2_nWRP2_Msk: u32 = 65280;
pub const OB_WRP2_nWRP2: u32 = 65280;
pub const OB_WRP3_WRP3_Pos: u32 = 16;
pub const OB_WRP3_WRP3_Msk: u32 = 16711680;
pub const OB_WRP3_WRP3: u32 = 16711680;
pub const OB_WRP3_nWRP3_Pos: u32 = 24;
pub const OB_WRP3_nWRP3_Msk: u32 = 4278190080;
pub const OB_WRP3_nWRP3: u32 = 4278190080;
pub const GPIO_MODER_MODER0_Pos: u32 = 0;
pub const GPIO_MODER_MODER0_Msk: u32 = 3;
pub const GPIO_MODER_MODER0: u32 = 3;
pub const GPIO_MODER_MODER0_0: u32 = 1;
pub const GPIO_MODER_MODER0_1: u32 = 2;
pub const GPIO_MODER_MODER1_Pos: u32 = 2;
pub const GPIO_MODER_MODER1_Msk: u32 = 12;
pub const GPIO_MODER_MODER1: u32 = 12;
pub const GPIO_MODER_MODER1_0: u32 = 4;
pub const GPIO_MODER_MODER1_1: u32 = 8;
pub const GPIO_MODER_MODER2_Pos: u32 = 4;
pub const GPIO_MODER_MODER2_Msk: u32 = 48;
pub const GPIO_MODER_MODER2: u32 = 48;
pub const GPIO_MODER_MODER2_0: u32 = 16;
pub const GPIO_MODER_MODER2_1: u32 = 32;
pub const GPIO_MODER_MODER3_Pos: u32 = 6;
pub const GPIO_MODER_MODER3_Msk: u32 = 192;
pub const GPIO_MODER_MODER3: u32 = 192;
pub const GPIO_MODER_MODER3_0: u32 = 64;
pub const GPIO_MODER_MODER3_1: u32 = 128;
pub const GPIO_MODER_MODER4_Pos: u32 = 8;
pub const GPIO_MODER_MODER4_Msk: u32 = 768;
pub const GPIO_MODER_MODER4: u32 = 768;
pub const GPIO_MODER_MODER4_0: u32 = 256;
pub const GPIO_MODER_MODER4_1: u32 = 512;
pub const GPIO_MODER_MODER5_Pos: u32 = 10;
pub const GPIO_MODER_MODER5_Msk: u32 = 3072;
pub const GPIO_MODER_MODER5: u32 = 3072;
pub const GPIO_MODER_MODER5_0: u32 = 1024;
pub const GPIO_MODER_MODER5_1: u32 = 2048;
pub const GPIO_MODER_MODER6_Pos: u32 = 12;
pub const GPIO_MODER_MODER6_Msk: u32 = 12288;
pub const GPIO_MODER_MODER6: u32 = 12288;
pub const GPIO_MODER_MODER6_0: u32 = 4096;
pub const GPIO_MODER_MODER6_1: u32 = 8192;
pub const GPIO_MODER_MODER7_Pos: u32 = 14;
pub const GPIO_MODER_MODER7_Msk: u32 = 49152;
pub const GPIO_MODER_MODER7: u32 = 49152;
pub const GPIO_MODER_MODER7_0: u32 = 16384;
pub const GPIO_MODER_MODER7_1: u32 = 32768;
pub const GPIO_MODER_MODER8_Pos: u32 = 16;
pub const GPIO_MODER_MODER8_Msk: u32 = 196608;
pub const GPIO_MODER_MODER8: u32 = 196608;
pub const GPIO_MODER_MODER8_0: u32 = 65536;
pub const GPIO_MODER_MODER8_1: u32 = 131072;
pub const GPIO_MODER_MODER9_Pos: u32 = 18;
pub const GPIO_MODER_MODER9_Msk: u32 = 786432;
pub const GPIO_MODER_MODER9: u32 = 786432;
pub const GPIO_MODER_MODER9_0: u32 = 262144;
pub const GPIO_MODER_MODER9_1: u32 = 524288;
pub const GPIO_MODER_MODER10_Pos: u32 = 20;
pub const GPIO_MODER_MODER10_Msk: u32 = 3145728;
pub const GPIO_MODER_MODER10: u32 = 3145728;
pub const GPIO_MODER_MODER10_0: u32 = 1048576;
pub const GPIO_MODER_MODER10_1: u32 = 2097152;
pub const GPIO_MODER_MODER11_Pos: u32 = 22;
pub const GPIO_MODER_MODER11_Msk: u32 = 12582912;
pub const GPIO_MODER_MODER11: u32 = 12582912;
pub const GPIO_MODER_MODER11_0: u32 = 4194304;
pub const GPIO_MODER_MODER11_1: u32 = 8388608;
pub const GPIO_MODER_MODER12_Pos: u32 = 24;
pub const GPIO_MODER_MODER12_Msk: u32 = 50331648;
pub const GPIO_MODER_MODER12: u32 = 50331648;
pub const GPIO_MODER_MODER12_0: u32 = 16777216;
pub const GPIO_MODER_MODER12_1: u32 = 33554432;
pub const GPIO_MODER_MODER13_Pos: u32 = 26;
pub const GPIO_MODER_MODER13_Msk: u32 = 201326592;
pub const GPIO_MODER_MODER13: u32 = 201326592;
pub const GPIO_MODER_MODER13_0: u32 = 67108864;
pub const GPIO_MODER_MODER13_1: u32 = 134217728;
pub const GPIO_MODER_MODER14_Pos: u32 = 28;
pub const GPIO_MODER_MODER14_Msk: u32 = 805306368;
pub const GPIO_MODER_MODER14: u32 = 805306368;
pub const GPIO_MODER_MODER14_0: u32 = 268435456;
pub const GPIO_MODER_MODER14_1: u32 = 536870912;
pub const GPIO_MODER_MODER15_Pos: u32 = 30;
pub const GPIO_MODER_MODER15_Msk: u32 = 3221225472;
pub const GPIO_MODER_MODER15: u32 = 3221225472;
pub const GPIO_MODER_MODER15_0: u32 = 1073741824;
pub const GPIO_MODER_MODER15_1: u32 = 2147483648;
pub const GPIO_OTYPER_OT_0: u32 = 1;
pub const GPIO_OTYPER_OT_1: u32 = 2;
pub const GPIO_OTYPER_OT_2: u32 = 4;
pub const GPIO_OTYPER_OT_3: u32 = 8;
pub const GPIO_OTYPER_OT_4: u32 = 16;
pub const GPIO_OTYPER_OT_5: u32 = 32;
pub const GPIO_OTYPER_OT_6: u32 = 64;
pub const GPIO_OTYPER_OT_7: u32 = 128;
pub const GPIO_OTYPER_OT_8: u32 = 256;
pub const GPIO_OTYPER_OT_9: u32 = 512;
pub const GPIO_OTYPER_OT_10: u32 = 1024;
pub const GPIO_OTYPER_OT_11: u32 = 2048;
pub const GPIO_OTYPER_OT_12: u32 = 4096;
pub const GPIO_OTYPER_OT_13: u32 = 8192;
pub const GPIO_OTYPER_OT_14: u32 = 16384;
pub const GPIO_OTYPER_OT_15: u32 = 32768;
pub const GPIO_OSPEEDER_OSPEEDR0_Pos: u32 = 0;
pub const GPIO_OSPEEDER_OSPEEDR0_Msk: u32 = 3;
pub const GPIO_OSPEEDER_OSPEEDR0: u32 = 3;
pub const GPIO_OSPEEDER_OSPEEDR0_0: u32 = 1;
pub const GPIO_OSPEEDER_OSPEEDR0_1: u32 = 2;
pub const GPIO_OSPEEDER_OSPEEDR1_Pos: u32 = 2;
pub const GPIO_OSPEEDER_OSPEEDR1_Msk: u32 = 12;
pub const GPIO_OSPEEDER_OSPEEDR1: u32 = 12;
pub const GPIO_OSPEEDER_OSPEEDR1_0: u32 = 4;
pub const GPIO_OSPEEDER_OSPEEDR1_1: u32 = 8;
pub const GPIO_OSPEEDER_OSPEEDR2_Pos: u32 = 4;
pub const GPIO_OSPEEDER_OSPEEDR2_Msk: u32 = 48;
pub const GPIO_OSPEEDER_OSPEEDR2: u32 = 48;
pub const GPIO_OSPEEDER_OSPEEDR2_0: u32 = 16;
pub const GPIO_OSPEEDER_OSPEEDR2_1: u32 = 32;
pub const GPIO_OSPEEDER_OSPEEDR3_Pos: u32 = 6;
pub const GPIO_OSPEEDER_OSPEEDR3_Msk: u32 = 192;
pub const GPIO_OSPEEDER_OSPEEDR3: u32 = 192;
pub const GPIO_OSPEEDER_OSPEEDR3_0: u32 = 64;
pub const GPIO_OSPEEDER_OSPEEDR3_1: u32 = 128;
pub const GPIO_OSPEEDER_OSPEEDR4_Pos: u32 = 8;
pub const GPIO_OSPEEDER_OSPEEDR4_Msk: u32 = 768;
pub const GPIO_OSPEEDER_OSPEEDR4: u32 = 768;
pub const GPIO_OSPEEDER_OSPEEDR4_0: u32 = 256;
pub const GPIO_OSPEEDER_OSPEEDR4_1: u32 = 512;
pub const GPIO_OSPEEDER_OSPEEDR5_Pos: u32 = 10;
pub const GPIO_OSPEEDER_OSPEEDR5_Msk: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEEDR5: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEEDR5_0: u32 = 1024;
pub const GPIO_OSPEEDER_OSPEEDR5_1: u32 = 2048;
pub const GPIO_OSPEEDER_OSPEEDR6_Pos: u32 = 12;
pub const GPIO_OSPEEDER_OSPEEDR6_Msk: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEEDR6: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEEDR6_0: u32 = 4096;
pub const GPIO_OSPEEDER_OSPEEDR6_1: u32 = 8192;
pub const GPIO_OSPEEDER_OSPEEDR7_Pos: u32 = 14;
pub const GPIO_OSPEEDER_OSPEEDR7_Msk: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEEDR7: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEEDR7_0: u32 = 16384;
pub const GPIO_OSPEEDER_OSPEEDR7_1: u32 = 32768;
pub const GPIO_OSPEEDER_OSPEEDR8_Pos: u32 = 16;
pub const GPIO_OSPEEDER_OSPEEDR8_Msk: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEEDR8: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEEDR8_0: u32 = 65536;
pub const GPIO_OSPEEDER_OSPEEDR8_1: u32 = 131072;
pub const GPIO_OSPEEDER_OSPEEDR9_Pos: u32 = 18;
pub const GPIO_OSPEEDER_OSPEEDR9_Msk: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEEDR9: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEEDR9_0: u32 = 262144;
pub const GPIO_OSPEEDER_OSPEEDR9_1: u32 = 524288;
pub const GPIO_OSPEEDER_OSPEEDR10_Pos: u32 = 20;
pub const GPIO_OSPEEDER_OSPEEDR10_Msk: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEEDR10: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEEDR10_0: u32 = 1048576;
pub const GPIO_OSPEEDER_OSPEEDR10_1: u32 = 2097152;
pub const GPIO_OSPEEDER_OSPEEDR11_Pos: u32 = 22;
pub const GPIO_OSPEEDER_OSPEEDR11_Msk: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEEDR11: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEEDR11_0: u32 = 4194304;
pub const GPIO_OSPEEDER_OSPEEDR11_1: u32 = 8388608;
pub const GPIO_OSPEEDER_OSPEEDR12_Pos: u32 = 24;
pub const GPIO_OSPEEDER_OSPEEDR12_Msk: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEEDR12: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEEDR12_0: u32 = 16777216;
pub const GPIO_OSPEEDER_OSPEEDR12_1: u32 = 33554432;
pub const GPIO_OSPEEDER_OSPEEDR13_Pos: u32 = 26;
pub const GPIO_OSPEEDER_OSPEEDR13_Msk: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEEDR13: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEEDR13_0: u32 = 67108864;
pub const GPIO_OSPEEDER_OSPEEDR13_1: u32 = 134217728;
pub const GPIO_OSPEEDER_OSPEEDR14_Pos: u32 = 28;
pub const GPIO_OSPEEDER_OSPEEDR14_Msk: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEEDR14: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEEDR14_0: u32 = 268435456;
pub const GPIO_OSPEEDER_OSPEEDR14_1: u32 = 536870912;
pub const GPIO_OSPEEDER_OSPEEDR15_Pos: u32 = 30;
pub const GPIO_OSPEEDER_OSPEEDR15_Msk: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEEDR15: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEEDR15_0: u32 = 1073741824;
pub const GPIO_OSPEEDER_OSPEEDR15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPDR0_Pos: u32 = 0;
pub const GPIO_PUPDR_PUPDR0_Msk: u32 = 3;
pub const GPIO_PUPDR_PUPDR0: u32 = 3;
pub const GPIO_PUPDR_PUPDR0_0: u32 = 1;
pub const GPIO_PUPDR_PUPDR0_1: u32 = 2;
pub const GPIO_PUPDR_PUPDR1_Pos: u32 = 2;
pub const GPIO_PUPDR_PUPDR1_Msk: u32 = 12;
pub const GPIO_PUPDR_PUPDR1: u32 = 12;
pub const GPIO_PUPDR_PUPDR1_0: u32 = 4;
pub const GPIO_PUPDR_PUPDR1_1: u32 = 8;
pub const GPIO_PUPDR_PUPDR2_Pos: u32 = 4;
pub const GPIO_PUPDR_PUPDR2_Msk: u32 = 48;
pub const GPIO_PUPDR_PUPDR2: u32 = 48;
pub const GPIO_PUPDR_PUPDR2_0: u32 = 16;
pub const GPIO_PUPDR_PUPDR2_1: u32 = 32;
pub const GPIO_PUPDR_PUPDR3_Pos: u32 = 6;
pub const GPIO_PUPDR_PUPDR3_Msk: u32 = 192;
pub const GPIO_PUPDR_PUPDR3: u32 = 192;
pub const GPIO_PUPDR_PUPDR3_0: u32 = 64;
pub const GPIO_PUPDR_PUPDR3_1: u32 = 128;
pub const GPIO_PUPDR_PUPDR4_Pos: u32 = 8;
pub const GPIO_PUPDR_PUPDR4_Msk: u32 = 768;
pub const GPIO_PUPDR_PUPDR4: u32 = 768;
pub const GPIO_PUPDR_PUPDR4_0: u32 = 256;
pub const GPIO_PUPDR_PUPDR4_1: u32 = 512;
pub const GPIO_PUPDR_PUPDR5_Pos: u32 = 10;
pub const GPIO_PUPDR_PUPDR5_Msk: u32 = 3072;
pub const GPIO_PUPDR_PUPDR5: u32 = 3072;
pub const GPIO_PUPDR_PUPDR5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPDR5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPDR6_Pos: u32 = 12;
pub const GPIO_PUPDR_PUPDR6_Msk: u32 = 12288;
pub const GPIO_PUPDR_PUPDR6: u32 = 12288;
pub const GPIO_PUPDR_PUPDR6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPDR6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPDR7_Pos: u32 = 14;
pub const GPIO_PUPDR_PUPDR7_Msk: u32 = 49152;
pub const GPIO_PUPDR_PUPDR7: u32 = 49152;
pub const GPIO_PUPDR_PUPDR7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPDR7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPDR8_Pos: u32 = 16;
pub const GPIO_PUPDR_PUPDR8_Msk: u32 = 196608;
pub const GPIO_PUPDR_PUPDR8: u32 = 196608;
pub const GPIO_PUPDR_PUPDR8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPDR8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPDR9_Pos: u32 = 18;
pub const GPIO_PUPDR_PUPDR9_Msk: u32 = 786432;
pub const GPIO_PUPDR_PUPDR9: u32 = 786432;
pub const GPIO_PUPDR_PUPDR9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPDR9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPDR10_Pos: u32 = 20;
pub const GPIO_PUPDR_PUPDR10_Msk: u32 = 3145728;
pub const GPIO_PUPDR_PUPDR10: u32 = 3145728;
pub const GPIO_PUPDR_PUPDR10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPDR10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPDR11_Pos: u32 = 22;
pub const GPIO_PUPDR_PUPDR11_Msk: u32 = 12582912;
pub const GPIO_PUPDR_PUPDR11: u32 = 12582912;
pub const GPIO_PUPDR_PUPDR11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPDR11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPDR12_Pos: u32 = 24;
pub const GPIO_PUPDR_PUPDR12_Msk: u32 = 50331648;
pub const GPIO_PUPDR_PUPDR12: u32 = 50331648;
pub const GPIO_PUPDR_PUPDR12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPDR12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPDR13_Pos: u32 = 26;
pub const GPIO_PUPDR_PUPDR13_Msk: u32 = 201326592;
pub const GPIO_PUPDR_PUPDR13: u32 = 201326592;
pub const GPIO_PUPDR_PUPDR13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPDR13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPDR14_Pos: u32 = 28;
pub const GPIO_PUPDR_PUPDR14_Msk: u32 = 805306368;
pub const GPIO_PUPDR_PUPDR14: u32 = 805306368;
pub const GPIO_PUPDR_PUPDR14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPDR14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPDR15_Pos: u32 = 30;
pub const GPIO_PUPDR_PUPDR15_Msk: u32 = 3221225472;
pub const GPIO_PUPDR_PUPDR15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPDR15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPDR15_1: u32 = 2147483648;
pub const GPIO_IDR_0: u32 = 1;
pub const GPIO_IDR_1: u32 = 2;
pub const GPIO_IDR_2: u32 = 4;
pub const GPIO_IDR_3: u32 = 8;
pub const GPIO_IDR_4: u32 = 16;
pub const GPIO_IDR_5: u32 = 32;
pub const GPIO_IDR_6: u32 = 64;
pub const GPIO_IDR_7: u32 = 128;
pub const GPIO_IDR_8: u32 = 256;
pub const GPIO_IDR_9: u32 = 512;
pub const GPIO_IDR_10: u32 = 1024;
pub const GPIO_IDR_11: u32 = 2048;
pub const GPIO_IDR_12: u32 = 4096;
pub const GPIO_IDR_13: u32 = 8192;
pub const GPIO_IDR_14: u32 = 16384;
pub const GPIO_IDR_15: u32 = 32768;
pub const GPIO_ODR_0: u32 = 1;
pub const GPIO_ODR_1: u32 = 2;
pub const GPIO_ODR_2: u32 = 4;
pub const GPIO_ODR_3: u32 = 8;
pub const GPIO_ODR_4: u32 = 16;
pub const GPIO_ODR_5: u32 = 32;
pub const GPIO_ODR_6: u32 = 64;
pub const GPIO_ODR_7: u32 = 128;
pub const GPIO_ODR_8: u32 = 256;
pub const GPIO_ODR_9: u32 = 512;
pub const GPIO_ODR_10: u32 = 1024;
pub const GPIO_ODR_11: u32 = 2048;
pub const GPIO_ODR_12: u32 = 4096;
pub const GPIO_ODR_13: u32 = 8192;
pub const GPIO_ODR_14: u32 = 16384;
pub const GPIO_ODR_15: u32 = 32768;
pub const GPIO_BSRR_BS_0: u32 = 1;
pub const GPIO_BSRR_BS_1: u32 = 2;
pub const GPIO_BSRR_BS_2: u32 = 4;
pub const GPIO_BSRR_BS_3: u32 = 8;
pub const GPIO_BSRR_BS_4: u32 = 16;
pub const GPIO_BSRR_BS_5: u32 = 32;
pub const GPIO_BSRR_BS_6: u32 = 64;
pub const GPIO_BSRR_BS_7: u32 = 128;
pub const GPIO_BSRR_BS_8: u32 = 256;
pub const GPIO_BSRR_BS_9: u32 = 512;
pub const GPIO_BSRR_BS_10: u32 = 1024;
pub const GPIO_BSRR_BS_11: u32 = 2048;
pub const GPIO_BSRR_BS_12: u32 = 4096;
pub const GPIO_BSRR_BS_13: u32 = 8192;
pub const GPIO_BSRR_BS_14: u32 = 16384;
pub const GPIO_BSRR_BS_15: u32 = 32768;
pub const GPIO_BSRR_BR_0: u32 = 65536;
pub const GPIO_BSRR_BR_1: u32 = 131072;
pub const GPIO_BSRR_BR_2: u32 = 262144;
pub const GPIO_BSRR_BR_3: u32 = 524288;
pub const GPIO_BSRR_BR_4: u32 = 1048576;
pub const GPIO_BSRR_BR_5: u32 = 2097152;
pub const GPIO_BSRR_BR_6: u32 = 4194304;
pub const GPIO_BSRR_BR_7: u32 = 8388608;
pub const GPIO_BSRR_BR_8: u32 = 16777216;
pub const GPIO_BSRR_BR_9: u32 = 33554432;
pub const GPIO_BSRR_BR_10: u32 = 67108864;
pub const GPIO_BSRR_BR_11: u32 = 134217728;
pub const GPIO_BSRR_BR_12: u32 = 268435456;
pub const GPIO_BSRR_BR_13: u32 = 536870912;
pub const GPIO_BSRR_BR_14: u32 = 1073741824;
pub const GPIO_BSRR_BR_15: u32 = 2147483648;
pub const GPIO_LCKR_LCK0_Pos: u32 = 0;
pub const GPIO_LCKR_LCK0_Msk: u32 = 1;
pub const GPIO_LCKR_LCK0: u32 = 1;
pub const GPIO_LCKR_LCK1_Pos: u32 = 1;
pub const GPIO_LCKR_LCK1_Msk: u32 = 2;
pub const GPIO_LCKR_LCK1: u32 = 2;
pub const GPIO_LCKR_LCK2_Pos: u32 = 2;
pub const GPIO_LCKR_LCK2_Msk: u32 = 4;
pub const GPIO_LCKR_LCK2: u32 = 4;
pub const GPIO_LCKR_LCK3_Pos: u32 = 3;
pub const GPIO_LCKR_LCK3_Msk: u32 = 8;
pub const GPIO_LCKR_LCK3: u32 = 8;
pub const GPIO_LCKR_LCK4_Pos: u32 = 4;
pub const GPIO_LCKR_LCK4_Msk: u32 = 16;
pub const GPIO_LCKR_LCK4: u32 = 16;
pub const GPIO_LCKR_LCK5_Pos: u32 = 5;
pub const GPIO_LCKR_LCK5_Msk: u32 = 32;
pub const GPIO_LCKR_LCK5: u32 = 32;
pub const GPIO_LCKR_LCK6_Pos: u32 = 6;
pub const GPIO_LCKR_LCK6_Msk: u32 = 64;
pub const GPIO_LCKR_LCK6: u32 = 64;
pub const GPIO_LCKR_LCK7_Pos: u32 = 7;
pub const GPIO_LCKR_LCK7_Msk: u32 = 128;
pub const GPIO_LCKR_LCK7: u32 = 128;
pub const GPIO_LCKR_LCK8_Pos: u32 = 8;
pub const GPIO_LCKR_LCK8_Msk: u32 = 256;
pub const GPIO_LCKR_LCK8: u32 = 256;
pub const GPIO_LCKR_LCK9_Pos: u32 = 9;
pub const GPIO_LCKR_LCK9_Msk: u32 = 512;
pub const GPIO_LCKR_LCK9: u32 = 512;
pub const GPIO_LCKR_LCK10_Pos: u32 = 10;
pub const GPIO_LCKR_LCK10_Msk: u32 = 1024;
pub const GPIO_LCKR_LCK10: u32 = 1024;
pub const GPIO_LCKR_LCK11_Pos: u32 = 11;
pub const GPIO_LCKR_LCK11_Msk: u32 = 2048;
pub const GPIO_LCKR_LCK11: u32 = 2048;
pub const GPIO_LCKR_LCK12_Pos: u32 = 12;
pub const GPIO_LCKR_LCK12_Msk: u32 = 4096;
pub const GPIO_LCKR_LCK12: u32 = 4096;
pub const GPIO_LCKR_LCK13_Pos: u32 = 13;
pub const GPIO_LCKR_LCK13_Msk: u32 = 8192;
pub const GPIO_LCKR_LCK13: u32 = 8192;
pub const GPIO_LCKR_LCK14_Pos: u32 = 14;
pub const GPIO_LCKR_LCK14_Msk: u32 = 16384;
pub const GPIO_LCKR_LCK14: u32 = 16384;
pub const GPIO_LCKR_LCK15_Pos: u32 = 15;
pub const GPIO_LCKR_LCK15_Msk: u32 = 32768;
pub const GPIO_LCKR_LCK15: u32 = 32768;
pub const GPIO_LCKR_LCKK_Pos: u32 = 16;
pub const GPIO_LCKR_LCKK_Msk: u32 = 65536;
pub const GPIO_LCKR_LCKK: u32 = 65536;
pub const GPIO_AFRL_AFRL0_Pos: u32 = 0;
pub const GPIO_AFRL_AFRL0_Msk: u32 = 15;
pub const GPIO_AFRL_AFRL0: u32 = 15;
pub const GPIO_AFRL_AFRL1_Pos: u32 = 4;
pub const GPIO_AFRL_AFRL1_Msk: u32 = 240;
pub const GPIO_AFRL_AFRL1: u32 = 240;
pub const GPIO_AFRL_AFRL2_Pos: u32 = 8;
pub const GPIO_AFRL_AFRL2_Msk: u32 = 3840;
pub const GPIO_AFRL_AFRL2: u32 = 3840;
pub const GPIO_AFRL_AFRL3_Pos: u32 = 12;
pub const GPIO_AFRL_AFRL3_Msk: u32 = 61440;
pub const GPIO_AFRL_AFRL3: u32 = 61440;
pub const GPIO_AFRL_AFRL4_Pos: u32 = 16;
pub const GPIO_AFRL_AFRL4_Msk: u32 = 983040;
pub const GPIO_AFRL_AFRL4: u32 = 983040;
pub const GPIO_AFRL_AFRL5_Pos: u32 = 20;
pub const GPIO_AFRL_AFRL5_Msk: u32 = 15728640;
pub const GPIO_AFRL_AFRL5: u32 = 15728640;
pub const GPIO_AFRL_AFRL6_Pos: u32 = 24;
pub const GPIO_AFRL_AFRL6_Msk: u32 = 251658240;
pub const GPIO_AFRL_AFRL6: u32 = 251658240;
pub const GPIO_AFRL_AFRL7_Pos: u32 = 28;
pub const GPIO_AFRL_AFRL7_Msk: u32 = 4026531840;
pub const GPIO_AFRL_AFRL7: u32 = 4026531840;
pub const GPIO_AFRH_AFRH0_Pos: u32 = 0;
pub const GPIO_AFRH_AFRH0_Msk: u32 = 15;
pub const GPIO_AFRH_AFRH0: u32 = 15;
pub const GPIO_AFRH_AFRH1_Pos: u32 = 4;
pub const GPIO_AFRH_AFRH1_Msk: u32 = 240;
pub const GPIO_AFRH_AFRH1: u32 = 240;
pub const GPIO_AFRH_AFRH2_Pos: u32 = 8;
pub const GPIO_AFRH_AFRH2_Msk: u32 = 3840;
pub const GPIO_AFRH_AFRH2: u32 = 3840;
pub const GPIO_AFRH_AFRH3_Pos: u32 = 12;
pub const GPIO_AFRH_AFRH3_Msk: u32 = 61440;
pub const GPIO_AFRH_AFRH3: u32 = 61440;
pub const GPIO_AFRH_AFRH4_Pos: u32 = 16;
pub const GPIO_AFRH_AFRH4_Msk: u32 = 983040;
pub const GPIO_AFRH_AFRH4: u32 = 983040;
pub const GPIO_AFRH_AFRH5_Pos: u32 = 20;
pub const GPIO_AFRH_AFRH5_Msk: u32 = 15728640;
pub const GPIO_AFRH_AFRH5: u32 = 15728640;
pub const GPIO_AFRH_AFRH6_Pos: u32 = 24;
pub const GPIO_AFRH_AFRH6_Msk: u32 = 251658240;
pub const GPIO_AFRH_AFRH6: u32 = 251658240;
pub const GPIO_AFRH_AFRH7_Pos: u32 = 28;
pub const GPIO_AFRH_AFRH7_Msk: u32 = 4026531840;
pub const GPIO_AFRH_AFRH7: u32 = 4026531840;
pub const GPIO_BRR_BR_0: u32 = 1;
pub const GPIO_BRR_BR_1: u32 = 2;
pub const GPIO_BRR_BR_2: u32 = 4;
pub const GPIO_BRR_BR_3: u32 = 8;
pub const GPIO_BRR_BR_4: u32 = 16;
pub const GPIO_BRR_BR_5: u32 = 32;
pub const GPIO_BRR_BR_6: u32 = 64;
pub const GPIO_BRR_BR_7: u32 = 128;
pub const GPIO_BRR_BR_8: u32 = 256;
pub const GPIO_BRR_BR_9: u32 = 512;
pub const GPIO_BRR_BR_10: u32 = 1024;
pub const GPIO_BRR_BR_11: u32 = 2048;
pub const GPIO_BRR_BR_12: u32 = 4096;
pub const GPIO_BRR_BR_13: u32 = 8192;
pub const GPIO_BRR_BR_14: u32 = 16384;
pub const GPIO_BRR_BR_15: u32 = 32768;
pub const I2C_CR1_PE_Pos: u32 = 0;
pub const I2C_CR1_PE_Msk: u32 = 1;
pub const I2C_CR1_PE: u32 = 1;
pub const I2C_CR1_TXIE_Pos: u32 = 1;
pub const I2C_CR1_TXIE_Msk: u32 = 2;
pub const I2C_CR1_TXIE: u32 = 2;
pub const I2C_CR1_RXIE_Pos: u32 = 2;
pub const I2C_CR1_RXIE_Msk: u32 = 4;
pub const I2C_CR1_RXIE: u32 = 4;
pub const I2C_CR1_ADDRIE_Pos: u32 = 3;
pub const I2C_CR1_ADDRIE_Msk: u32 = 8;
pub const I2C_CR1_ADDRIE: u32 = 8;
pub const I2C_CR1_NACKIE_Pos: u32 = 4;
pub const I2C_CR1_NACKIE_Msk: u32 = 16;
pub const I2C_CR1_NACKIE: u32 = 16;
pub const I2C_CR1_STOPIE_Pos: u32 = 5;
pub const I2C_CR1_STOPIE_Msk: u32 = 32;
pub const I2C_CR1_STOPIE: u32 = 32;
pub const I2C_CR1_TCIE_Pos: u32 = 6;
pub const I2C_CR1_TCIE_Msk: u32 = 64;
pub const I2C_CR1_TCIE: u32 = 64;
pub const I2C_CR1_ERRIE_Pos: u32 = 7;
pub const I2C_CR1_ERRIE_Msk: u32 = 128;
pub const I2C_CR1_ERRIE: u32 = 128;
pub const I2C_CR1_DNF_Pos: u32 = 8;
pub const I2C_CR1_DNF_Msk: u32 = 3840;
pub const I2C_CR1_DNF: u32 = 3840;
pub const I2C_CR1_ANFOFF_Pos: u32 = 12;
pub const I2C_CR1_ANFOFF_Msk: u32 = 4096;
pub const I2C_CR1_ANFOFF: u32 = 4096;
pub const I2C_CR1_SWRST_Pos: u32 = 13;
pub const I2C_CR1_SWRST_Msk: u32 = 8192;
pub const I2C_CR1_SWRST: u32 = 8192;
pub const I2C_CR1_TXDMAEN_Pos: u32 = 14;
pub const I2C_CR1_TXDMAEN_Msk: u32 = 16384;
pub const I2C_CR1_TXDMAEN: u32 = 16384;
pub const I2C_CR1_RXDMAEN_Pos: u32 = 15;
pub const I2C_CR1_RXDMAEN_Msk: u32 = 32768;
pub const I2C_CR1_RXDMAEN: u32 = 32768;
pub const I2C_CR1_SBC_Pos: u32 = 16;
pub const I2C_CR1_SBC_Msk: u32 = 65536;
pub const I2C_CR1_SBC: u32 = 65536;
pub const I2C_CR1_NOSTRETCH_Pos: u32 = 17;
pub const I2C_CR1_NOSTRETCH_Msk: u32 = 131072;
pub const I2C_CR1_NOSTRETCH: u32 = 131072;
pub const I2C_CR1_WUPEN_Pos: u32 = 18;
pub const I2C_CR1_WUPEN_Msk: u32 = 262144;
pub const I2C_CR1_WUPEN: u32 = 262144;
pub const I2C_CR1_GCEN_Pos: u32 = 19;
pub const I2C_CR1_GCEN_Msk: u32 = 524288;
pub const I2C_CR1_GCEN: u32 = 524288;
pub const I2C_CR1_SMBHEN_Pos: u32 = 20;
pub const I2C_CR1_SMBHEN_Msk: u32 = 1048576;
pub const I2C_CR1_SMBHEN: u32 = 1048576;
pub const I2C_CR1_SMBDEN_Pos: u32 = 21;
pub const I2C_CR1_SMBDEN_Msk: u32 = 2097152;
pub const I2C_CR1_SMBDEN: u32 = 2097152;
pub const I2C_CR1_ALERTEN_Pos: u32 = 22;
pub const I2C_CR1_ALERTEN_Msk: u32 = 4194304;
pub const I2C_CR1_ALERTEN: u32 = 4194304;
pub const I2C_CR1_PECEN_Pos: u32 = 23;
pub const I2C_CR1_PECEN_Msk: u32 = 8388608;
pub const I2C_CR1_PECEN: u32 = 8388608;
pub const I2C_CR1_DFN: u32 = 3840;
pub const I2C_CR2_SADD_Pos: u32 = 0;
pub const I2C_CR2_SADD_Msk: u32 = 1023;
pub const I2C_CR2_SADD: u32 = 1023;
pub const I2C_CR2_RD_WRN_Pos: u32 = 10;
pub const I2C_CR2_RD_WRN_Msk: u32 = 1024;
pub const I2C_CR2_RD_WRN: u32 = 1024;
pub const I2C_CR2_ADD10_Pos: u32 = 11;
pub const I2C_CR2_ADD10_Msk: u32 = 2048;
pub const I2C_CR2_ADD10: u32 = 2048;
pub const I2C_CR2_HEAD10R_Pos: u32 = 12;
pub const I2C_CR2_HEAD10R_Msk: u32 = 4096;
pub const I2C_CR2_HEAD10R: u32 = 4096;
pub const I2C_CR2_START_Pos: u32 = 13;
pub const I2C_CR2_START_Msk: u32 = 8192;
pub const I2C_CR2_START: u32 = 8192;
pub const I2C_CR2_STOP_Pos: u32 = 14;
pub const I2C_CR2_STOP_Msk: u32 = 16384;
pub const I2C_CR2_STOP: u32 = 16384;
pub const I2C_CR2_NACK_Pos: u32 = 15;
pub const I2C_CR2_NACK_Msk: u32 = 32768;
pub const I2C_CR2_NACK: u32 = 32768;
pub const I2C_CR2_NBYTES_Pos: u32 = 16;
pub const I2C_CR2_NBYTES_Msk: u32 = 16711680;
pub const I2C_CR2_NBYTES: u32 = 16711680;
pub const I2C_CR2_RELOAD_Pos: u32 = 24;
pub const I2C_CR2_RELOAD_Msk: u32 = 16777216;
pub const I2C_CR2_RELOAD: u32 = 16777216;
pub const I2C_CR2_AUTOEND_Pos: u32 = 25;
pub const I2C_CR2_AUTOEND_Msk: u32 = 33554432;
pub const I2C_CR2_AUTOEND: u32 = 33554432;
pub const I2C_CR2_PECBYTE_Pos: u32 = 26;
pub const I2C_CR2_PECBYTE_Msk: u32 = 67108864;
pub const I2C_CR2_PECBYTE: u32 = 67108864;
pub const I2C_OAR1_OA1_Pos: u32 = 0;
pub const I2C_OAR1_OA1_Msk: u32 = 1023;
pub const I2C_OAR1_OA1: u32 = 1023;
pub const I2C_OAR1_OA1MODE_Pos: u32 = 10;
pub const I2C_OAR1_OA1MODE_Msk: u32 = 1024;
pub const I2C_OAR1_OA1MODE: u32 = 1024;
pub const I2C_OAR1_OA1EN_Pos: u32 = 15;
pub const I2C_OAR1_OA1EN_Msk: u32 = 32768;
pub const I2C_OAR1_OA1EN: u32 = 32768;
pub const I2C_OAR2_OA2_Pos: u32 = 1;
pub const I2C_OAR2_OA2_Msk: u32 = 254;
pub const I2C_OAR2_OA2: u32 = 254;
pub const I2C_OAR2_OA2MSK_Pos: u32 = 8;
pub const I2C_OAR2_OA2MSK_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MSK: u32 = 1792;
pub const I2C_OAR2_OA2NOMASK: u32 = 0;
pub const I2C_OAR2_OA2MASK01_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK01_Msk: u32 = 256;
pub const I2C_OAR2_OA2MASK01: u32 = 256;
pub const I2C_OAR2_OA2MASK02_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK02_Msk: u32 = 512;
pub const I2C_OAR2_OA2MASK02: u32 = 512;
pub const I2C_OAR2_OA2MASK03_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK03_Msk: u32 = 768;
pub const I2C_OAR2_OA2MASK03: u32 = 768;
pub const I2C_OAR2_OA2MASK04_Pos: u32 = 10;
pub const I2C_OAR2_OA2MASK04_Msk: u32 = 1024;
pub const I2C_OAR2_OA2MASK04: u32 = 1024;
pub const I2C_OAR2_OA2MASK05_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK05_Msk: u32 = 1280;
pub const I2C_OAR2_OA2MASK05: u32 = 1280;
pub const I2C_OAR2_OA2MASK06_Pos: u32 = 9;
pub const I2C_OAR2_OA2MASK06_Msk: u32 = 1536;
pub const I2C_OAR2_OA2MASK06: u32 = 1536;
pub const I2C_OAR2_OA2MASK07_Pos: u32 = 8;
pub const I2C_OAR2_OA2MASK07_Msk: u32 = 1792;
pub const I2C_OAR2_OA2MASK07: u32 = 1792;
pub const I2C_OAR2_OA2EN_Pos: u32 = 15;
pub const I2C_OAR2_OA2EN_Msk: u32 = 32768;
pub const I2C_OAR2_OA2EN: u32 = 32768;
pub const I2C_TIMINGR_SCLL_Pos: u32 = 0;
pub const I2C_TIMINGR_SCLL_Msk: u32 = 255;
pub const I2C_TIMINGR_SCLL: u32 = 255;
pub const I2C_TIMINGR_SCLH_Pos: u32 = 8;
pub const I2C_TIMINGR_SCLH_Msk: u32 = 65280;
pub const I2C_TIMINGR_SCLH: u32 = 65280;
pub const I2C_TIMINGR_SDADEL_Pos: u32 = 16;
pub const I2C_TIMINGR_SDADEL_Msk: u32 = 983040;
pub const I2C_TIMINGR_SDADEL: u32 = 983040;
pub const I2C_TIMINGR_SCLDEL_Pos: u32 = 20;
pub const I2C_TIMINGR_SCLDEL_Msk: u32 = 15728640;
pub const I2C_TIMINGR_SCLDEL: u32 = 15728640;
pub const I2C_TIMINGR_PRESC_Pos: u32 = 28;
pub const I2C_TIMINGR_PRESC_Msk: u32 = 4026531840;
pub const I2C_TIMINGR_PRESC: u32 = 4026531840;
pub const I2C_TIMEOUTR_TIMEOUTA_Pos: u32 = 0;
pub const I2C_TIMEOUTR_TIMEOUTA_Msk: u32 = 4095;
pub const I2C_TIMEOUTR_TIMEOUTA: u32 = 4095;
pub const I2C_TIMEOUTR_TIDLE_Pos: u32 = 12;
pub const I2C_TIMEOUTR_TIDLE_Msk: u32 = 4096;
pub const I2C_TIMEOUTR_TIDLE: u32 = 4096;
pub const I2C_TIMEOUTR_TIMOUTEN_Pos: u32 = 15;
pub const I2C_TIMEOUTR_TIMOUTEN_Msk: u32 = 32768;
pub const I2C_TIMEOUTR_TIMOUTEN: u32 = 32768;
pub const I2C_TIMEOUTR_TIMEOUTB_Pos: u32 = 16;
pub const I2C_TIMEOUTR_TIMEOUTB_Msk: u32 = 268369920;
pub const I2C_TIMEOUTR_TIMEOUTB: u32 = 268369920;
pub const I2C_TIMEOUTR_TEXTEN_Pos: u32 = 31;
pub const I2C_TIMEOUTR_TEXTEN_Msk: u32 = 2147483648;
pub const I2C_TIMEOUTR_TEXTEN: u32 = 2147483648;
pub const I2C_ISR_TXE_Pos: u32 = 0;
pub const I2C_ISR_TXE_Msk: u32 = 1;
pub const I2C_ISR_TXE: u32 = 1;
pub const I2C_ISR_TXIS_Pos: u32 = 1;
pub const I2C_ISR_TXIS_Msk: u32 = 2;
pub const I2C_ISR_TXIS: u32 = 2;
pub const I2C_ISR_RXNE_Pos: u32 = 2;
pub const I2C_ISR_RXNE_Msk: u32 = 4;
pub const I2C_ISR_RXNE: u32 = 4;
pub const I2C_ISR_ADDR_Pos: u32 = 3;
pub const I2C_ISR_ADDR_Msk: u32 = 8;
pub const I2C_ISR_ADDR: u32 = 8;
pub const I2C_ISR_NACKF_Pos: u32 = 4;
pub const I2C_ISR_NACKF_Msk: u32 = 16;
pub const I2C_ISR_NACKF: u32 = 16;
pub const I2C_ISR_STOPF_Pos: u32 = 5;
pub const I2C_ISR_STOPF_Msk: u32 = 32;
pub const I2C_ISR_STOPF: u32 = 32;
pub const I2C_ISR_TC_Pos: u32 = 6;
pub const I2C_ISR_TC_Msk: u32 = 64;
pub const I2C_ISR_TC: u32 = 64;
pub const I2C_ISR_TCR_Pos: u32 = 7;
pub const I2C_ISR_TCR_Msk: u32 = 128;
pub const I2C_ISR_TCR: u32 = 128;
pub const I2C_ISR_BERR_Pos: u32 = 8;
pub const I2C_ISR_BERR_Msk: u32 = 256;
pub const I2C_ISR_BERR: u32 = 256;
pub const I2C_ISR_ARLO_Pos: u32 = 9;
pub const I2C_ISR_ARLO_Msk: u32 = 512;
pub const I2C_ISR_ARLO: u32 = 512;
pub const I2C_ISR_OVR_Pos: u32 = 10;
pub const I2C_ISR_OVR_Msk: u32 = 1024;
pub const I2C_ISR_OVR: u32 = 1024;
pub const I2C_ISR_PECERR_Pos: u32 = 11;
pub const I2C_ISR_PECERR_Msk: u32 = 2048;
pub const I2C_ISR_PECERR: u32 = 2048;
pub const I2C_ISR_TIMEOUT_Pos: u32 = 12;
pub const I2C_ISR_TIMEOUT_Msk: u32 = 4096;
pub const I2C_ISR_TIMEOUT: u32 = 4096;
pub const I2C_ISR_ALERT_Pos: u32 = 13;
pub const I2C_ISR_ALERT_Msk: u32 = 8192;
pub const I2C_ISR_ALERT: u32 = 8192;
pub const I2C_ISR_BUSY_Pos: u32 = 15;
pub const I2C_ISR_BUSY_Msk: u32 = 32768;
pub const I2C_ISR_BUSY: u32 = 32768;
pub const I2C_ISR_DIR_Pos: u32 = 16;
pub const I2C_ISR_DIR_Msk: u32 = 65536;
pub const I2C_ISR_DIR: u32 = 65536;
pub const I2C_ISR_ADDCODE_Pos: u32 = 17;
pub const I2C_ISR_ADDCODE_Msk: u32 = 16646144;
pub const I2C_ISR_ADDCODE: u32 = 16646144;
pub const I2C_ICR_ADDRCF_Pos: u32 = 3;
pub const I2C_ICR_ADDRCF_Msk: u32 = 8;
pub const I2C_ICR_ADDRCF: u32 = 8;
pub const I2C_ICR_NACKCF_Pos: u32 = 4;
pub const I2C_ICR_NACKCF_Msk: u32 = 16;
pub const I2C_ICR_NACKCF: u32 = 16;
pub const I2C_ICR_STOPCF_Pos: u32 = 5;
pub const I2C_ICR_STOPCF_Msk: u32 = 32;
pub const I2C_ICR_STOPCF: u32 = 32;
pub const I2C_ICR_BERRCF_Pos: u32 = 8;
pub const I2C_ICR_BERRCF_Msk: u32 = 256;
pub const I2C_ICR_BERRCF: u32 = 256;
pub const I2C_ICR_ARLOCF_Pos: u32 = 9;
pub const I2C_ICR_ARLOCF_Msk: u32 = 512;
pub const I2C_ICR_ARLOCF: u32 = 512;
pub const I2C_ICR_OVRCF_Pos: u32 = 10;
pub const I2C_ICR_OVRCF_Msk: u32 = 1024;
pub const I2C_ICR_OVRCF: u32 = 1024;
pub const I2C_ICR_PECCF_Pos: u32 = 11;
pub const I2C_ICR_PECCF_Msk: u32 = 2048;
pub const I2C_ICR_PECCF: u32 = 2048;
pub const I2C_ICR_TIMOUTCF_Pos: u32 = 12;
pub const I2C_ICR_TIMOUTCF_Msk: u32 = 4096;
pub const I2C_ICR_TIMOUTCF: u32 = 4096;
pub const I2C_ICR_ALERTCF_Pos: u32 = 13;
pub const I2C_ICR_ALERTCF_Msk: u32 = 8192;
pub const I2C_ICR_ALERTCF: u32 = 8192;
pub const I2C_PECR_PEC_Pos: u32 = 0;
pub const I2C_PECR_PEC_Msk: u32 = 255;
pub const I2C_PECR_PEC: u32 = 255;
pub const I2C_RXDR_RXDATA_Pos: u32 = 0;
pub const I2C_RXDR_RXDATA_Msk: u32 = 255;
pub const I2C_RXDR_RXDATA: u32 = 255;
pub const I2C_TXDR_TXDATA_Pos: u32 = 0;
pub const I2C_TXDR_TXDATA_Msk: u32 = 255;
pub const I2C_TXDR_TXDATA: u32 = 255;
pub const IWDG_KR_KEY_Pos: u32 = 0;
pub const IWDG_KR_KEY_Msk: u32 = 65535;
pub const IWDG_KR_KEY: u32 = 65535;
pub const IWDG_PR_PR_Pos: u32 = 0;
pub const IWDG_PR_PR_Msk: u32 = 7;
pub const IWDG_PR_PR: u32 = 7;
pub const IWDG_PR_PR_0: u32 = 1;
pub const IWDG_PR_PR_1: u32 = 2;
pub const IWDG_PR_PR_2: u32 = 4;
pub const IWDG_RLR_RL_Pos: u32 = 0;
pub const IWDG_RLR_RL_Msk: u32 = 4095;
pub const IWDG_RLR_RL: u32 = 4095;
pub const IWDG_SR_PVU_Pos: u32 = 0;
pub const IWDG_SR_PVU_Msk: u32 = 1;
pub const IWDG_SR_PVU: u32 = 1;
pub const IWDG_SR_RVU_Pos: u32 = 1;
pub const IWDG_SR_RVU_Msk: u32 = 2;
pub const IWDG_SR_RVU: u32 = 2;
pub const IWDG_SR_WVU_Pos: u32 = 2;
pub const IWDG_SR_WVU_Msk: u32 = 4;
pub const IWDG_SR_WVU: u32 = 4;
pub const IWDG_WINR_WIN_Pos: u32 = 0;
pub const IWDG_WINR_WIN_Msk: u32 = 4095;
pub const IWDG_WINR_WIN: u32 = 4095;
pub const PWR_CR_LPDS_Pos: u32 = 0;
pub const PWR_CR_LPDS_Msk: u32 = 1;
pub const PWR_CR_LPDS: u32 = 1;
pub const PWR_CR_PDDS_Pos: u32 = 1;
pub const PWR_CR_PDDS_Msk: u32 = 2;
pub const PWR_CR_PDDS: u32 = 2;
pub const PWR_CR_CWUF_Pos: u32 = 2;
pub const PWR_CR_CWUF_Msk: u32 = 4;
pub const PWR_CR_CWUF: u32 = 4;
pub const PWR_CR_CSBF_Pos: u32 = 3;
pub const PWR_CR_CSBF_Msk: u32 = 8;
pub const PWR_CR_CSBF: u32 = 8;
pub const PWR_CR_PVDE_Pos: u32 = 4;
pub const PWR_CR_PVDE_Msk: u32 = 16;
pub const PWR_CR_PVDE: u32 = 16;
pub const PWR_CR_PLS_Pos: u32 = 5;
pub const PWR_CR_PLS_Msk: u32 = 224;
pub const PWR_CR_PLS: u32 = 224;
pub const PWR_CR_PLS_0: u32 = 32;
pub const PWR_CR_PLS_1: u32 = 64;
pub const PWR_CR_PLS_2: u32 = 128;
pub const PWR_CR_PLS_LEV0: u32 = 0;
pub const PWR_CR_PLS_LEV1: u32 = 32;
pub const PWR_CR_PLS_LEV2: u32 = 64;
pub const PWR_CR_PLS_LEV3: u32 = 96;
pub const PWR_CR_PLS_LEV4: u32 = 128;
pub const PWR_CR_PLS_LEV5: u32 = 160;
pub const PWR_CR_PLS_LEV6: u32 = 192;
pub const PWR_CR_PLS_LEV7: u32 = 224;
pub const PWR_CR_DBP_Pos: u32 = 8;
pub const PWR_CR_DBP_Msk: u32 = 256;
pub const PWR_CR_DBP: u32 = 256;
pub const PWR_CSR_WUF_Pos: u32 = 0;
pub const PWR_CSR_WUF_Msk: u32 = 1;
pub const PWR_CSR_WUF: u32 = 1;
pub const PWR_CSR_SBF_Pos: u32 = 1;
pub const PWR_CSR_SBF_Msk: u32 = 2;
pub const PWR_CSR_SBF: u32 = 2;
pub const PWR_CSR_PVDO_Pos: u32 = 2;
pub const PWR_CSR_PVDO_Msk: u32 = 4;
pub const PWR_CSR_PVDO: u32 = 4;
pub const PWR_CSR_VREFINTRDYF_Pos: u32 = 3;
pub const PWR_CSR_VREFINTRDYF_Msk: u32 = 8;
pub const PWR_CSR_VREFINTRDYF: u32 = 8;
pub const PWR_CSR_EWUP1_Pos: u32 = 8;
pub const PWR_CSR_EWUP1_Msk: u32 = 256;
pub const PWR_CSR_EWUP1: u32 = 256;
pub const PWR_CSR_EWUP2_Pos: u32 = 9;
pub const PWR_CSR_EWUP2_Msk: u32 = 512;
pub const PWR_CSR_EWUP2: u32 = 512;
pub const PWR_CSR_EWUP3_Pos: u32 = 10;
pub const PWR_CSR_EWUP3_Msk: u32 = 1024;
pub const PWR_CSR_EWUP3: u32 = 1024;
pub const RCC_CR_HSION_Pos: u32 = 0;
pub const RCC_CR_HSION_Msk: u32 = 1;
pub const RCC_CR_HSION: u32 = 1;
pub const RCC_CR_HSIRDY_Pos: u32 = 1;
pub const RCC_CR_HSIRDY_Msk: u32 = 2;
pub const RCC_CR_HSIRDY: u32 = 2;
pub const RCC_CR_HSITRIM_Pos: u32 = 3;
pub const RCC_CR_HSITRIM_Msk: u32 = 248;
pub const RCC_CR_HSITRIM: u32 = 248;
pub const RCC_CR_HSITRIM_0: u32 = 8;
pub const RCC_CR_HSITRIM_1: u32 = 16;
pub const RCC_CR_HSITRIM_2: u32 = 32;
pub const RCC_CR_HSITRIM_3: u32 = 64;
pub const RCC_CR_HSITRIM_4: u32 = 128;
pub const RCC_CR_HSICAL_Pos: u32 = 8;
pub const RCC_CR_HSICAL_Msk: u32 = 65280;
pub const RCC_CR_HSICAL: u32 = 65280;
pub const RCC_CR_HSICAL_0: u32 = 256;
pub const RCC_CR_HSICAL_1: u32 = 512;
pub const RCC_CR_HSICAL_2: u32 = 1024;
pub const RCC_CR_HSICAL_3: u32 = 2048;
pub const RCC_CR_HSICAL_4: u32 = 4096;
pub const RCC_CR_HSICAL_5: u32 = 8192;
pub const RCC_CR_HSICAL_6: u32 = 16384;
pub const RCC_CR_HSICAL_7: u32 = 32768;
pub const RCC_CR_HSEON_Pos: u32 = 16;
pub const RCC_CR_HSEON_Msk: u32 = 65536;
pub const RCC_CR_HSEON: u32 = 65536;
pub const RCC_CR_HSERDY_Pos: u32 = 17;
pub const RCC_CR_HSERDY_Msk: u32 = 131072;
pub const RCC_CR_HSERDY: u32 = 131072;
pub const RCC_CR_HSEBYP_Pos: u32 = 18;
pub const RCC_CR_HSEBYP_Msk: u32 = 262144;
pub const RCC_CR_HSEBYP: u32 = 262144;
pub const RCC_CR_CSSON_Pos: u32 = 19;
pub const RCC_CR_CSSON_Msk: u32 = 524288;
pub const RCC_CR_CSSON: u32 = 524288;
pub const RCC_CR_PLLON_Pos: u32 = 24;
pub const RCC_CR_PLLON_Msk: u32 = 16777216;
pub const RCC_CR_PLLON: u32 = 16777216;
pub const RCC_CR_PLLRDY_Pos: u32 = 25;
pub const RCC_CR_PLLRDY_Msk: u32 = 33554432;
pub const RCC_CR_PLLRDY: u32 = 33554432;
pub const RCC_CFGR_SW_Pos: u32 = 0;
pub const RCC_CFGR_SW_Msk: u32 = 3;
pub const RCC_CFGR_SW: u32 = 3;
pub const RCC_CFGR_SW_0: u32 = 1;
pub const RCC_CFGR_SW_1: u32 = 2;
pub const RCC_CFGR_SW_HSI: u32 = 0;
pub const RCC_CFGR_SW_HSE: u32 = 1;
pub const RCC_CFGR_SW_PLL: u32 = 2;
pub const RCC_CFGR_SWS_Pos: u32 = 2;
pub const RCC_CFGR_SWS_Msk: u32 = 12;
pub const RCC_CFGR_SWS: u32 = 12;
pub const RCC_CFGR_SWS_0: u32 = 4;
pub const RCC_CFGR_SWS_1: u32 = 8;
pub const RCC_CFGR_SWS_HSI: u32 = 0;
pub const RCC_CFGR_SWS_HSE: u32 = 4;
pub const RCC_CFGR_SWS_PLL: u32 = 8;
pub const RCC_CFGR_HPRE_Pos: u32 = 4;
pub const RCC_CFGR_HPRE_Msk: u32 = 240;
pub const RCC_CFGR_HPRE: u32 = 240;
pub const RCC_CFGR_HPRE_0: u32 = 16;
pub const RCC_CFGR_HPRE_1: u32 = 32;
pub const RCC_CFGR_HPRE_2: u32 = 64;
pub const RCC_CFGR_HPRE_3: u32 = 128;
pub const RCC_CFGR_HPRE_DIV1: u32 = 0;
pub const RCC_CFGR_HPRE_DIV2: u32 = 128;
pub const RCC_CFGR_HPRE_DIV4: u32 = 144;
pub const RCC_CFGR_HPRE_DIV8: u32 = 160;
pub const RCC_CFGR_HPRE_DIV16: u32 = 176;
pub const RCC_CFGR_HPRE_DIV64: u32 = 192;
pub const RCC_CFGR_HPRE_DIV128: u32 = 208;
pub const RCC_CFGR_HPRE_DIV256: u32 = 224;
pub const RCC_CFGR_HPRE_DIV512: u32 = 240;
pub const RCC_CFGR_PPRE1_Pos: u32 = 8;
pub const RCC_CFGR_PPRE1_Msk: u32 = 1792;
pub const RCC_CFGR_PPRE1: u32 = 1792;
pub const RCC_CFGR_PPRE1_0: u32 = 256;
pub const RCC_CFGR_PPRE1_1: u32 = 512;
pub const RCC_CFGR_PPRE1_2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE1_DIV2: u32 = 1024;
pub const RCC_CFGR_PPRE1_DIV4: u32 = 1280;
pub const RCC_CFGR_PPRE1_DIV8: u32 = 1536;
pub const RCC_CFGR_PPRE1_DIV16: u32 = 1792;
pub const RCC_CFGR_PPRE2_Pos: u32 = 11;
pub const RCC_CFGR_PPRE2_Msk: u32 = 14336;
pub const RCC_CFGR_PPRE2: u32 = 14336;
pub const RCC_CFGR_PPRE2_0: u32 = 2048;
pub const RCC_CFGR_PPRE2_1: u32 = 4096;
pub const RCC_CFGR_PPRE2_2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE2_DIV2: u32 = 8192;
pub const RCC_CFGR_PPRE2_DIV4: u32 = 10240;
pub const RCC_CFGR_PPRE2_DIV8: u32 = 12288;
pub const RCC_CFGR_PPRE2_DIV16: u32 = 14336;
pub const RCC_CFGR_PLLSRC_Pos: u32 = 16;
pub const RCC_CFGR_PLLSRC_Msk: u32 = 65536;
pub const RCC_CFGR_PLLSRC: u32 = 65536;
pub const RCC_CFGR_PLLSRC_HSI_DIV2: u32 = 0;
pub const RCC_CFGR_PLLSRC_HSE_PREDIV: u32 = 65536;
pub const RCC_CFGR_PLLXTPRE_Pos: u32 = 17;
pub const RCC_CFGR_PLLXTPRE_Msk: u32 = 131072;
pub const RCC_CFGR_PLLXTPRE: u32 = 131072;
pub const RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV1: u32 = 0;
pub const RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV2: u32 = 131072;
pub const RCC_CFGR_PLLMUL_Pos: u32 = 18;
pub const RCC_CFGR_PLLMUL_Msk: u32 = 3932160;
pub const RCC_CFGR_PLLMUL: u32 = 3932160;
pub const RCC_CFGR_PLLMUL_0: u32 = 262144;
pub const RCC_CFGR_PLLMUL_1: u32 = 524288;
pub const RCC_CFGR_PLLMUL_2: u32 = 1048576;
pub const RCC_CFGR_PLLMUL_3: u32 = 2097152;
pub const RCC_CFGR_PLLMUL2: u32 = 0;
pub const RCC_CFGR_PLLMUL3: u32 = 262144;
pub const RCC_CFGR_PLLMUL4: u32 = 524288;
pub const RCC_CFGR_PLLMUL5: u32 = 786432;
pub const RCC_CFGR_PLLMUL6: u32 = 1048576;
pub const RCC_CFGR_PLLMUL7: u32 = 1310720;
pub const RCC_CFGR_PLLMUL8: u32 = 1572864;
pub const RCC_CFGR_PLLMUL9: u32 = 1835008;
pub const RCC_CFGR_PLLMUL10: u32 = 2097152;
pub const RCC_CFGR_PLLMUL11: u32 = 2359296;
pub const RCC_CFGR_PLLMUL12: u32 = 2621440;
pub const RCC_CFGR_PLLMUL13: u32 = 2883584;
pub const RCC_CFGR_PLLMUL14: u32 = 3145728;
pub const RCC_CFGR_PLLMUL15: u32 = 3407872;
pub const RCC_CFGR_PLLMUL16: u32 = 3670016;
pub const RCC_CFGR_USBPRE_Pos: u32 = 22;
pub const RCC_CFGR_USBPRE_Msk: u32 = 4194304;
pub const RCC_CFGR_USBPRE: u32 = 4194304;
pub const RCC_CFGR_USBPRE_DIV1_5: u32 = 0;
pub const RCC_CFGR_USBPRE_DIV1: u32 = 4194304;
pub const RCC_CFGR_I2SSRC_Pos: u32 = 23;
pub const RCC_CFGR_I2SSRC_Msk: u32 = 8388608;
pub const RCC_CFGR_I2SSRC: u32 = 8388608;
pub const RCC_CFGR_I2SSRC_SYSCLK: u32 = 0;
pub const RCC_CFGR_I2SSRC_EXT: u32 = 8388608;
pub const RCC_CFGR_MCO_Pos: u32 = 24;
pub const RCC_CFGR_MCO_Msk: u32 = 117440512;
pub const RCC_CFGR_MCO: u32 = 117440512;
pub const RCC_CFGR_MCO_0: u32 = 16777216;
pub const RCC_CFGR_MCO_1: u32 = 33554432;
pub const RCC_CFGR_MCO_2: u32 = 67108864;
pub const RCC_CFGR_MCO_NOCLOCK: u32 = 0;
pub const RCC_CFGR_MCO_LSI: u32 = 33554432;
pub const RCC_CFGR_MCO_LSE: u32 = 50331648;
pub const RCC_CFGR_MCO_SYSCLK: u32 = 67108864;
pub const RCC_CFGR_MCO_HSI: u32 = 83886080;
pub const RCC_CFGR_MCO_HSE: u32 = 100663296;
pub const RCC_CFGR_MCO_PLL: u32 = 117440512;
pub const RCC_CFGR_MCOF_Pos: u32 = 28;
pub const RCC_CFGR_MCOF_Msk: u32 = 268435456;
pub const RCC_CFGR_MCOF: u32 = 268435456;
pub const RCC_CFGR_MCOSEL: u32 = 117440512;
pub const RCC_CFGR_MCOSEL_0: u32 = 16777216;
pub const RCC_CFGR_MCOSEL_1: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_2: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_NOCLOCK: u32 = 0;
pub const RCC_CFGR_MCOSEL_LSI: u32 = 33554432;
pub const RCC_CFGR_MCOSEL_LSE: u32 = 50331648;
pub const RCC_CFGR_MCOSEL_SYSCLK: u32 = 67108864;
pub const RCC_CFGR_MCOSEL_HSI: u32 = 83886080;
pub const RCC_CFGR_MCOSEL_HSE: u32 = 100663296;
pub const RCC_CFGR_MCOSEL_PLL_DIV2: u32 = 117440512;
pub const RCC_CIR_LSIRDYF_Pos: u32 = 0;
pub const RCC_CIR_LSIRDYF_Msk: u32 = 1;
pub const RCC_CIR_LSIRDYF: u32 = 1;
pub const RCC_CIR_LSERDYF_Pos: u32 = 1;
pub const RCC_CIR_LSERDYF_Msk: u32 = 2;
pub const RCC_CIR_LSERDYF: u32 = 2;
pub const RCC_CIR_HSIRDYF_Pos: u32 = 2;
pub const RCC_CIR_HSIRDYF_Msk: u32 = 4;
pub const RCC_CIR_HSIRDYF: u32 = 4;
pub const RCC_CIR_HSERDYF_Pos: u32 = 3;
pub const RCC_CIR_HSERDYF_Msk: u32 = 8;
pub const RCC_CIR_HSERDYF: u32 = 8;
pub const RCC_CIR_PLLRDYF_Pos: u32 = 4;
pub const RCC_CIR_PLLRDYF_Msk: u32 = 16;
pub const RCC_CIR_PLLRDYF: u32 = 16;
pub const RCC_CIR_CSSF_Pos: u32 = 7;
pub const RCC_CIR_CSSF_Msk: u32 = 128;
pub const RCC_CIR_CSSF: u32 = 128;
pub const RCC_CIR_LSIRDYIE_Pos: u32 = 8;
pub const RCC_CIR_LSIRDYIE_Msk: u32 = 256;
pub const RCC_CIR_LSIRDYIE: u32 = 256;
pub const RCC_CIR_LSERDYIE_Pos: u32 = 9;
pub const RCC_CIR_LSERDYIE_Msk: u32 = 512;
pub const RCC_CIR_LSERDYIE: u32 = 512;
pub const RCC_CIR_HSIRDYIE_Pos: u32 = 10;
pub const RCC_CIR_HSIRDYIE_Msk: u32 = 1024;
pub const RCC_CIR_HSIRDYIE: u32 = 1024;
pub const RCC_CIR_HSERDYIE_Pos: u32 = 11;
pub const RCC_CIR_HSERDYIE_Msk: u32 = 2048;
pub const RCC_CIR_HSERDYIE: u32 = 2048;
pub const RCC_CIR_PLLRDYIE_Pos: u32 = 12;
pub const RCC_CIR_PLLRDYIE_Msk: u32 = 4096;
pub const RCC_CIR_PLLRDYIE: u32 = 4096;
pub const RCC_CIR_LSIRDYC_Pos: u32 = 16;
pub const RCC_CIR_LSIRDYC_Msk: u32 = 65536;
pub const RCC_CIR_LSIRDYC: u32 = 65536;
pub const RCC_CIR_LSERDYC_Pos: u32 = 17;
pub const RCC_CIR_LSERDYC_Msk: u32 = 131072;
pub const RCC_CIR_LSERDYC: u32 = 131072;
pub const RCC_CIR_HSIRDYC_Pos: u32 = 18;
pub const RCC_CIR_HSIRDYC_Msk: u32 = 262144;
pub const RCC_CIR_HSIRDYC: u32 = 262144;
pub const RCC_CIR_HSERDYC_Pos: u32 = 19;
pub const RCC_CIR_HSERDYC_Msk: u32 = 524288;
pub const RCC_CIR_HSERDYC: u32 = 524288;
pub const RCC_CIR_PLLRDYC_Pos: u32 = 20;
pub const RCC_CIR_PLLRDYC_Msk: u32 = 1048576;
pub const RCC_CIR_PLLRDYC: u32 = 1048576;
pub const RCC_CIR_CSSC_Pos: u32 = 23;
pub const RCC_CIR_CSSC_Msk: u32 = 8388608;
pub const RCC_CIR_CSSC: u32 = 8388608;
pub const RCC_APB2RSTR_SYSCFGRST_Pos: u32 = 0;
pub const RCC_APB2RSTR_SYSCFGRST_Msk: u32 = 1;
pub const RCC_APB2RSTR_SYSCFGRST: u32 = 1;
pub const RCC_APB2RSTR_TIM1RST_Pos: u32 = 11;
pub const RCC_APB2RSTR_TIM1RST_Msk: u32 = 2048;
pub const RCC_APB2RSTR_TIM1RST: u32 = 2048;
pub const RCC_APB2RSTR_SPI1RST_Pos: u32 = 12;
pub const RCC_APB2RSTR_SPI1RST_Msk: u32 = 4096;
pub const RCC_APB2RSTR_SPI1RST: u32 = 4096;
pub const RCC_APB2RSTR_TIM8RST_Pos: u32 = 13;
pub const RCC_APB2RSTR_TIM8RST_Msk: u32 = 8192;
pub const RCC_APB2RSTR_TIM8RST: u32 = 8192;
pub const RCC_APB2RSTR_USART1RST_Pos: u32 = 14;
pub const RCC_APB2RSTR_USART1RST_Msk: u32 = 16384;
pub const RCC_APB2RSTR_USART1RST: u32 = 16384;
pub const RCC_APB2RSTR_TIM15RST_Pos: u32 = 16;
pub const RCC_APB2RSTR_TIM15RST_Msk: u32 = 65536;
pub const RCC_APB2RSTR_TIM15RST: u32 = 65536;
pub const RCC_APB2RSTR_TIM16RST_Pos: u32 = 17;
pub const RCC_APB2RSTR_TIM16RST_Msk: u32 = 131072;
pub const RCC_APB2RSTR_TIM16RST: u32 = 131072;
pub const RCC_APB2RSTR_TIM17RST_Pos: u32 = 18;
pub const RCC_APB2RSTR_TIM17RST_Msk: u32 = 262144;
pub const RCC_APB2RSTR_TIM17RST: u32 = 262144;
pub const RCC_APB1RSTR_TIM2RST_Pos: u32 = 0;
pub const RCC_APB1RSTR_TIM2RST_Msk: u32 = 1;
pub const RCC_APB1RSTR_TIM2RST: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Pos: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Msk: u32 = 2;
pub const RCC_APB1RSTR_TIM3RST: u32 = 2;
pub const RCC_APB1RSTR_TIM4RST_Pos: u32 = 2;
pub const RCC_APB1RSTR_TIM4RST_Msk: u32 = 4;
pub const RCC_APB1RSTR_TIM4RST: u32 = 4;
pub const RCC_APB1RSTR_TIM6RST_Pos: u32 = 4;
pub const RCC_APB1RSTR_TIM6RST_Msk: u32 = 16;
pub const RCC_APB1RSTR_TIM6RST: u32 = 16;
pub const RCC_APB1RSTR_TIM7RST_Pos: u32 = 5;
pub const RCC_APB1RSTR_TIM7RST_Msk: u32 = 32;
pub const RCC_APB1RSTR_TIM7RST: u32 = 32;
pub const RCC_APB1RSTR_WWDGRST_Pos: u32 = 11;
pub const RCC_APB1RSTR_WWDGRST_Msk: u32 = 2048;
pub const RCC_APB1RSTR_WWDGRST: u32 = 2048;
pub const RCC_APB1RSTR_SPI2RST_Pos: u32 = 14;
pub const RCC_APB1RSTR_SPI2RST_Msk: u32 = 16384;
pub const RCC_APB1RSTR_SPI2RST: u32 = 16384;
pub const RCC_APB1RSTR_SPI3RST_Pos: u32 = 15;
pub const RCC_APB1RSTR_SPI3RST_Msk: u32 = 32768;
pub const RCC_APB1RSTR_SPI3RST: u32 = 32768;
pub const RCC_APB1RSTR_USART2RST_Pos: u32 = 17;
pub const RCC_APB1RSTR_USART2RST_Msk: u32 = 131072;
pub const RCC_APB1RSTR_USART2RST: u32 = 131072;
pub const RCC_APB1RSTR_USART3RST_Pos: u32 = 18;
pub const RCC_APB1RSTR_USART3RST_Msk: u32 = 262144;
pub const RCC_APB1RSTR_USART3RST: u32 = 262144;
pub const RCC_APB1RSTR_UART4RST_Pos: u32 = 19;
pub const RCC_APB1RSTR_UART4RST_Msk: u32 = 524288;
pub const RCC_APB1RSTR_UART4RST: u32 = 524288;
pub const RCC_APB1RSTR_UART5RST_Pos: u32 = 20;
pub const RCC_APB1RSTR_UART5RST_Msk: u32 = 1048576;
pub const RCC_APB1RSTR_UART5RST: u32 = 1048576;
pub const RCC_APB1RSTR_I2C1RST_Pos: u32 = 21;
pub const RCC_APB1RSTR_I2C1RST_Msk: u32 = 2097152;
pub const RCC_APB1RSTR_I2C1RST: u32 = 2097152;
pub const RCC_APB1RSTR_I2C2RST_Pos: u32 = 22;
pub const RCC_APB1RSTR_I2C2RST_Msk: u32 = 4194304;
pub const RCC_APB1RSTR_I2C2RST: u32 = 4194304;
pub const RCC_APB1RSTR_USBRST_Pos: u32 = 23;
pub const RCC_APB1RSTR_USBRST_Msk: u32 = 8388608;
pub const RCC_APB1RSTR_USBRST: u32 = 8388608;
pub const RCC_APB1RSTR_CANRST_Pos: u32 = 25;
pub const RCC_APB1RSTR_CANRST_Msk: u32 = 33554432;
pub const RCC_APB1RSTR_CANRST: u32 = 33554432;
pub const RCC_APB1RSTR_PWRRST_Pos: u32 = 28;
pub const RCC_APB1RSTR_PWRRST_Msk: u32 = 268435456;
pub const RCC_APB1RSTR_PWRRST: u32 = 268435456;
pub const RCC_APB1RSTR_DAC1RST_Pos: u32 = 29;
pub const RCC_APB1RSTR_DAC1RST_Msk: u32 = 536870912;
pub const RCC_APB1RSTR_DAC1RST: u32 = 536870912;
pub const RCC_AHBENR_DMA1EN_Pos: u32 = 0;
pub const RCC_AHBENR_DMA1EN_Msk: u32 = 1;
pub const RCC_AHBENR_DMA1EN: u32 = 1;
pub const RCC_AHBENR_DMA2EN_Pos: u32 = 1;
pub const RCC_AHBENR_DMA2EN_Msk: u32 = 2;
pub const RCC_AHBENR_DMA2EN: u32 = 2;
pub const RCC_AHBENR_SRAMEN_Pos: u32 = 2;
pub const RCC_AHBENR_SRAMEN_Msk: u32 = 4;
pub const RCC_AHBENR_SRAMEN: u32 = 4;
pub const RCC_AHBENR_FLITFEN_Pos: u32 = 4;
pub const RCC_AHBENR_FLITFEN_Msk: u32 = 16;
pub const RCC_AHBENR_FLITFEN: u32 = 16;
pub const RCC_AHBENR_CRCEN_Pos: u32 = 6;
pub const RCC_AHBENR_CRCEN_Msk: u32 = 64;
pub const RCC_AHBENR_CRCEN: u32 = 64;
pub const RCC_AHBENR_GPIOAEN_Pos: u32 = 17;
pub const RCC_AHBENR_GPIOAEN_Msk: u32 = 131072;
pub const RCC_AHBENR_GPIOAEN: u32 = 131072;
pub const RCC_AHBENR_GPIOBEN_Pos: u32 = 18;
pub const RCC_AHBENR_GPIOBEN_Msk: u32 = 262144;
pub const RCC_AHBENR_GPIOBEN: u32 = 262144;
pub const RCC_AHBENR_GPIOCEN_Pos: u32 = 19;
pub const RCC_AHBENR_GPIOCEN_Msk: u32 = 524288;
pub const RCC_AHBENR_GPIOCEN: u32 = 524288;
pub const RCC_AHBENR_GPIODEN_Pos: u32 = 20;
pub const RCC_AHBENR_GPIODEN_Msk: u32 = 1048576;
pub const RCC_AHBENR_GPIODEN: u32 = 1048576;
pub const RCC_AHBENR_GPIOEEN_Pos: u32 = 21;
pub const RCC_AHBENR_GPIOEEN_Msk: u32 = 2097152;
pub const RCC_AHBENR_GPIOEEN: u32 = 2097152;
pub const RCC_AHBENR_GPIOFEN_Pos: u32 = 22;
pub const RCC_AHBENR_GPIOFEN_Msk: u32 = 4194304;
pub const RCC_AHBENR_GPIOFEN: u32 = 4194304;
pub const RCC_AHBENR_TSCEN_Pos: u32 = 24;
pub const RCC_AHBENR_TSCEN_Msk: u32 = 16777216;
pub const RCC_AHBENR_TSCEN: u32 = 16777216;
pub const RCC_AHBENR_ADC12EN_Pos: u32 = 28;
pub const RCC_AHBENR_ADC12EN_Msk: u32 = 268435456;
pub const RCC_AHBENR_ADC12EN: u32 = 268435456;
pub const RCC_AHBENR_ADC34EN_Pos: u32 = 29;
pub const RCC_AHBENR_ADC34EN_Msk: u32 = 536870912;
pub const RCC_AHBENR_ADC34EN: u32 = 536870912;
pub const RCC_APB2ENR_SYSCFGEN_Pos: u32 = 0;
pub const RCC_APB2ENR_SYSCFGEN_Msk: u32 = 1;
pub const RCC_APB2ENR_SYSCFGEN: u32 = 1;
pub const RCC_APB2ENR_TIM1EN_Pos: u32 = 11;
pub const RCC_APB2ENR_TIM1EN_Msk: u32 = 2048;
pub const RCC_APB2ENR_TIM1EN: u32 = 2048;
pub const RCC_APB2ENR_SPI1EN_Pos: u32 = 12;
pub const RCC_APB2ENR_SPI1EN_Msk: u32 = 4096;
pub const RCC_APB2ENR_SPI1EN: u32 = 4096;
pub const RCC_APB2ENR_TIM8EN_Pos: u32 = 13;
pub const RCC_APB2ENR_TIM8EN_Msk: u32 = 8192;
pub const RCC_APB2ENR_TIM8EN: u32 = 8192;
pub const RCC_APB2ENR_USART1EN_Pos: u32 = 14;
pub const RCC_APB2ENR_USART1EN_Msk: u32 = 16384;
pub const RCC_APB2ENR_USART1EN: u32 = 16384;
pub const RCC_APB2ENR_TIM15EN_Pos: u32 = 16;
pub const RCC_APB2ENR_TIM15EN_Msk: u32 = 65536;
pub const RCC_APB2ENR_TIM15EN: u32 = 65536;
pub const RCC_APB2ENR_TIM16EN_Pos: u32 = 17;
pub const RCC_APB2ENR_TIM16EN_Msk: u32 = 131072;
pub const RCC_APB2ENR_TIM16EN: u32 = 131072;
pub const RCC_APB2ENR_TIM17EN_Pos: u32 = 18;
pub const RCC_APB2ENR_TIM17EN_Msk: u32 = 262144;
pub const RCC_APB2ENR_TIM17EN: u32 = 262144;
pub const RCC_APB1ENR_TIM2EN_Pos: u32 = 0;
pub const RCC_APB1ENR_TIM2EN_Msk: u32 = 1;
pub const RCC_APB1ENR_TIM2EN: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Pos: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Msk: u32 = 2;
pub const RCC_APB1ENR_TIM3EN: u32 = 2;
pub const RCC_APB1ENR_TIM4EN_Pos: u32 = 2;
pub const RCC_APB1ENR_TIM4EN_Msk: u32 = 4;
pub const RCC_APB1ENR_TIM4EN: u32 = 4;
pub const RCC_APB1ENR_TIM6EN_Pos: u32 = 4;
pub const RCC_APB1ENR_TIM6EN_Msk: u32 = 16;
pub const RCC_APB1ENR_TIM6EN: u32 = 16;
pub const RCC_APB1ENR_TIM7EN_Pos: u32 = 5;
pub const RCC_APB1ENR_TIM7EN_Msk: u32 = 32;
pub const RCC_APB1ENR_TIM7EN: u32 = 32;
pub const RCC_APB1ENR_WWDGEN_Pos: u32 = 11;
pub const RCC_APB1ENR_WWDGEN_Msk: u32 = 2048;
pub const RCC_APB1ENR_WWDGEN: u32 = 2048;
pub const RCC_APB1ENR_SPI2EN_Pos: u32 = 14;
pub const RCC_APB1ENR_SPI2EN_Msk: u32 = 16384;
pub const RCC_APB1ENR_SPI2EN: u32 = 16384;
pub const RCC_APB1ENR_SPI3EN_Pos: u32 = 15;
pub const RCC_APB1ENR_SPI3EN_Msk: u32 = 32768;
pub const RCC_APB1ENR_SPI3EN: u32 = 32768;
pub const RCC_APB1ENR_USART2EN_Pos: u32 = 17;
pub const RCC_APB1ENR_USART2EN_Msk: u32 = 131072;
pub const RCC_APB1ENR_USART2EN: u32 = 131072;
pub const RCC_APB1ENR_USART3EN_Pos: u32 = 18;
pub const RCC_APB1ENR_USART3EN_Msk: u32 = 262144;
pub const RCC_APB1ENR_USART3EN: u32 = 262144;
pub const RCC_APB1ENR_UART4EN_Pos: u32 = 19;
pub const RCC_APB1ENR_UART4EN_Msk: u32 = 524288;
pub const RCC_APB1ENR_UART4EN: u32 = 524288;
pub const RCC_APB1ENR_UART5EN_Pos: u32 = 20;
pub const RCC_APB1ENR_UART5EN_Msk: u32 = 1048576;
pub const RCC_APB1ENR_UART5EN: u32 = 1048576;
pub const RCC_APB1ENR_I2C1EN_Pos: u32 = 21;
pub const RCC_APB1ENR_I2C1EN_Msk: u32 = 2097152;
pub const RCC_APB1ENR_I2C1EN: u32 = 2097152;
pub const RCC_APB1ENR_I2C2EN_Pos: u32 = 22;
pub const RCC_APB1ENR_I2C2EN_Msk: u32 = 4194304;
pub const RCC_APB1ENR_I2C2EN: u32 = 4194304;
pub const RCC_APB1ENR_USBEN_Pos: u32 = 23;
pub const RCC_APB1ENR_USBEN_Msk: u32 = 8388608;
pub const RCC_APB1ENR_USBEN: u32 = 8388608;
pub const RCC_APB1ENR_CANEN_Pos: u32 = 25;
pub const RCC_APB1ENR_CANEN_Msk: u32 = 33554432;
pub const RCC_APB1ENR_CANEN: u32 = 33554432;
pub const RCC_APB1ENR_PWREN_Pos: u32 = 28;
pub const RCC_APB1ENR_PWREN_Msk: u32 = 268435456;
pub const RCC_APB1ENR_PWREN: u32 = 268435456;
pub const RCC_APB1ENR_DAC1EN_Pos: u32 = 29;
pub const RCC_APB1ENR_DAC1EN_Msk: u32 = 536870912;
pub const RCC_APB1ENR_DAC1EN: u32 = 536870912;
pub const RCC_BDCR_LSE_Pos: u32 = 0;
pub const RCC_BDCR_LSE_Msk: u32 = 7;
pub const RCC_BDCR_LSE: u32 = 7;
pub const RCC_BDCR_LSEON_Pos: u32 = 0;
pub const RCC_BDCR_LSEON_Msk: u32 = 1;
pub const RCC_BDCR_LSEON: u32 = 1;
pub const RCC_BDCR_LSERDY_Pos: u32 = 1;
pub const RCC_BDCR_LSERDY_Msk: u32 = 2;
pub const RCC_BDCR_LSERDY: u32 = 2;
pub const RCC_BDCR_LSEBYP_Pos: u32 = 2;
pub const RCC_BDCR_LSEBYP_Msk: u32 = 4;
pub const RCC_BDCR_LSEBYP: u32 = 4;
pub const RCC_BDCR_LSEDRV_Pos: u32 = 3;
pub const RCC_BDCR_LSEDRV_Msk: u32 = 24;
pub const RCC_BDCR_LSEDRV: u32 = 24;
pub const RCC_BDCR_LSEDRV_0: u32 = 8;
pub const RCC_BDCR_LSEDRV_1: u32 = 16;
pub const RCC_BDCR_RTCSEL_Pos: u32 = 8;
pub const RCC_BDCR_RTCSEL_Msk: u32 = 768;
pub const RCC_BDCR_RTCSEL: u32 = 768;
pub const RCC_BDCR_RTCSEL_0: u32 = 256;
pub const RCC_BDCR_RTCSEL_1: u32 = 512;
pub const RCC_BDCR_RTCSEL_NOCLOCK: u32 = 0;
pub const RCC_BDCR_RTCSEL_LSE: u32 = 256;
pub const RCC_BDCR_RTCSEL_LSI: u32 = 512;
pub const RCC_BDCR_RTCSEL_HSE: u32 = 768;
pub const RCC_BDCR_RTCEN_Pos: u32 = 15;
pub const RCC_BDCR_RTCEN_Msk: u32 = 32768;
pub const RCC_BDCR_RTCEN: u32 = 32768;
pub const RCC_BDCR_BDRST_Pos: u32 = 16;
pub const RCC_BDCR_BDRST_Msk: u32 = 65536;
pub const RCC_BDCR_BDRST: u32 = 65536;
pub const RCC_CSR_LSION_Pos: u32 = 0;
pub const RCC_CSR_LSION_Msk: u32 = 1;
pub const RCC_CSR_LSION: u32 = 1;
pub const RCC_CSR_LSIRDY_Pos: u32 = 1;
pub const RCC_CSR_LSIRDY_Msk: u32 = 2;
pub const RCC_CSR_LSIRDY: u32 = 2;
pub const RCC_CSR_V18PWRRSTF_Pos: u32 = 23;
pub const RCC_CSR_V18PWRRSTF_Msk: u32 = 8388608;
pub const RCC_CSR_V18PWRRSTF: u32 = 8388608;
pub const RCC_CSR_RMVF_Pos: u32 = 24;
pub const RCC_CSR_RMVF_Msk: u32 = 16777216;
pub const RCC_CSR_RMVF: u32 = 16777216;
pub const RCC_CSR_OBLRSTF_Pos: u32 = 25;
pub const RCC_CSR_OBLRSTF_Msk: u32 = 33554432;
pub const RCC_CSR_OBLRSTF: u32 = 33554432;
pub const RCC_CSR_PINRSTF_Pos: u32 = 26;
pub const RCC_CSR_PINRSTF_Msk: u32 = 67108864;
pub const RCC_CSR_PINRSTF: u32 = 67108864;
pub const RCC_CSR_PORRSTF_Pos: u32 = 27;
pub const RCC_CSR_PORRSTF_Msk: u32 = 134217728;
pub const RCC_CSR_PORRSTF: u32 = 134217728;
pub const RCC_CSR_SFTRSTF_Pos: u32 = 28;
pub const RCC_CSR_SFTRSTF_Msk: u32 = 268435456;
pub const RCC_CSR_SFTRSTF: u32 = 268435456;
pub const RCC_CSR_IWDGRSTF_Pos: u32 = 29;
pub const RCC_CSR_IWDGRSTF_Msk: u32 = 536870912;
pub const RCC_CSR_IWDGRSTF: u32 = 536870912;
pub const RCC_CSR_WWDGRSTF_Pos: u32 = 30;
pub const RCC_CSR_WWDGRSTF_Msk: u32 = 1073741824;
pub const RCC_CSR_WWDGRSTF: u32 = 1073741824;
pub const RCC_CSR_LPWRRSTF_Pos: u32 = 31;
pub const RCC_CSR_LPWRRSTF_Msk: u32 = 2147483648;
pub const RCC_CSR_LPWRRSTF: u32 = 2147483648;
pub const RCC_CSR_VREGRSTF: u32 = 8388608;
pub const RCC_AHBRSTR_GPIOARST_Pos: u32 = 17;
pub const RCC_AHBRSTR_GPIOARST_Msk: u32 = 131072;
pub const RCC_AHBRSTR_GPIOARST: u32 = 131072;
pub const RCC_AHBRSTR_GPIOBRST_Pos: u32 = 18;
pub const RCC_AHBRSTR_GPIOBRST_Msk: u32 = 262144;
pub const RCC_AHBRSTR_GPIOBRST: u32 = 262144;
pub const RCC_AHBRSTR_GPIOCRST_Pos: u32 = 19;
pub const RCC_AHBRSTR_GPIOCRST_Msk: u32 = 524288;
pub const RCC_AHBRSTR_GPIOCRST: u32 = 524288;
pub const RCC_AHBRSTR_GPIODRST_Pos: u32 = 20;
pub const RCC_AHBRSTR_GPIODRST_Msk: u32 = 1048576;
pub const RCC_AHBRSTR_GPIODRST: u32 = 1048576;
pub const RCC_AHBRSTR_GPIOERST_Pos: u32 = 21;
pub const RCC_AHBRSTR_GPIOERST_Msk: u32 = 2097152;
pub const RCC_AHBRSTR_GPIOERST: u32 = 2097152;
pub const RCC_AHBRSTR_GPIOFRST_Pos: u32 = 22;
pub const RCC_AHBRSTR_GPIOFRST_Msk: u32 = 4194304;
pub const RCC_AHBRSTR_GPIOFRST: u32 = 4194304;
pub const RCC_AHBRSTR_TSCRST_Pos: u32 = 24;
pub const RCC_AHBRSTR_TSCRST_Msk: u32 = 16777216;
pub const RCC_AHBRSTR_TSCRST: u32 = 16777216;
pub const RCC_AHBRSTR_ADC12RST_Pos: u32 = 28;
pub const RCC_AHBRSTR_ADC12RST_Msk: u32 = 268435456;
pub const RCC_AHBRSTR_ADC12RST: u32 = 268435456;
pub const RCC_AHBRSTR_ADC34RST_Pos: u32 = 29;
pub const RCC_AHBRSTR_ADC34RST_Msk: u32 = 536870912;
pub const RCC_AHBRSTR_ADC34RST: u32 = 536870912;
pub const RCC_CFGR2_PREDIV_Pos: u32 = 0;
pub const RCC_CFGR2_PREDIV_Msk: u32 = 15;
pub const RCC_CFGR2_PREDIV: u32 = 15;
pub const RCC_CFGR2_PREDIV_0: u32 = 1;
pub const RCC_CFGR2_PREDIV_1: u32 = 2;
pub const RCC_CFGR2_PREDIV_2: u32 = 4;
pub const RCC_CFGR2_PREDIV_3: u32 = 8;
pub const RCC_CFGR2_PREDIV_DIV1: u32 = 0;
pub const RCC_CFGR2_PREDIV_DIV2: u32 = 1;
pub const RCC_CFGR2_PREDIV_DIV3: u32 = 2;
pub const RCC_CFGR2_PREDIV_DIV4: u32 = 3;
pub const RCC_CFGR2_PREDIV_DIV5: u32 = 4;
pub const RCC_CFGR2_PREDIV_DIV6: u32 = 5;
pub const RCC_CFGR2_PREDIV_DIV7: u32 = 6;
pub const RCC_CFGR2_PREDIV_DIV8: u32 = 7;
pub const RCC_CFGR2_PREDIV_DIV9: u32 = 8;
pub const RCC_CFGR2_PREDIV_DIV10: u32 = 9;
pub const RCC_CFGR2_PREDIV_DIV11: u32 = 10;
pub const RCC_CFGR2_PREDIV_DIV12: u32 = 11;
pub const RCC_CFGR2_PREDIV_DIV13: u32 = 12;
pub const RCC_CFGR2_PREDIV_DIV14: u32 = 13;
pub const RCC_CFGR2_PREDIV_DIV15: u32 = 14;
pub const RCC_CFGR2_PREDIV_DIV16: u32 = 15;
pub const RCC_CFGR2_ADCPRE12_Pos: u32 = 4;
pub const RCC_CFGR2_ADCPRE12_Msk: u32 = 496;
pub const RCC_CFGR2_ADCPRE12: u32 = 496;
pub const RCC_CFGR2_ADCPRE12_0: u32 = 16;
pub const RCC_CFGR2_ADCPRE12_1: u32 = 32;
pub const RCC_CFGR2_ADCPRE12_2: u32 = 64;
pub const RCC_CFGR2_ADCPRE12_3: u32 = 128;
pub const RCC_CFGR2_ADCPRE12_4: u32 = 256;
pub const RCC_CFGR2_ADCPRE12_NO: u32 = 0;
pub const RCC_CFGR2_ADCPRE12_DIV1: u32 = 256;
pub const RCC_CFGR2_ADCPRE12_DIV2: u32 = 272;
pub const RCC_CFGR2_ADCPRE12_DIV4: u32 = 288;
pub const RCC_CFGR2_ADCPRE12_DIV6: u32 = 304;
pub const RCC_CFGR2_ADCPRE12_DIV8: u32 = 320;
pub const RCC_CFGR2_ADCPRE12_DIV10: u32 = 336;
pub const RCC_CFGR2_ADCPRE12_DIV12: u32 = 352;
pub const RCC_CFGR2_ADCPRE12_DIV16: u32 = 368;
pub const RCC_CFGR2_ADCPRE12_DIV32: u32 = 384;
pub const RCC_CFGR2_ADCPRE12_DIV64: u32 = 400;
pub const RCC_CFGR2_ADCPRE12_DIV128: u32 = 416;
pub const RCC_CFGR2_ADCPRE12_DIV256: u32 = 432;
pub const RCC_CFGR2_ADCPRE34_Pos: u32 = 9;
pub const RCC_CFGR2_ADCPRE34_Msk: u32 = 15872;
pub const RCC_CFGR2_ADCPRE34: u32 = 15872;
pub const RCC_CFGR2_ADCPRE34_0: u32 = 512;
pub const RCC_CFGR2_ADCPRE34_1: u32 = 1024;
pub const RCC_CFGR2_ADCPRE34_2: u32 = 2048;
pub const RCC_CFGR2_ADCPRE34_3: u32 = 4096;
pub const RCC_CFGR2_ADCPRE34_4: u32 = 8192;
pub const RCC_CFGR2_ADCPRE34_NO: u32 = 0;
pub const RCC_CFGR2_ADCPRE34_DIV1: u32 = 8192;
pub const RCC_CFGR2_ADCPRE34_DIV2: u32 = 8704;
pub const RCC_CFGR2_ADCPRE34_DIV4: u32 = 9216;
pub const RCC_CFGR2_ADCPRE34_DIV6: u32 = 9728;
pub const RCC_CFGR2_ADCPRE34_DIV8: u32 = 10240;
pub const RCC_CFGR2_ADCPRE34_DIV10: u32 = 10752;
pub const RCC_CFGR2_ADCPRE34_DIV12: u32 = 11264;
pub const RCC_CFGR2_ADCPRE34_DIV16: u32 = 11776;
pub const RCC_CFGR2_ADCPRE34_DIV32: u32 = 12288;
pub const RCC_CFGR2_ADCPRE34_DIV64: u32 = 12800;
pub const RCC_CFGR2_ADCPRE34_DIV128: u32 = 13312;
pub const RCC_CFGR2_ADCPRE34_DIV256: u32 = 13824;
pub const RCC_CFGR3_USART1SW_Pos: u32 = 0;
pub const RCC_CFGR3_USART1SW_Msk: u32 = 3;
pub const RCC_CFGR3_USART1SW: u32 = 3;
pub const RCC_CFGR3_USART1SW_0: u32 = 1;
pub const RCC_CFGR3_USART1SW_1: u32 = 2;
pub const RCC_CFGR3_USART1SW_PCLK2: u32 = 0;
pub const RCC_CFGR3_USART1SW_SYSCLK: u32 = 1;
pub const RCC_CFGR3_USART1SW_LSE: u32 = 2;
pub const RCC_CFGR3_USART1SW_HSI: u32 = 3;
pub const RCC_CFGR3_USART1SW_PCLK: u32 = 0;
pub const RCC_CFGR3_I2CSW_Pos: u32 = 4;
pub const RCC_CFGR3_I2CSW_Msk: u32 = 48;
pub const RCC_CFGR3_I2CSW: u32 = 48;
pub const RCC_CFGR3_I2C1SW_Pos: u32 = 4;
pub const RCC_CFGR3_I2C1SW_Msk: u32 = 16;
pub const RCC_CFGR3_I2C1SW: u32 = 16;
pub const RCC_CFGR3_I2C2SW_Pos: u32 = 5;
pub const RCC_CFGR3_I2C2SW_Msk: u32 = 32;
pub const RCC_CFGR3_I2C2SW: u32 = 32;
pub const RCC_CFGR3_I2C1SW_HSI: u32 = 0;
pub const RCC_CFGR3_I2C1SW_SYSCLK_Pos: u32 = 4;
pub const RCC_CFGR3_I2C1SW_SYSCLK_Msk: u32 = 16;
pub const RCC_CFGR3_I2C1SW_SYSCLK: u32 = 16;
pub const RCC_CFGR3_I2C2SW_HSI: u32 = 0;
pub const RCC_CFGR3_I2C2SW_SYSCLK_Pos: u32 = 5;
pub const RCC_CFGR3_I2C2SW_SYSCLK_Msk: u32 = 32;
pub const RCC_CFGR3_I2C2SW_SYSCLK: u32 = 32;
pub const RCC_CFGR3_TIMSW_Pos: u32 = 8;
pub const RCC_CFGR3_TIMSW_Msk: u32 = 768;
pub const RCC_CFGR3_TIMSW: u32 = 768;
pub const RCC_CFGR3_TIM1SW_Pos: u32 = 8;
pub const RCC_CFGR3_TIM1SW_Msk: u32 = 256;
pub const RCC_CFGR3_TIM1SW: u32 = 256;
pub const RCC_CFGR3_TIM8SW_Pos: u32 = 9;
pub const RCC_CFGR3_TIM8SW_Msk: u32 = 512;
pub const RCC_CFGR3_TIM8SW: u32 = 512;
pub const RCC_CFGR3_TIM1SW_PCLK2: u32 = 0;
pub const RCC_CFGR3_TIM1SW_PLL_Pos: u32 = 8;
pub const RCC_CFGR3_TIM1SW_PLL_Msk: u32 = 256;
pub const RCC_CFGR3_TIM1SW_PLL: u32 = 256;
pub const RCC_CFGR3_TIM8SW_PCLK2: u32 = 0;
pub const RCC_CFGR3_TIM8SW_PLL_Pos: u32 = 9;
pub const RCC_CFGR3_TIM8SW_PLL_Msk: u32 = 512;
pub const RCC_CFGR3_TIM8SW_PLL: u32 = 512;
pub const RCC_CFGR3_USART2SW_Pos: u32 = 16;
pub const RCC_CFGR3_USART2SW_Msk: u32 = 196608;
pub const RCC_CFGR3_USART2SW: u32 = 196608;
pub const RCC_CFGR3_USART2SW_0: u32 = 65536;
pub const RCC_CFGR3_USART2SW_1: u32 = 131072;
pub const RCC_CFGR3_USART2SW_PCLK: u32 = 0;
pub const RCC_CFGR3_USART2SW_SYSCLK: u32 = 65536;
pub const RCC_CFGR3_USART2SW_LSE: u32 = 131072;
pub const RCC_CFGR3_USART2SW_HSI: u32 = 196608;
pub const RCC_CFGR3_USART3SW_Pos: u32 = 18;
pub const RCC_CFGR3_USART3SW_Msk: u32 = 786432;
pub const RCC_CFGR3_USART3SW: u32 = 786432;
pub const RCC_CFGR3_USART3SW_0: u32 = 262144;
pub const RCC_CFGR3_USART3SW_1: u32 = 524288;
pub const RCC_CFGR3_USART3SW_PCLK: u32 = 0;
pub const RCC_CFGR3_USART3SW_SYSCLK: u32 = 262144;
pub const RCC_CFGR3_USART3SW_LSE: u32 = 524288;
pub const RCC_CFGR3_USART3SW_HSI: u32 = 786432;
pub const RCC_CFGR3_UART4SW_Pos: u32 = 20;
pub const RCC_CFGR3_UART4SW_Msk: u32 = 3145728;
pub const RCC_CFGR3_UART4SW: u32 = 3145728;
pub const RCC_CFGR3_UART4SW_0: u32 = 1048576;
pub const RCC_CFGR3_UART4SW_1: u32 = 2097152;
pub const RCC_CFGR3_UART4SW_PCLK: u32 = 0;
pub const RCC_CFGR3_UART4SW_SYSCLK: u32 = 1048576;
pub const RCC_CFGR3_UART4SW_LSE: u32 = 2097152;
pub const RCC_CFGR3_UART4SW_HSI: u32 = 3145728;
pub const RCC_CFGR3_UART5SW_Pos: u32 = 22;
pub const RCC_CFGR3_UART5SW_Msk: u32 = 12582912;
pub const RCC_CFGR3_UART5SW: u32 = 12582912;
pub const RCC_CFGR3_UART5SW_0: u32 = 4194304;
pub const RCC_CFGR3_UART5SW_1: u32 = 8388608;
pub const RCC_CFGR3_UART5SW_PCLK: u32 = 0;
pub const RCC_CFGR3_UART5SW_SYSCLK: u32 = 4194304;
pub const RCC_CFGR3_UART5SW_LSE: u32 = 8388608;
pub const RCC_CFGR3_UART5SW_HSI: u32 = 12582912;
pub const RCC_CFGR3_TIM1SW_HCLK: u32 = 0;
pub const RCC_CFGR3_TIM8SW_HCLK: u32 = 0;
pub const RTC_TR_PM_Pos: u32 = 22;
pub const RTC_TR_PM_Msk: u32 = 4194304;
pub const RTC_TR_PM: u32 = 4194304;
pub const RTC_TR_HT_Pos: u32 = 20;
pub const RTC_TR_HT_Msk: u32 = 3145728;
pub const RTC_TR_HT: u32 = 3145728;
pub const RTC_TR_HT_0: u32 = 1048576;
pub const RTC_TR_HT_1: u32 = 2097152;
pub const RTC_TR_HU_Pos: u32 = 16;
pub const RTC_TR_HU_Msk: u32 = 983040;
pub const RTC_TR_HU: u32 = 983040;
pub const RTC_TR_HU_0: u32 = 65536;
pub const RTC_TR_HU_1: u32 = 131072;
pub const RTC_TR_HU_2: u32 = 262144;
pub const RTC_TR_HU_3: u32 = 524288;
pub const RTC_TR_MNT_Pos: u32 = 12;
pub const RTC_TR_MNT_Msk: u32 = 28672;
pub const RTC_TR_MNT: u32 = 28672;
pub const RTC_TR_MNT_0: u32 = 4096;
pub const RTC_TR_MNT_1: u32 = 8192;
pub const RTC_TR_MNT_2: u32 = 16384;
pub const RTC_TR_MNU_Pos: u32 = 8;
pub const RTC_TR_MNU_Msk: u32 = 3840;
pub const RTC_TR_MNU: u32 = 3840;
pub const RTC_TR_MNU_0: u32 = 256;
pub const RTC_TR_MNU_1: u32 = 512;
pub const RTC_TR_MNU_2: u32 = 1024;
pub const RTC_TR_MNU_3: u32 = 2048;
pub const RTC_TR_ST_Pos: u32 = 4;
pub const RTC_TR_ST_Msk: u32 = 112;
pub const RTC_TR_ST: u32 = 112;
pub const RTC_TR_ST_0: u32 = 16;
pub const RTC_TR_ST_1: u32 = 32;
pub const RTC_TR_ST_2: u32 = 64;
pub const RTC_TR_SU_Pos: u32 = 0;
pub const RTC_TR_SU_Msk: u32 = 15;
pub const RTC_TR_SU: u32 = 15;
pub const RTC_TR_SU_0: u32 = 1;
pub const RTC_TR_SU_1: u32 = 2;
pub const RTC_TR_SU_2: u32 = 4;
pub const RTC_TR_SU_3: u32 = 8;
pub const RTC_DR_YT_Pos: u32 = 20;
pub const RTC_DR_YT_Msk: u32 = 15728640;
pub const RTC_DR_YT: u32 = 15728640;
pub const RTC_DR_YT_0: u32 = 1048576;
pub const RTC_DR_YT_1: u32 = 2097152;
pub const RTC_DR_YT_2: u32 = 4194304;
pub const RTC_DR_YT_3: u32 = 8388608;
pub const RTC_DR_YU_Pos: u32 = 16;
pub const RTC_DR_YU_Msk: u32 = 983040;
pub const RTC_DR_YU: u32 = 983040;
pub const RTC_DR_YU_0: u32 = 65536;
pub const RTC_DR_YU_1: u32 = 131072;
pub const RTC_DR_YU_2: u32 = 262144;
pub const RTC_DR_YU_3: u32 = 524288;
pub const RTC_DR_WDU_Pos: u32 = 13;
pub const RTC_DR_WDU_Msk: u32 = 57344;
pub const RTC_DR_WDU: u32 = 57344;
pub const RTC_DR_WDU_0: u32 = 8192;
pub const RTC_DR_WDU_1: u32 = 16384;
pub const RTC_DR_WDU_2: u32 = 32768;
pub const RTC_DR_MT_Pos: u32 = 12;
pub const RTC_DR_MT_Msk: u32 = 4096;
pub const RTC_DR_MT: u32 = 4096;
pub const RTC_DR_MU_Pos: u32 = 8;
pub const RTC_DR_MU_Msk: u32 = 3840;
pub const RTC_DR_MU: u32 = 3840;
pub const RTC_DR_MU_0: u32 = 256;
pub const RTC_DR_MU_1: u32 = 512;
pub const RTC_DR_MU_2: u32 = 1024;
pub const RTC_DR_MU_3: u32 = 2048;
pub const RTC_DR_DT_Pos: u32 = 4;
pub const RTC_DR_DT_Msk: u32 = 48;
pub const RTC_DR_DT: u32 = 48;
pub const RTC_DR_DT_0: u32 = 16;
pub const RTC_DR_DT_1: u32 = 32;
pub const RTC_DR_DU_Pos: u32 = 0;
pub const RTC_DR_DU_Msk: u32 = 15;
pub const RTC_DR_DU: u32 = 15;
pub const RTC_DR_DU_0: u32 = 1;
pub const RTC_DR_DU_1: u32 = 2;
pub const RTC_DR_DU_2: u32 = 4;
pub const RTC_DR_DU_3: u32 = 8;
pub const RTC_CR_COE_Pos: u32 = 23;
pub const RTC_CR_COE_Msk: u32 = 8388608;
pub const RTC_CR_COE: u32 = 8388608;
pub const RTC_CR_OSEL_Pos: u32 = 21;
pub const RTC_CR_OSEL_Msk: u32 = 6291456;
pub const RTC_CR_OSEL: u32 = 6291456;
pub const RTC_CR_OSEL_0: u32 = 2097152;
pub const RTC_CR_OSEL_1: u32 = 4194304;
pub const RTC_CR_POL_Pos: u32 = 20;
pub const RTC_CR_POL_Msk: u32 = 1048576;
pub const RTC_CR_POL: u32 = 1048576;
pub const RTC_CR_COSEL_Pos: u32 = 19;
pub const RTC_CR_COSEL_Msk: u32 = 524288;
pub const RTC_CR_COSEL: u32 = 524288;
pub const RTC_CR_BKP_Pos: u32 = 18;
pub const RTC_CR_BKP_Msk: u32 = 262144;
pub const RTC_CR_BKP: u32 = 262144;
pub const RTC_CR_SUB1H_Pos: u32 = 17;
pub const RTC_CR_SUB1H_Msk: u32 = 131072;
pub const RTC_CR_SUB1H: u32 = 131072;
pub const RTC_CR_ADD1H_Pos: u32 = 16;
pub const RTC_CR_ADD1H_Msk: u32 = 65536;
pub const RTC_CR_ADD1H: u32 = 65536;
pub const RTC_CR_TSIE_Pos: u32 = 15;
pub const RTC_CR_TSIE_Msk: u32 = 32768;
pub const RTC_CR_TSIE: u32 = 32768;
pub const RTC_CR_WUTIE_Pos: u32 = 14;
pub const RTC_CR_WUTIE_Msk: u32 = 16384;
pub const RTC_CR_WUTIE: u32 = 16384;
pub const RTC_CR_ALRBIE_Pos: u32 = 13;
pub const RTC_CR_ALRBIE_Msk: u32 = 8192;
pub const RTC_CR_ALRBIE: u32 = 8192;
pub const RTC_CR_ALRAIE_Pos: u32 = 12;
pub const RTC_CR_ALRAIE_Msk: u32 = 4096;
pub const RTC_CR_ALRAIE: u32 = 4096;
pub const RTC_CR_TSE_Pos: u32 = 11;
pub const RTC_CR_TSE_Msk: u32 = 2048;
pub const RTC_CR_TSE: u32 = 2048;
pub const RTC_CR_WUTE_Pos: u32 = 10;
pub const RTC_CR_WUTE_Msk: u32 = 1024;
pub const RTC_CR_WUTE: u32 = 1024;
pub const RTC_CR_ALRBE_Pos: u32 = 9;
pub const RTC_CR_ALRBE_Msk: u32 = 512;
pub const RTC_CR_ALRBE: u32 = 512;
pub const RTC_CR_ALRAE_Pos: u32 = 8;
pub const RTC_CR_ALRAE_Msk: u32 = 256;
pub const RTC_CR_ALRAE: u32 = 256;
pub const RTC_CR_FMT_Pos: u32 = 6;
pub const RTC_CR_FMT_Msk: u32 = 64;
pub const RTC_CR_FMT: u32 = 64;
pub const RTC_CR_BYPSHAD_Pos: u32 = 5;
pub const RTC_CR_BYPSHAD_Msk: u32 = 32;
pub const RTC_CR_BYPSHAD: u32 = 32;
pub const RTC_CR_REFCKON_Pos: u32 = 4;
pub const RTC_CR_REFCKON_Msk: u32 = 16;
pub const RTC_CR_REFCKON: u32 = 16;
pub const RTC_CR_TSEDGE_Pos: u32 = 3;
pub const RTC_CR_TSEDGE_Msk: u32 = 8;
pub const RTC_CR_TSEDGE: u32 = 8;
pub const RTC_CR_WUCKSEL_Pos: u32 = 0;
pub const RTC_CR_WUCKSEL_Msk: u32 = 7;
pub const RTC_CR_WUCKSEL: u32 = 7;
pub const RTC_CR_WUCKSEL_0: u32 = 1;
pub const RTC_CR_WUCKSEL_1: u32 = 2;
pub const RTC_CR_WUCKSEL_2: u32 = 4;
pub const RTC_CR_BCK_Pos: u32 = 18;
pub const RTC_CR_BCK_Msk: u32 = 262144;
pub const RTC_CR_BCK: u32 = 262144;
pub const RTC_ISR_RECALPF_Pos: u32 = 16;
pub const RTC_ISR_RECALPF_Msk: u32 = 65536;
pub const RTC_ISR_RECALPF: u32 = 65536;
pub const RTC_ISR_TAMP3F_Pos: u32 = 15;
pub const RTC_ISR_TAMP3F_Msk: u32 = 32768;
pub const RTC_ISR_TAMP3F: u32 = 32768;
pub const RTC_ISR_TAMP2F_Pos: u32 = 14;
pub const RTC_ISR_TAMP2F_Msk: u32 = 16384;
pub const RTC_ISR_TAMP2F: u32 = 16384;
pub const RTC_ISR_TAMP1F_Pos: u32 = 13;
pub const RTC_ISR_TAMP1F_Msk: u32 = 8192;
pub const RTC_ISR_TAMP1F: u32 = 8192;
pub const RTC_ISR_TSOVF_Pos: u32 = 12;
pub const RTC_ISR_TSOVF_Msk: u32 = 4096;
pub const RTC_ISR_TSOVF: u32 = 4096;
pub const RTC_ISR_TSF_Pos: u32 = 11;
pub const RTC_ISR_TSF_Msk: u32 = 2048;
pub const RTC_ISR_TSF: u32 = 2048;
pub const RTC_ISR_WUTF_Pos: u32 = 10;
pub const RTC_ISR_WUTF_Msk: u32 = 1024;
pub const RTC_ISR_WUTF: u32 = 1024;
pub const RTC_ISR_ALRBF_Pos: u32 = 9;
pub const RTC_ISR_ALRBF_Msk: u32 = 512;
pub const RTC_ISR_ALRBF: u32 = 512;
pub const RTC_ISR_ALRAF_Pos: u32 = 8;
pub const RTC_ISR_ALRAF_Msk: u32 = 256;
pub const RTC_ISR_ALRAF: u32 = 256;
pub const RTC_ISR_INIT_Pos: u32 = 7;
pub const RTC_ISR_INIT_Msk: u32 = 128;
pub const RTC_ISR_INIT: u32 = 128;
pub const RTC_ISR_INITF_Pos: u32 = 6;
pub const RTC_ISR_INITF_Msk: u32 = 64;
pub const RTC_ISR_INITF: u32 = 64;
pub const RTC_ISR_RSF_Pos: u32 = 5;
pub const RTC_ISR_RSF_Msk: u32 = 32;
pub const RTC_ISR_RSF: u32 = 32;
pub const RTC_ISR_INITS_Pos: u32 = 4;
pub const RTC_ISR_INITS_Msk: u32 = 16;
pub const RTC_ISR_INITS: u32 = 16;
pub const RTC_ISR_SHPF_Pos: u32 = 3;
pub const RTC_ISR_SHPF_Msk: u32 = 8;
pub const RTC_ISR_SHPF: u32 = 8;
pub const RTC_ISR_WUTWF_Pos: u32 = 2;
pub const RTC_ISR_WUTWF_Msk: u32 = 4;
pub const RTC_ISR_WUTWF: u32 = 4;
pub const RTC_ISR_ALRBWF_Pos: u32 = 1;
pub const RTC_ISR_ALRBWF_Msk: u32 = 2;
pub const RTC_ISR_ALRBWF: u32 = 2;
pub const RTC_ISR_ALRAWF_Pos: u32 = 0;
pub const RTC_ISR_ALRAWF_Msk: u32 = 1;
pub const RTC_ISR_ALRAWF: u32 = 1;
pub const RTC_PRER_PREDIV_A_Pos: u32 = 16;
pub const RTC_PRER_PREDIV_A_Msk: u32 = 8323072;
pub const RTC_PRER_PREDIV_A: u32 = 8323072;
pub const RTC_PRER_PREDIV_S_Pos: u32 = 0;
pub const RTC_PRER_PREDIV_S_Msk: u32 = 32767;
pub const RTC_PRER_PREDIV_S: u32 = 32767;
pub const RTC_WUTR_WUT_Pos: u32 = 0;
pub const RTC_WUTR_WUT_Msk: u32 = 65535;
pub const RTC_WUTR_WUT: u32 = 65535;
pub const RTC_ALRMAR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMAR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMAR_MSK4: u32 = 2147483648;
pub const RTC_ALRMAR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMAR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMAR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMAR_DT_Pos: u32 = 28;
pub const RTC_ALRMAR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMAR_DT: u32 = 805306368;
pub const RTC_ALRMAR_DT_0: u32 = 268435456;
pub const RTC_ALRMAR_DT_1: u32 = 536870912;
pub const RTC_ALRMAR_DU_Pos: u32 = 24;
pub const RTC_ALRMAR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMAR_DU: u32 = 251658240;
pub const RTC_ALRMAR_DU_0: u32 = 16777216;
pub const RTC_ALRMAR_DU_1: u32 = 33554432;
pub const RTC_ALRMAR_DU_2: u32 = 67108864;
pub const RTC_ALRMAR_DU_3: u32 = 134217728;
pub const RTC_ALRMAR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMAR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMAR_MSK3: u32 = 8388608;
pub const RTC_ALRMAR_PM_Pos: u32 = 22;
pub const RTC_ALRMAR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMAR_PM: u32 = 4194304;
pub const RTC_ALRMAR_HT_Pos: u32 = 20;
pub const RTC_ALRMAR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMAR_HT: u32 = 3145728;
pub const RTC_ALRMAR_HT_0: u32 = 1048576;
pub const RTC_ALRMAR_HT_1: u32 = 2097152;
pub const RTC_ALRMAR_HU_Pos: u32 = 16;
pub const RTC_ALRMAR_HU_Msk: u32 = 983040;
pub const RTC_ALRMAR_HU: u32 = 983040;
pub const RTC_ALRMAR_HU_0: u32 = 65536;
pub const RTC_ALRMAR_HU_1: u32 = 131072;
pub const RTC_ALRMAR_HU_2: u32 = 262144;
pub const RTC_ALRMAR_HU_3: u32 = 524288;
pub const RTC_ALRMAR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMAR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMAR_MSK2: u32 = 32768;
pub const RTC_ALRMAR_MNT_Pos: u32 = 12;
pub const RTC_ALRMAR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMAR_MNT: u32 = 28672;
pub const RTC_ALRMAR_MNT_0: u32 = 4096;
pub const RTC_ALRMAR_MNT_1: u32 = 8192;
pub const RTC_ALRMAR_MNT_2: u32 = 16384;
pub const RTC_ALRMAR_MNU_Pos: u32 = 8;
pub const RTC_ALRMAR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMAR_MNU: u32 = 3840;
pub const RTC_ALRMAR_MNU_0: u32 = 256;
pub const RTC_ALRMAR_MNU_1: u32 = 512;
pub const RTC_ALRMAR_MNU_2: u32 = 1024;
pub const RTC_ALRMAR_MNU_3: u32 = 2048;
pub const RTC_ALRMAR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMAR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMAR_MSK1: u32 = 128;
pub const RTC_ALRMAR_ST_Pos: u32 = 4;
pub const RTC_ALRMAR_ST_Msk: u32 = 112;
pub const RTC_ALRMAR_ST: u32 = 112;
pub const RTC_ALRMAR_ST_0: u32 = 16;
pub const RTC_ALRMAR_ST_1: u32 = 32;
pub const RTC_ALRMAR_ST_2: u32 = 64;
pub const RTC_ALRMAR_SU_Pos: u32 = 0;
pub const RTC_ALRMAR_SU_Msk: u32 = 15;
pub const RTC_ALRMAR_SU: u32 = 15;
pub const RTC_ALRMAR_SU_0: u32 = 1;
pub const RTC_ALRMAR_SU_1: u32 = 2;
pub const RTC_ALRMAR_SU_2: u32 = 4;
pub const RTC_ALRMAR_SU_3: u32 = 8;
pub const RTC_ALRMBR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMBR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMBR_MSK4: u32 = 2147483648;
pub const RTC_ALRMBR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMBR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMBR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMBR_DT_Pos: u32 = 28;
pub const RTC_ALRMBR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMBR_DT: u32 = 805306368;
pub const RTC_ALRMBR_DT_0: u32 = 268435456;
pub const RTC_ALRMBR_DT_1: u32 = 536870912;
pub const RTC_ALRMBR_DU_Pos: u32 = 24;
pub const RTC_ALRMBR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMBR_DU: u32 = 251658240;
pub const RTC_ALRMBR_DU_0: u32 = 16777216;
pub const RTC_ALRMBR_DU_1: u32 = 33554432;
pub const RTC_ALRMBR_DU_2: u32 = 67108864;
pub const RTC_ALRMBR_DU_3: u32 = 134217728;
pub const RTC_ALRMBR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMBR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMBR_MSK3: u32 = 8388608;
pub const RTC_ALRMBR_PM_Pos: u32 = 22;
pub const RTC_ALRMBR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMBR_PM: u32 = 4194304;
pub const RTC_ALRMBR_HT_Pos: u32 = 20;
pub const RTC_ALRMBR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMBR_HT: u32 = 3145728;
pub const RTC_ALRMBR_HT_0: u32 = 1048576;
pub const RTC_ALRMBR_HT_1: u32 = 2097152;
pub const RTC_ALRMBR_HU_Pos: u32 = 16;
pub const RTC_ALRMBR_HU_Msk: u32 = 983040;
pub const RTC_ALRMBR_HU: u32 = 983040;
pub const RTC_ALRMBR_HU_0: u32 = 65536;
pub const RTC_ALRMBR_HU_1: u32 = 131072;
pub const RTC_ALRMBR_HU_2: u32 = 262144;
pub const RTC_ALRMBR_HU_3: u32 = 524288;
pub const RTC_ALRMBR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMBR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMBR_MSK2: u32 = 32768;
pub const RTC_ALRMBR_MNT_Pos: u32 = 12;
pub const RTC_ALRMBR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMBR_MNT: u32 = 28672;
pub const RTC_ALRMBR_MNT_0: u32 = 4096;
pub const RTC_ALRMBR_MNT_1: u32 = 8192;
pub const RTC_ALRMBR_MNT_2: u32 = 16384;
pub const RTC_ALRMBR_MNU_Pos: u32 = 8;
pub const RTC_ALRMBR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMBR_MNU: u32 = 3840;
pub const RTC_ALRMBR_MNU_0: u32 = 256;
pub const RTC_ALRMBR_MNU_1: u32 = 512;
pub const RTC_ALRMBR_MNU_2: u32 = 1024;
pub const RTC_ALRMBR_MNU_3: u32 = 2048;
pub const RTC_ALRMBR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMBR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMBR_MSK1: u32 = 128;
pub const RTC_ALRMBR_ST_Pos: u32 = 4;
pub const RTC_ALRMBR_ST_Msk: u32 = 112;
pub const RTC_ALRMBR_ST: u32 = 112;
pub const RTC_ALRMBR_ST_0: u32 = 16;
pub const RTC_ALRMBR_ST_1: u32 = 32;
pub const RTC_ALRMBR_ST_2: u32 = 64;
pub const RTC_ALRMBR_SU_Pos: u32 = 0;
pub const RTC_ALRMBR_SU_Msk: u32 = 15;
pub const RTC_ALRMBR_SU: u32 = 15;
pub const RTC_ALRMBR_SU_0: u32 = 1;
pub const RTC_ALRMBR_SU_1: u32 = 2;
pub const RTC_ALRMBR_SU_2: u32 = 4;
pub const RTC_ALRMBR_SU_3: u32 = 8;
pub const RTC_WPR_KEY_Pos: u32 = 0;
pub const RTC_WPR_KEY_Msk: u32 = 255;
pub const RTC_WPR_KEY: u32 = 255;
pub const RTC_SSR_SS_Pos: u32 = 0;
pub const RTC_SSR_SS_Msk: u32 = 65535;
pub const RTC_SSR_SS: u32 = 65535;
pub const RTC_SHIFTR_SUBFS_Pos: u32 = 0;
pub const RTC_SHIFTR_SUBFS_Msk: u32 = 32767;
pub const RTC_SHIFTR_SUBFS: u32 = 32767;
pub const RTC_SHIFTR_ADD1S_Pos: u32 = 31;
pub const RTC_SHIFTR_ADD1S_Msk: u32 = 2147483648;
pub const RTC_SHIFTR_ADD1S: u32 = 2147483648;
pub const RTC_TSTR_PM_Pos: u32 = 22;
pub const RTC_TSTR_PM_Msk: u32 = 4194304;
pub const RTC_TSTR_PM: u32 = 4194304;
pub const RTC_TSTR_HT_Pos: u32 = 20;
pub const RTC_TSTR_HT_Msk: u32 = 3145728;
pub const RTC_TSTR_HT: u32 = 3145728;
pub const RTC_TSTR_HT_0: u32 = 1048576;
pub const RTC_TSTR_HT_1: u32 = 2097152;
pub const RTC_TSTR_HU_Pos: u32 = 16;
pub const RTC_TSTR_HU_Msk: u32 = 983040;
pub const RTC_TSTR_HU: u32 = 983040;
pub const RTC_TSTR_HU_0: u32 = 65536;
pub const RTC_TSTR_HU_1: u32 = 131072;
pub const RTC_TSTR_HU_2: u32 = 262144;
pub const RTC_TSTR_HU_3: u32 = 524288;
pub const RTC_TSTR_MNT_Pos: u32 = 12;
pub const RTC_TSTR_MNT_Msk: u32 = 28672;
pub const RTC_TSTR_MNT: u32 = 28672;
pub const RTC_TSTR_MNT_0: u32 = 4096;
pub const RTC_TSTR_MNT_1: u32 = 8192;
pub const RTC_TSTR_MNT_2: u32 = 16384;
pub const RTC_TSTR_MNU_Pos: u32 = 8;
pub const RTC_TSTR_MNU_Msk: u32 = 3840;
pub const RTC_TSTR_MNU: u32 = 3840;
pub const RTC_TSTR_MNU_0: u32 = 256;
pub const RTC_TSTR_MNU_1: u32 = 512;
pub const RTC_TSTR_MNU_2: u32 = 1024;
pub const RTC_TSTR_MNU_3: u32 = 2048;
pub const RTC_TSTR_ST_Pos: u32 = 4;
pub const RTC_TSTR_ST_Msk: u32 = 112;
pub const RTC_TSTR_ST: u32 = 112;
pub const RTC_TSTR_ST_0: u32 = 16;
pub const RTC_TSTR_ST_1: u32 = 32;
pub const RTC_TSTR_ST_2: u32 = 64;
pub const RTC_TSTR_SU_Pos: u32 = 0;
pub const RTC_TSTR_SU_Msk: u32 = 15;
pub const RTC_TSTR_SU: u32 = 15;
pub const RTC_TSTR_SU_0: u32 = 1;
pub const RTC_TSTR_SU_1: u32 = 2;
pub const RTC_TSTR_SU_2: u32 = 4;
pub const RTC_TSTR_SU_3: u32 = 8;
pub const RTC_TSDR_WDU_Pos: u32 = 13;
pub const RTC_TSDR_WDU_Msk: u32 = 57344;
pub const RTC_TSDR_WDU: u32 = 57344;
pub const RTC_TSDR_WDU_0: u32 = 8192;
pub const RTC_TSDR_WDU_1: u32 = 16384;
pub const RTC_TSDR_WDU_2: u32 = 32768;
pub const RTC_TSDR_MT_Pos: u32 = 12;
pub const RTC_TSDR_MT_Msk: u32 = 4096;
pub const RTC_TSDR_MT: u32 = 4096;
pub const RTC_TSDR_MU_Pos: u32 = 8;
pub const RTC_TSDR_MU_Msk: u32 = 3840;
pub const RTC_TSDR_MU: u32 = 3840;
pub const RTC_TSDR_MU_0: u32 = 256;
pub const RTC_TSDR_MU_1: u32 = 512;
pub const RTC_TSDR_MU_2: u32 = 1024;
pub const RTC_TSDR_MU_3: u32 = 2048;
pub const RTC_TSDR_DT_Pos: u32 = 4;
pub const RTC_TSDR_DT_Msk: u32 = 48;
pub const RTC_TSDR_DT: u32 = 48;
pub const RTC_TSDR_DT_0: u32 = 16;
pub const RTC_TSDR_DT_1: u32 = 32;
pub const RTC_TSDR_DU_Pos: u32 = 0;
pub const RTC_TSDR_DU_Msk: u32 = 15;
pub const RTC_TSDR_DU: u32 = 15;
pub const RTC_TSDR_DU_0: u32 = 1;
pub const RTC_TSDR_DU_1: u32 = 2;
pub const RTC_TSDR_DU_2: u32 = 4;
pub const RTC_TSDR_DU_3: u32 = 8;
pub const RTC_TSSSR_SS_Pos: u32 = 0;
pub const RTC_TSSSR_SS_Msk: u32 = 65535;
pub const RTC_TSSSR_SS: u32 = 65535;
pub const RTC_CALR_CALP_Pos: u32 = 15;
pub const RTC_CALR_CALP_Msk: u32 = 32768;
pub const RTC_CALR_CALP: u32 = 32768;
pub const RTC_CALR_CALW8_Pos: u32 = 14;
pub const RTC_CALR_CALW8_Msk: u32 = 16384;
pub const RTC_CALR_CALW8: u32 = 16384;
pub const RTC_CALR_CALW16_Pos: u32 = 13;
pub const RTC_CALR_CALW16_Msk: u32 = 8192;
pub const RTC_CALR_CALW16: u32 = 8192;
pub const RTC_CALR_CALM_Pos: u32 = 0;
pub const RTC_CALR_CALM_Msk: u32 = 511;
pub const RTC_CALR_CALM: u32 = 511;
pub const RTC_CALR_CALM_0: u32 = 1;
pub const RTC_CALR_CALM_1: u32 = 2;
pub const RTC_CALR_CALM_2: u32 = 4;
pub const RTC_CALR_CALM_3: u32 = 8;
pub const RTC_CALR_CALM_4: u32 = 16;
pub const RTC_CALR_CALM_5: u32 = 32;
pub const RTC_CALR_CALM_6: u32 = 64;
pub const RTC_CALR_CALM_7: u32 = 128;
pub const RTC_CALR_CALM_8: u32 = 256;
pub const RTC_TAFCR_PC15MODE_Pos: u32 = 23;
pub const RTC_TAFCR_PC15MODE_Msk: u32 = 8388608;
pub const RTC_TAFCR_PC15MODE: u32 = 8388608;
pub const RTC_TAFCR_PC15VALUE_Pos: u32 = 22;
pub const RTC_TAFCR_PC15VALUE_Msk: u32 = 4194304;
pub const RTC_TAFCR_PC15VALUE: u32 = 4194304;
pub const RTC_TAFCR_PC14MODE_Pos: u32 = 21;
pub const RTC_TAFCR_PC14MODE_Msk: u32 = 2097152;
pub const RTC_TAFCR_PC14MODE: u32 = 2097152;
pub const RTC_TAFCR_PC14VALUE_Pos: u32 = 20;
pub const RTC_TAFCR_PC14VALUE_Msk: u32 = 1048576;
pub const RTC_TAFCR_PC14VALUE: u32 = 1048576;
pub const RTC_TAFCR_PC13MODE_Pos: u32 = 19;
pub const RTC_TAFCR_PC13MODE_Msk: u32 = 524288;
pub const RTC_TAFCR_PC13MODE: u32 = 524288;
pub const RTC_TAFCR_PC13VALUE_Pos: u32 = 18;
pub const RTC_TAFCR_PC13VALUE_Msk: u32 = 262144;
pub const RTC_TAFCR_PC13VALUE: u32 = 262144;
pub const RTC_TAFCR_TAMPPUDIS_Pos: u32 = 15;
pub const RTC_TAFCR_TAMPPUDIS_Msk: u32 = 32768;
pub const RTC_TAFCR_TAMPPUDIS: u32 = 32768;
pub const RTC_TAFCR_TAMPPRCH_Pos: u32 = 13;
pub const RTC_TAFCR_TAMPPRCH_Msk: u32 = 24576;
pub const RTC_TAFCR_TAMPPRCH: u32 = 24576;
pub const RTC_TAFCR_TAMPPRCH_0: u32 = 8192;
pub const RTC_TAFCR_TAMPPRCH_1: u32 = 16384;
pub const RTC_TAFCR_TAMPFLT_Pos: u32 = 11;
pub const RTC_TAFCR_TAMPFLT_Msk: u32 = 6144;
pub const RTC_TAFCR_TAMPFLT: u32 = 6144;
pub const RTC_TAFCR_TAMPFLT_0: u32 = 2048;
pub const RTC_TAFCR_TAMPFLT_1: u32 = 4096;
pub const RTC_TAFCR_TAMPFREQ_Pos: u32 = 8;
pub const RTC_TAFCR_TAMPFREQ_Msk: u32 = 1792;
pub const RTC_TAFCR_TAMPFREQ: u32 = 1792;
pub const RTC_TAFCR_TAMPFREQ_0: u32 = 256;
pub const RTC_TAFCR_TAMPFREQ_1: u32 = 512;
pub const RTC_TAFCR_TAMPFREQ_2: u32 = 1024;
pub const RTC_TAFCR_TAMPTS_Pos: u32 = 7;
pub const RTC_TAFCR_TAMPTS_Msk: u32 = 128;
pub const RTC_TAFCR_TAMPTS: u32 = 128;
pub const RTC_TAFCR_TAMP3TRG_Pos: u32 = 6;
pub const RTC_TAFCR_TAMP3TRG_Msk: u32 = 64;
pub const RTC_TAFCR_TAMP3TRG: u32 = 64;
pub const RTC_TAFCR_TAMP3E_Pos: u32 = 5;
pub const RTC_TAFCR_TAMP3E_Msk: u32 = 32;
pub const RTC_TAFCR_TAMP3E: u32 = 32;
pub const RTC_TAFCR_TAMP2TRG_Pos: u32 = 4;
pub const RTC_TAFCR_TAMP2TRG_Msk: u32 = 16;
pub const RTC_TAFCR_TAMP2TRG: u32 = 16;
pub const RTC_TAFCR_TAMP2E_Pos: u32 = 3;
pub const RTC_TAFCR_TAMP2E_Msk: u32 = 8;
pub const RTC_TAFCR_TAMP2E: u32 = 8;
pub const RTC_TAFCR_TAMPIE_Pos: u32 = 2;
pub const RTC_TAFCR_TAMPIE_Msk: u32 = 4;
pub const RTC_TAFCR_TAMPIE: u32 = 4;
pub const RTC_TAFCR_TAMP1TRG_Pos: u32 = 1;
pub const RTC_TAFCR_TAMP1TRG_Msk: u32 = 2;
pub const RTC_TAFCR_TAMP1TRG: u32 = 2;
pub const RTC_TAFCR_TAMP1E_Pos: u32 = 0;
pub const RTC_TAFCR_TAMP1E_Msk: u32 = 1;
pub const RTC_TAFCR_TAMP1E: u32 = 1;
pub const RTC_TAFCR_ALARMOUTTYPE: u32 = 262144;
pub const RTC_ALRMASSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMASSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMASSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMASSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMASSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMASSR_SS_Pos: u32 = 0;
pub const RTC_ALRMASSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMASSR_SS: u32 = 32767;
pub const RTC_ALRMBSSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMBSSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMBSSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMBSSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMBSSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMBSSR_SS_Pos: u32 = 0;
pub const RTC_ALRMBSSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMBSSR_SS: u32 = 32767;
pub const RTC_BKP0R_Pos: u32 = 0;
pub const RTC_BKP0R_Msk: u32 = 4294967295;
pub const RTC_BKP0R: u32 = 4294967295;
pub const RTC_BKP1R_Pos: u32 = 0;
pub const RTC_BKP1R_Msk: u32 = 4294967295;
pub const RTC_BKP1R: u32 = 4294967295;
pub const RTC_BKP2R_Pos: u32 = 0;
pub const RTC_BKP2R_Msk: u32 = 4294967295;
pub const RTC_BKP2R: u32 = 4294967295;
pub const RTC_BKP3R_Pos: u32 = 0;
pub const RTC_BKP3R_Msk: u32 = 4294967295;
pub const RTC_BKP3R: u32 = 4294967295;
pub const RTC_BKP4R_Pos: u32 = 0;
pub const RTC_BKP4R_Msk: u32 = 4294967295;
pub const RTC_BKP4R: u32 = 4294967295;
pub const RTC_BKP5R_Pos: u32 = 0;
pub const RTC_BKP5R_Msk: u32 = 4294967295;
pub const RTC_BKP5R: u32 = 4294967295;
pub const RTC_BKP6R_Pos: u32 = 0;
pub const RTC_BKP6R_Msk: u32 = 4294967295;
pub const RTC_BKP6R: u32 = 4294967295;
pub const RTC_BKP7R_Pos: u32 = 0;
pub const RTC_BKP7R_Msk: u32 = 4294967295;
pub const RTC_BKP7R: u32 = 4294967295;
pub const RTC_BKP8R_Pos: u32 = 0;
pub const RTC_BKP8R_Msk: u32 = 4294967295;
pub const RTC_BKP8R: u32 = 4294967295;
pub const RTC_BKP9R_Pos: u32 = 0;
pub const RTC_BKP9R_Msk: u32 = 4294967295;
pub const RTC_BKP9R: u32 = 4294967295;
pub const RTC_BKP10R_Pos: u32 = 0;
pub const RTC_BKP10R_Msk: u32 = 4294967295;
pub const RTC_BKP10R: u32 = 4294967295;
pub const RTC_BKP11R_Pos: u32 = 0;
pub const RTC_BKP11R_Msk: u32 = 4294967295;
pub const RTC_BKP11R: u32 = 4294967295;
pub const RTC_BKP12R_Pos: u32 = 0;
pub const RTC_BKP12R_Msk: u32 = 4294967295;
pub const RTC_BKP12R: u32 = 4294967295;
pub const RTC_BKP13R_Pos: u32 = 0;
pub const RTC_BKP13R_Msk: u32 = 4294967295;
pub const RTC_BKP13R: u32 = 4294967295;
pub const RTC_BKP14R_Pos: u32 = 0;
pub const RTC_BKP14R_Msk: u32 = 4294967295;
pub const RTC_BKP14R: u32 = 4294967295;
pub const RTC_BKP15R_Pos: u32 = 0;
pub const RTC_BKP15R_Msk: u32 = 4294967295;
pub const RTC_BKP15R: u32 = 4294967295;
pub const RTC_BKP_NUMBER: u32 = 16;
pub const SPI_CR1_CPHA_Pos: u32 = 0;
pub const SPI_CR1_CPHA_Msk: u32 = 1;
pub const SPI_CR1_CPHA: u32 = 1;
pub const SPI_CR1_CPOL_Pos: u32 = 1;
pub const SPI_CR1_CPOL_Msk: u32 = 2;
pub const SPI_CR1_CPOL: u32 = 2;
pub const SPI_CR1_MSTR_Pos: u32 = 2;
pub const SPI_CR1_MSTR_Msk: u32 = 4;
pub const SPI_CR1_MSTR: u32 = 4;
pub const SPI_CR1_BR_Pos: u32 = 3;
pub const SPI_CR1_BR_Msk: u32 = 56;
pub const SPI_CR1_BR: u32 = 56;
pub const SPI_CR1_BR_0: u32 = 8;
pub const SPI_CR1_BR_1: u32 = 16;
pub const SPI_CR1_BR_2: u32 = 32;
pub const SPI_CR1_SPE_Pos: u32 = 6;
pub const SPI_CR1_SPE_Msk: u32 = 64;
pub const SPI_CR1_SPE: u32 = 64;
pub const SPI_CR1_LSBFIRST_Pos: u32 = 7;
pub const SPI_CR1_LSBFIRST_Msk: u32 = 128;
pub const SPI_CR1_LSBFIRST: u32 = 128;
pub const SPI_CR1_SSI_Pos: u32 = 8;
pub const SPI_CR1_SSI_Msk: u32 = 256;
pub const SPI_CR1_SSI: u32 = 256;
pub const SPI_CR1_SSM_Pos: u32 = 9;
pub const SPI_CR1_SSM_Msk: u32 = 512;
pub const SPI_CR1_SSM: u32 = 512;
pub const SPI_CR1_RXONLY_Pos: u32 = 10;
pub const SPI_CR1_RXONLY_Msk: u32 = 1024;
pub const SPI_CR1_RXONLY: u32 = 1024;
pub const SPI_CR1_CRCL_Pos: u32 = 11;
pub const SPI_CR1_CRCL_Msk: u32 = 2048;
pub const SPI_CR1_CRCL: u32 = 2048;
pub const SPI_CR1_CRCNEXT_Pos: u32 = 12;
pub const SPI_CR1_CRCNEXT_Msk: u32 = 4096;
pub const SPI_CR1_CRCNEXT: u32 = 4096;
pub const SPI_CR1_CRCEN_Pos: u32 = 13;
pub const SPI_CR1_CRCEN_Msk: u32 = 8192;
pub const SPI_CR1_CRCEN: u32 = 8192;
pub const SPI_CR1_BIDIOE_Pos: u32 = 14;
pub const SPI_CR1_BIDIOE_Msk: u32 = 16384;
pub const SPI_CR1_BIDIOE: u32 = 16384;
pub const SPI_CR1_BIDIMODE_Pos: u32 = 15;
pub const SPI_CR1_BIDIMODE_Msk: u32 = 32768;
pub const SPI_CR1_BIDIMODE: u32 = 32768;
pub const SPI_CR2_RXDMAEN_Pos: u32 = 0;
pub const SPI_CR2_RXDMAEN_Msk: u32 = 1;
pub const SPI_CR2_RXDMAEN: u32 = 1;
pub const SPI_CR2_TXDMAEN_Pos: u32 = 1;
pub const SPI_CR2_TXDMAEN_Msk: u32 = 2;
pub const SPI_CR2_TXDMAEN: u32 = 2;
pub const SPI_CR2_SSOE_Pos: u32 = 2;
pub const SPI_CR2_SSOE_Msk: u32 = 4;
pub const SPI_CR2_SSOE: u32 = 4;
pub const SPI_CR2_NSSP_Pos: u32 = 3;
pub const SPI_CR2_NSSP_Msk: u32 = 8;
pub const SPI_CR2_NSSP: u32 = 8;
pub const SPI_CR2_FRF_Pos: u32 = 4;
pub const SPI_CR2_FRF_Msk: u32 = 16;
pub const SPI_CR2_FRF: u32 = 16;
pub const SPI_CR2_ERRIE_Pos: u32 = 5;
pub const SPI_CR2_ERRIE_Msk: u32 = 32;
pub const SPI_CR2_ERRIE: u32 = 32;
pub const SPI_CR2_RXNEIE_Pos: u32 = 6;
pub const SPI_CR2_RXNEIE_Msk: u32 = 64;
pub const SPI_CR2_RXNEIE: u32 = 64;
pub const SPI_CR2_TXEIE_Pos: u32 = 7;
pub const SPI_CR2_TXEIE_Msk: u32 = 128;
pub const SPI_CR2_TXEIE: u32 = 128;
pub const SPI_CR2_DS_Pos: u32 = 8;
pub const SPI_CR2_DS_Msk: u32 = 3840;
pub const SPI_CR2_DS: u32 = 3840;
pub const SPI_CR2_DS_0: u32 = 256;
pub const SPI_CR2_DS_1: u32 = 512;
pub const SPI_CR2_DS_2: u32 = 1024;
pub const SPI_CR2_DS_3: u32 = 2048;
pub const SPI_CR2_FRXTH_Pos: u32 = 12;
pub const SPI_CR2_FRXTH_Msk: u32 = 4096;
pub const SPI_CR2_FRXTH: u32 = 4096;
pub const SPI_CR2_LDMARX_Pos: u32 = 13;
pub const SPI_CR2_LDMARX_Msk: u32 = 8192;
pub const SPI_CR2_LDMARX: u32 = 8192;
pub const SPI_CR2_LDMATX_Pos: u32 = 14;
pub const SPI_CR2_LDMATX_Msk: u32 = 16384;
pub const SPI_CR2_LDMATX: u32 = 16384;
pub const SPI_SR_RXNE_Pos: u32 = 0;
pub const SPI_SR_RXNE_Msk: u32 = 1;
pub const SPI_SR_RXNE: u32 = 1;
pub const SPI_SR_TXE_Pos: u32 = 1;
pub const SPI_SR_TXE_Msk: u32 = 2;
pub const SPI_SR_TXE: u32 = 2;
pub const SPI_SR_CHSIDE_Pos: u32 = 2;
pub const SPI_SR_CHSIDE_Msk: u32 = 4;
pub const SPI_SR_CHSIDE: u32 = 4;
pub const SPI_SR_UDR_Pos: u32 = 3;
pub const SPI_SR_UDR_Msk: u32 = 8;
pub const SPI_SR_UDR: u32 = 8;
pub const SPI_SR_CRCERR_Pos: u32 = 4;
pub const SPI_SR_CRCERR_Msk: u32 = 16;
pub const SPI_SR_CRCERR: u32 = 16;
pub const SPI_SR_MODF_Pos: u32 = 5;
pub const SPI_SR_MODF_Msk: u32 = 32;
pub const SPI_SR_MODF: u32 = 32;
pub const SPI_SR_OVR_Pos: u32 = 6;
pub const SPI_SR_OVR_Msk: u32 = 64;
pub const SPI_SR_OVR: u32 = 64;
pub const SPI_SR_BSY_Pos: u32 = 7;
pub const SPI_SR_BSY_Msk: u32 = 128;
pub const SPI_SR_BSY: u32 = 128;
pub const SPI_SR_FRE_Pos: u32 = 8;
pub const SPI_SR_FRE_Msk: u32 = 256;
pub const SPI_SR_FRE: u32 = 256;
pub const SPI_SR_FRLVL_Pos: u32 = 9;
pub const SPI_SR_FRLVL_Msk: u32 = 1536;
pub const SPI_SR_FRLVL: u32 = 1536;
pub const SPI_SR_FRLVL_0: u32 = 512;
pub const SPI_SR_FRLVL_1: u32 = 1024;
pub const SPI_SR_FTLVL_Pos: u32 = 11;
pub const SPI_SR_FTLVL_Msk: u32 = 6144;
pub const SPI_SR_FTLVL: u32 = 6144;
pub const SPI_SR_FTLVL_0: u32 = 2048;
pub const SPI_SR_FTLVL_1: u32 = 4096;
pub const SPI_DR_DR_Pos: u32 = 0;
pub const SPI_DR_DR_Msk: u32 = 65535;
pub const SPI_DR_DR: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY_Pos: u32 = 0;
pub const SPI_CRCPR_CRCPOLY_Msk: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY: u32 = 65535;
pub const SPI_RXCRCR_RXCRC_Pos: u32 = 0;
pub const SPI_RXCRCR_RXCRC_Msk: u32 = 65535;
pub const SPI_RXCRCR_RXCRC: u32 = 65535;
pub const SPI_TXCRCR_TXCRC_Pos: u32 = 0;
pub const SPI_TXCRCR_TXCRC_Msk: u32 = 65535;
pub const SPI_TXCRCR_TXCRC: u32 = 65535;
pub const SPI_I2SCFGR_CHLEN_Pos: u32 = 0;
pub const SPI_I2SCFGR_CHLEN_Msk: u32 = 1;
pub const SPI_I2SCFGR_CHLEN: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Pos: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Msk: u32 = 6;
pub const SPI_I2SCFGR_DATLEN: u32 = 6;
pub const SPI_I2SCFGR_DATLEN_0: u32 = 2;
pub const SPI_I2SCFGR_DATLEN_1: u32 = 4;
pub const SPI_I2SCFGR_CKPOL_Pos: u32 = 3;
pub const SPI_I2SCFGR_CKPOL_Msk: u32 = 8;
pub const SPI_I2SCFGR_CKPOL: u32 = 8;
pub const SPI_I2SCFGR_I2SSTD_Pos: u32 = 4;
pub const SPI_I2SCFGR_I2SSTD_Msk: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD_0: u32 = 16;
pub const SPI_I2SCFGR_I2SSTD_1: u32 = 32;
pub const SPI_I2SCFGR_PCMSYNC_Pos: u32 = 7;
pub const SPI_I2SCFGR_PCMSYNC_Msk: u32 = 128;
pub const SPI_I2SCFGR_PCMSYNC: u32 = 128;
pub const SPI_I2SCFGR_I2SCFG_Pos: u32 = 8;
pub const SPI_I2SCFGR_I2SCFG_Msk: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG_0: u32 = 256;
pub const SPI_I2SCFGR_I2SCFG_1: u32 = 512;
pub const SPI_I2SCFGR_I2SE_Pos: u32 = 10;
pub const SPI_I2SCFGR_I2SE_Msk: u32 = 1024;
pub const SPI_I2SCFGR_I2SE: u32 = 1024;
pub const SPI_I2SCFGR_I2SMOD_Pos: u32 = 11;
pub const SPI_I2SCFGR_I2SMOD_Msk: u32 = 2048;
pub const SPI_I2SCFGR_I2SMOD: u32 = 2048;
pub const SPI_I2SPR_I2SDIV_Pos: u32 = 0;
pub const SPI_I2SPR_I2SDIV_Msk: u32 = 255;
pub const SPI_I2SPR_I2SDIV: u32 = 255;
pub const SPI_I2SPR_ODD_Pos: u32 = 8;
pub const SPI_I2SPR_ODD_Msk: u32 = 256;
pub const SPI_I2SPR_ODD: u32 = 256;
pub const SPI_I2SPR_MCKOE_Pos: u32 = 9;
pub const SPI_I2SPR_MCKOE_Msk: u32 = 512;
pub const SPI_I2SPR_MCKOE: u32 = 512;
pub const SYSCFG_CFGR1_MEM_MODE_Pos: u32 = 0;
pub const SYSCFG_CFGR1_MEM_MODE_Msk: u32 = 3;
pub const SYSCFG_CFGR1_MEM_MODE: u32 = 3;
pub const SYSCFG_CFGR1_MEM_MODE_0: u32 = 1;
pub const SYSCFG_CFGR1_MEM_MODE_1: u32 = 2;
pub const SYSCFG_CFGR1_USB_IT_RMP_Pos: u32 = 5;
pub const SYSCFG_CFGR1_USB_IT_RMP_Msk: u32 = 32;
pub const SYSCFG_CFGR1_USB_IT_RMP: u32 = 32;
pub const SYSCFG_CFGR1_TIM1_ITR3_RMP_Pos: u32 = 6;
pub const SYSCFG_CFGR1_TIM1_ITR3_RMP_Msk: u32 = 64;
pub const SYSCFG_CFGR1_TIM1_ITR3_RMP: u32 = 64;
pub const SYSCFG_CFGR1_DAC1_TRIG1_RMP_Pos: u32 = 7;
pub const SYSCFG_CFGR1_DAC1_TRIG1_RMP_Msk: u32 = 128;
pub const SYSCFG_CFGR1_DAC1_TRIG1_RMP: u32 = 128;
pub const SYSCFG_CFGR1_DMA_RMP_Pos: u32 = 8;
pub const SYSCFG_CFGR1_DMA_RMP_Msk: u32 = 30976;
pub const SYSCFG_CFGR1_DMA_RMP: u32 = 30976;
pub const SYSCFG_CFGR1_ADC24_DMA_RMP_Pos: u32 = 8;
pub const SYSCFG_CFGR1_ADC24_DMA_RMP_Msk: u32 = 256;
pub const SYSCFG_CFGR1_ADC24_DMA_RMP: u32 = 256;
pub const SYSCFG_CFGR1_TIM16_DMA_RMP_Pos: u32 = 11;
pub const SYSCFG_CFGR1_TIM16_DMA_RMP_Msk: u32 = 2048;
pub const SYSCFG_CFGR1_TIM16_DMA_RMP: u32 = 2048;
pub const SYSCFG_CFGR1_TIM17_DMA_RMP_Pos: u32 = 12;
pub const SYSCFG_CFGR1_TIM17_DMA_RMP_Msk: u32 = 4096;
pub const SYSCFG_CFGR1_TIM17_DMA_RMP: u32 = 4096;
pub const SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Pos: u32 = 13;
pub const SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Msk: u32 = 8192;
pub const SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP: u32 = 8192;
pub const SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Pos: u32 = 14;
pub const SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Msk: u32 = 16384;
pub const SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP: u32 = 16384;
pub const SYSCFG_CFGR1_I2C_PB6_FMP_Pos: u32 = 16;
pub const SYSCFG_CFGR1_I2C_PB6_FMP_Msk: u32 = 65536;
pub const SYSCFG_CFGR1_I2C_PB6_FMP: u32 = 65536;
pub const SYSCFG_CFGR1_I2C_PB7_FMP_Pos: u32 = 17;
pub const SYSCFG_CFGR1_I2C_PB7_FMP_Msk: u32 = 131072;
pub const SYSCFG_CFGR1_I2C_PB7_FMP: u32 = 131072;
pub const SYSCFG_CFGR1_I2C_PB8_FMP_Pos: u32 = 18;
pub const SYSCFG_CFGR1_I2C_PB8_FMP_Msk: u32 = 262144;
pub const SYSCFG_CFGR1_I2C_PB8_FMP: u32 = 262144;
pub const SYSCFG_CFGR1_I2C_PB9_FMP_Pos: u32 = 19;
pub const SYSCFG_CFGR1_I2C_PB9_FMP_Msk: u32 = 524288;
pub const SYSCFG_CFGR1_I2C_PB9_FMP: u32 = 524288;
pub const SYSCFG_CFGR1_I2C1_FMP_Pos: u32 = 20;
pub const SYSCFG_CFGR1_I2C1_FMP_Msk: u32 = 1048576;
pub const SYSCFG_CFGR1_I2C1_FMP: u32 = 1048576;
pub const SYSCFG_CFGR1_I2C2_FMP_Pos: u32 = 21;
pub const SYSCFG_CFGR1_I2C2_FMP_Msk: u32 = 2097152;
pub const SYSCFG_CFGR1_I2C2_FMP: u32 = 2097152;
pub const SYSCFG_CFGR1_ENCODER_MODE_Pos: u32 = 22;
pub const SYSCFG_CFGR1_ENCODER_MODE_Msk: u32 = 12582912;
pub const SYSCFG_CFGR1_ENCODER_MODE: u32 = 12582912;
pub const SYSCFG_CFGR1_ENCODER_MODE_0: u32 = 4194304;
pub const SYSCFG_CFGR1_ENCODER_MODE_1: u32 = 8388608;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM2_Pos: u32 = 22;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM2_Msk: u32 = 4194304;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM2: u32 = 4194304;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM3_Pos: u32 = 23;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM3_Msk: u32 = 8388608;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM3: u32 = 8388608;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM4_Pos: u32 = 22;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM4_Msk: u32 = 12582912;
pub const SYSCFG_CFGR1_ENCODER_MODE_TIM4: u32 = 12582912;
pub const SYSCFG_CFGR1_FPU_IE_Pos: u32 = 26;
pub const SYSCFG_CFGR1_FPU_IE_Msk: u32 = 4227858432;
pub const SYSCFG_CFGR1_FPU_IE: u32 = 4227858432;
pub const SYSCFG_CFGR1_FPU_IE_0: u32 = 67108864;
pub const SYSCFG_CFGR1_FPU_IE_1: u32 = 134217728;
pub const SYSCFG_CFGR1_FPU_IE_2: u32 = 268435456;
pub const SYSCFG_CFGR1_FPU_IE_3: u32 = 536870912;
pub const SYSCFG_CFGR1_FPU_IE_4: u32 = 1073741824;
pub const SYSCFG_CFGR1_FPU_IE_5: u32 = 2147483648;
pub const SYSCFG_RCR_PAGE0_Pos: u32 = 0;
pub const SYSCFG_RCR_PAGE0_Msk: u32 = 1;
pub const SYSCFG_RCR_PAGE0: u32 = 1;
pub const SYSCFG_RCR_PAGE1_Pos: u32 = 1;
pub const SYSCFG_RCR_PAGE1_Msk: u32 = 2;
pub const SYSCFG_RCR_PAGE1: u32 = 2;
pub const SYSCFG_RCR_PAGE2_Pos: u32 = 2;
pub const SYSCFG_RCR_PAGE2_Msk: u32 = 4;
pub const SYSCFG_RCR_PAGE2: u32 = 4;
pub const SYSCFG_RCR_PAGE3_Pos: u32 = 3;
pub const SYSCFG_RCR_PAGE3_Msk: u32 = 8;
pub const SYSCFG_RCR_PAGE3: u32 = 8;
pub const SYSCFG_RCR_PAGE4_Pos: u32 = 4;
pub const SYSCFG_RCR_PAGE4_Msk: u32 = 16;
pub const SYSCFG_RCR_PAGE4: u32 = 16;
pub const SYSCFG_RCR_PAGE5_Pos: u32 = 5;
pub const SYSCFG_RCR_PAGE5_Msk: u32 = 32;
pub const SYSCFG_RCR_PAGE5: u32 = 32;
pub const SYSCFG_RCR_PAGE6_Pos: u32 = 6;
pub const SYSCFG_RCR_PAGE6_Msk: u32 = 64;
pub const SYSCFG_RCR_PAGE6: u32 = 64;
pub const SYSCFG_RCR_PAGE7_Pos: u32 = 7;
pub const SYSCFG_RCR_PAGE7_Msk: u32 = 128;
pub const SYSCFG_RCR_PAGE7: u32 = 128;
pub const SYSCFG_EXTICR1_EXTI0_Pos: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_Msk: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI0: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI1_Pos: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI1_Msk: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI1: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI2_Pos: u32 = 8;
pub const SYSCFG_EXTICR1_EXTI2_Msk: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI2: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI3_Pos: u32 = 12;
pub const SYSCFG_EXTICR1_EXTI3_Msk: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI3: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI0_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_PB: u32 = 1;
pub const SYSCFG_EXTICR1_EXTI0_PC: u32 = 2;
pub const SYSCFG_EXTICR1_EXTI0_PD: u32 = 3;
pub const SYSCFG_EXTICR1_EXTI0_PE: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI0_PF: u32 = 5;
pub const SYSCFG_EXTICR1_EXTI1_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI1_PB: u32 = 16;
pub const SYSCFG_EXTICR1_EXTI1_PC: u32 = 32;
pub const SYSCFG_EXTICR1_EXTI1_PD: u32 = 48;
pub const SYSCFG_EXTICR1_EXTI1_PE: u32 = 64;
pub const SYSCFG_EXTICR1_EXTI1_PF: u32 = 80;
pub const SYSCFG_EXTICR1_EXTI2_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI2_PB: u32 = 256;
pub const SYSCFG_EXTICR1_EXTI2_PC: u32 = 512;
pub const SYSCFG_EXTICR1_EXTI2_PD: u32 = 768;
pub const SYSCFG_EXTICR1_EXTI2_PE: u32 = 1024;
pub const SYSCFG_EXTICR1_EXTI2_PF: u32 = 1280;
pub const SYSCFG_EXTICR1_EXTI3_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI3_PB: u32 = 4096;
pub const SYSCFG_EXTICR1_EXTI3_PC: u32 = 8192;
pub const SYSCFG_EXTICR1_EXTI3_PD: u32 = 12288;
pub const SYSCFG_EXTICR1_EXTI3_PE: u32 = 16384;
pub const SYSCFG_EXTICR2_EXTI4_Pos: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_Msk: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI4: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI5_Pos: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI5_Msk: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI5: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI6_Pos: u32 = 8;
pub const SYSCFG_EXTICR2_EXTI6_Msk: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI6: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI7_Pos: u32 = 12;
pub const SYSCFG_EXTICR2_EXTI7_Msk: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI7: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI4_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_PB: u32 = 1;
pub const SYSCFG_EXTICR2_EXTI4_PC: u32 = 2;
pub const SYSCFG_EXTICR2_EXTI4_PD: u32 = 3;
pub const SYSCFG_EXTICR2_EXTI4_PE: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI4_PF: u32 = 5;
pub const SYSCFG_EXTICR2_EXTI5_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI5_PB: u32 = 16;
pub const SYSCFG_EXTICR2_EXTI5_PC: u32 = 32;
pub const SYSCFG_EXTICR2_EXTI5_PD: u32 = 48;
pub const SYSCFG_EXTICR2_EXTI5_PE: u32 = 64;
pub const SYSCFG_EXTICR2_EXTI5_PF: u32 = 80;
pub const SYSCFG_EXTICR2_EXTI6_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI6_PB: u32 = 256;
pub const SYSCFG_EXTICR2_EXTI6_PC: u32 = 512;
pub const SYSCFG_EXTICR2_EXTI6_PD: u32 = 768;
pub const SYSCFG_EXTICR2_EXTI6_PE: u32 = 1024;
pub const SYSCFG_EXTICR2_EXTI6_PF: u32 = 1280;
pub const SYSCFG_EXTICR2_EXTI7_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI7_PB: u32 = 4096;
pub const SYSCFG_EXTICR2_EXTI7_PC: u32 = 8192;
pub const SYSCFG_EXTICR2_EXTI7_PD: u32 = 12288;
pub const SYSCFG_EXTICR2_EXTI7_PE: u32 = 16384;
pub const SYSCFG_EXTICR3_EXTI8_Pos: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_Msk: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI8: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI9_Pos: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_Msk: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI9: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI10_Pos: u32 = 8;
pub const SYSCFG_EXTICR3_EXTI10_Msk: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI10: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI11_Pos: u32 = 12;
pub const SYSCFG_EXTICR3_EXTI11_Msk: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI11: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI8_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_PB: u32 = 1;
pub const SYSCFG_EXTICR3_EXTI8_PC: u32 = 2;
pub const SYSCFG_EXTICR3_EXTI8_PD: u32 = 3;
pub const SYSCFG_EXTICR3_EXTI8_PE: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI9_PB: u32 = 16;
pub const SYSCFG_EXTICR3_EXTI9_PC: u32 = 32;
pub const SYSCFG_EXTICR3_EXTI9_PD: u32 = 48;
pub const SYSCFG_EXTICR3_EXTI9_PE: u32 = 64;
pub const SYSCFG_EXTICR3_EXTI9_PF: u32 = 80;
pub const SYSCFG_EXTICR3_EXTI10_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI10_PB: u32 = 256;
pub const SYSCFG_EXTICR3_EXTI10_PC: u32 = 512;
pub const SYSCFG_EXTICR3_EXTI10_PD: u32 = 768;
pub const SYSCFG_EXTICR3_EXTI10_PE: u32 = 1024;
pub const SYSCFG_EXTICR3_EXTI10_PF: u32 = 1280;
pub const SYSCFG_EXTICR3_EXTI11_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI11_PB: u32 = 4096;
pub const SYSCFG_EXTICR3_EXTI11_PC: u32 = 8192;
pub const SYSCFG_EXTICR3_EXTI11_PD: u32 = 12288;
pub const SYSCFG_EXTICR3_EXTI11_PE: u32 = 16384;
pub const SYSCFG_EXTICR4_EXTI12_Pos: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_Msk: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI12: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI13_Pos: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_Msk: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI13: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI14_Pos: u32 = 8;
pub const SYSCFG_EXTICR4_EXTI14_Msk: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI14: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI15_Pos: u32 = 12;
pub const SYSCFG_EXTICR4_EXTI15_Msk: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI15: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI12_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_PB: u32 = 1;
pub const SYSCFG_EXTICR4_EXTI12_PC: u32 = 2;
pub const SYSCFG_EXTICR4_EXTI12_PD: u32 = 3;
pub const SYSCFG_EXTICR4_EXTI12_PE: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI13_PB: u32 = 16;
pub const SYSCFG_EXTICR4_EXTI13_PC: u32 = 32;
pub const SYSCFG_EXTICR4_EXTI13_PD: u32 = 48;
pub const SYSCFG_EXTICR4_EXTI13_PE: u32 = 64;
pub const SYSCFG_EXTICR4_EXTI14_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI14_PB: u32 = 256;
pub const SYSCFG_EXTICR4_EXTI14_PC: u32 = 512;
pub const SYSCFG_EXTICR4_EXTI14_PD: u32 = 768;
pub const SYSCFG_EXTICR4_EXTI14_PE: u32 = 1024;
pub const SYSCFG_EXTICR4_EXTI15_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI15_PB: u32 = 4096;
pub const SYSCFG_EXTICR4_EXTI15_PC: u32 = 8192;
pub const SYSCFG_EXTICR4_EXTI15_PD: u32 = 12288;
pub const SYSCFG_EXTICR4_EXTI15_PE: u32 = 16384;
pub const SYSCFG_CFGR2_LOCKUP_LOCK_Pos: u32 = 0;
pub const SYSCFG_CFGR2_LOCKUP_LOCK_Msk: u32 = 1;
pub const SYSCFG_CFGR2_LOCKUP_LOCK: u32 = 1;
pub const SYSCFG_CFGR2_SRAM_PARITY_LOCK_Pos: u32 = 1;
pub const SYSCFG_CFGR2_SRAM_PARITY_LOCK_Msk: u32 = 2;
pub const SYSCFG_CFGR2_SRAM_PARITY_LOCK: u32 = 2;
pub const SYSCFG_CFGR2_PVD_LOCK_Pos: u32 = 2;
pub const SYSCFG_CFGR2_PVD_LOCK_Msk: u32 = 4;
pub const SYSCFG_CFGR2_PVD_LOCK: u32 = 4;
pub const SYSCFG_CFGR2_BYP_ADDR_PAR_Pos: u32 = 4;
pub const SYSCFG_CFGR2_BYP_ADDR_PAR_Msk: u32 = 16;
pub const SYSCFG_CFGR2_BYP_ADDR_PAR: u32 = 16;
pub const SYSCFG_CFGR2_SRAM_PE_Pos: u32 = 8;
pub const SYSCFG_CFGR2_SRAM_PE_Msk: u32 = 256;
pub const SYSCFG_CFGR2_SRAM_PE: u32 = 256;
pub const TIM_CR1_CEN_Pos: u32 = 0;
pub const TIM_CR1_CEN_Msk: u32 = 1;
pub const TIM_CR1_CEN: u32 = 1;
pub const TIM_CR1_UDIS_Pos: u32 = 1;
pub const TIM_CR1_UDIS_Msk: u32 = 2;
pub const TIM_CR1_UDIS: u32 = 2;
pub const TIM_CR1_URS_Pos: u32 = 2;
pub const TIM_CR1_URS_Msk: u32 = 4;
pub const TIM_CR1_URS: u32 = 4;
pub const TIM_CR1_OPM_Pos: u32 = 3;
pub const TIM_CR1_OPM_Msk: u32 = 8;
pub const TIM_CR1_OPM: u32 = 8;
pub const TIM_CR1_DIR_Pos: u32 = 4;
pub const TIM_CR1_DIR_Msk: u32 = 16;
pub const TIM_CR1_DIR: u32 = 16;
pub const TIM_CR1_CMS_Pos: u32 = 5;
pub const TIM_CR1_CMS_Msk: u32 = 96;
pub const TIM_CR1_CMS: u32 = 96;
pub const TIM_CR1_CMS_0: u32 = 32;
pub const TIM_CR1_CMS_1: u32 = 64;
pub const TIM_CR1_ARPE_Pos: u32 = 7;
pub const TIM_CR1_ARPE_Msk: u32 = 128;
pub const TIM_CR1_ARPE: u32 = 128;
pub const TIM_CR1_CKD_Pos: u32 = 8;
pub const TIM_CR1_CKD_Msk: u32 = 768;
pub const TIM_CR1_CKD: u32 = 768;
pub const TIM_CR1_CKD_0: u32 = 256;
pub const TIM_CR1_CKD_1: u32 = 512;
pub const TIM_CR1_UIFREMAP_Pos: u32 = 11;
pub const TIM_CR1_UIFREMAP_Msk: u32 = 2048;
pub const TIM_CR1_UIFREMAP: u32 = 2048;
pub const TIM_CR2_CCPC_Pos: u32 = 0;
pub const TIM_CR2_CCPC_Msk: u32 = 1;
pub const TIM_CR2_CCPC: u32 = 1;
pub const TIM_CR2_CCUS_Pos: u32 = 2;
pub const TIM_CR2_CCUS_Msk: u32 = 4;
pub const TIM_CR2_CCUS: u32 = 4;
pub const TIM_CR2_CCDS_Pos: u32 = 3;
pub const TIM_CR2_CCDS_Msk: u32 = 8;
pub const TIM_CR2_CCDS: u32 = 8;
pub const TIM_CR2_MMS_Pos: u32 = 4;
pub const TIM_CR2_MMS_Msk: u32 = 112;
pub const TIM_CR2_MMS: u32 = 112;
pub const TIM_CR2_MMS_0: u32 = 16;
pub const TIM_CR2_MMS_1: u32 = 32;
pub const TIM_CR2_MMS_2: u32 = 64;
pub const TIM_CR2_TI1S_Pos: u32 = 7;
pub const TIM_CR2_TI1S_Msk: u32 = 128;
pub const TIM_CR2_TI1S: u32 = 128;
pub const TIM_CR2_OIS1_Pos: u32 = 8;
pub const TIM_CR2_OIS1_Msk: u32 = 256;
pub const TIM_CR2_OIS1: u32 = 256;
pub const TIM_CR2_OIS1N_Pos: u32 = 9;
pub const TIM_CR2_OIS1N_Msk: u32 = 512;
pub const TIM_CR2_OIS1N: u32 = 512;
pub const TIM_CR2_OIS2_Pos: u32 = 10;
pub const TIM_CR2_OIS2_Msk: u32 = 1024;
pub const TIM_CR2_OIS2: u32 = 1024;
pub const TIM_CR2_OIS2N_Pos: u32 = 11;
pub const TIM_CR2_OIS2N_Msk: u32 = 2048;
pub const TIM_CR2_OIS2N: u32 = 2048;
pub const TIM_CR2_OIS3_Pos: u32 = 12;
pub const TIM_CR2_OIS3_Msk: u32 = 4096;
pub const TIM_CR2_OIS3: u32 = 4096;
pub const TIM_CR2_OIS3N_Pos: u32 = 13;
pub const TIM_CR2_OIS3N_Msk: u32 = 8192;
pub const TIM_CR2_OIS3N: u32 = 8192;
pub const TIM_CR2_OIS4_Pos: u32 = 14;
pub const TIM_CR2_OIS4_Msk: u32 = 16384;
pub const TIM_CR2_OIS4: u32 = 16384;
pub const TIM_CR2_OIS5_Pos: u32 = 16;
pub const TIM_CR2_OIS5_Msk: u32 = 65536;
pub const TIM_CR2_OIS5: u32 = 65536;
pub const TIM_CR2_OIS6_Pos: u32 = 18;
pub const TIM_CR2_OIS6_Msk: u32 = 262144;
pub const TIM_CR2_OIS6: u32 = 262144;
pub const TIM_CR2_MMS2_Pos: u32 = 20;
pub const TIM_CR2_MMS2_Msk: u32 = 15728640;
pub const TIM_CR2_MMS2: u32 = 15728640;
pub const TIM_CR2_MMS2_0: u32 = 1048576;
pub const TIM_CR2_MMS2_1: u32 = 2097152;
pub const TIM_CR2_MMS2_2: u32 = 4194304;
pub const TIM_CR2_MMS2_3: u32 = 8388608;
pub const TIM_SMCR_SMS_Pos: u32 = 0;
pub const TIM_SMCR_SMS_Msk: u32 = 65543;
pub const TIM_SMCR_SMS: u32 = 65543;
pub const TIM_SMCR_SMS_0: u32 = 1;
pub const TIM_SMCR_SMS_1: u32 = 2;
pub const TIM_SMCR_SMS_2: u32 = 4;
pub const TIM_SMCR_SMS_3: u32 = 65536;
pub const TIM_SMCR_OCCS_Pos: u32 = 3;
pub const TIM_SMCR_OCCS_Msk: u32 = 8;
pub const TIM_SMCR_OCCS: u32 = 8;
pub const TIM_SMCR_TS_Pos: u32 = 4;
pub const TIM_SMCR_TS_Msk: u32 = 112;
pub const TIM_SMCR_TS: u32 = 112;
pub const TIM_SMCR_TS_0: u32 = 16;
pub const TIM_SMCR_TS_1: u32 = 32;
pub const TIM_SMCR_TS_2: u32 = 64;
pub const TIM_SMCR_MSM_Pos: u32 = 7;
pub const TIM_SMCR_MSM_Msk: u32 = 128;
pub const TIM_SMCR_MSM: u32 = 128;
pub const TIM_SMCR_ETF_Pos: u32 = 8;
pub const TIM_SMCR_ETF_Msk: u32 = 3840;
pub const TIM_SMCR_ETF: u32 = 3840;
pub const TIM_SMCR_ETF_0: u32 = 256;
pub const TIM_SMCR_ETF_1: u32 = 512;
pub const TIM_SMCR_ETF_2: u32 = 1024;
pub const TIM_SMCR_ETF_3: u32 = 2048;
pub const TIM_SMCR_ETPS_Pos: u32 = 12;
pub const TIM_SMCR_ETPS_Msk: u32 = 12288;
pub const TIM_SMCR_ETPS: u32 = 12288;
pub const TIM_SMCR_ETPS_0: u32 = 4096;
pub const TIM_SMCR_ETPS_1: u32 = 8192;
pub const TIM_SMCR_ECE_Pos: u32 = 14;
pub const TIM_SMCR_ECE_Msk: u32 = 16384;
pub const TIM_SMCR_ECE: u32 = 16384;
pub const TIM_SMCR_ETP_Pos: u32 = 15;
pub const TIM_SMCR_ETP_Msk: u32 = 32768;
pub const TIM_SMCR_ETP: u32 = 32768;
pub const TIM_DIER_UIE_Pos: u32 = 0;
pub const TIM_DIER_UIE_Msk: u32 = 1;
pub const TIM_DIER_UIE: u32 = 1;
pub const TIM_DIER_CC1IE_Pos: u32 = 1;
pub const TIM_DIER_CC1IE_Msk: u32 = 2;
pub const TIM_DIER_CC1IE: u32 = 2;
pub const TIM_DIER_CC2IE_Pos: u32 = 2;
pub const TIM_DIER_CC2IE_Msk: u32 = 4;
pub const TIM_DIER_CC2IE: u32 = 4;
pub const TIM_DIER_CC3IE_Pos: u32 = 3;
pub const TIM_DIER_CC3IE_Msk: u32 = 8;
pub const TIM_DIER_CC3IE: u32 = 8;
pub const TIM_DIER_CC4IE_Pos: u32 = 4;
pub const TIM_DIER_CC4IE_Msk: u32 = 16;
pub const TIM_DIER_CC4IE: u32 = 16;
pub const TIM_DIER_COMIE_Pos: u32 = 5;
pub const TIM_DIER_COMIE_Msk: u32 = 32;
pub const TIM_DIER_COMIE: u32 = 32;
pub const TIM_DIER_TIE_Pos: u32 = 6;
pub const TIM_DIER_TIE_Msk: u32 = 64;
pub const TIM_DIER_TIE: u32 = 64;
pub const TIM_DIER_BIE_Pos: u32 = 7;
pub const TIM_DIER_BIE_Msk: u32 = 128;
pub const TIM_DIER_BIE: u32 = 128;
pub const TIM_DIER_UDE_Pos: u32 = 8;
pub const TIM_DIER_UDE_Msk: u32 = 256;
pub const TIM_DIER_UDE: u32 = 256;
pub const TIM_DIER_CC1DE_Pos: u32 = 9;
pub const TIM_DIER_CC1DE_Msk: u32 = 512;
pub const TIM_DIER_CC1DE: u32 = 512;
pub const TIM_DIER_CC2DE_Pos: u32 = 10;
pub const TIM_DIER_CC2DE_Msk: u32 = 1024;
pub const TIM_DIER_CC2DE: u32 = 1024;
pub const TIM_DIER_CC3DE_Pos: u32 = 11;
pub const TIM_DIER_CC3DE_Msk: u32 = 2048;
pub const TIM_DIER_CC3DE: u32 = 2048;
pub const TIM_DIER_CC4DE_Pos: u32 = 12;
pub const TIM_DIER_CC4DE_Msk: u32 = 4096;
pub const TIM_DIER_CC4DE: u32 = 4096;
pub const TIM_DIER_COMDE_Pos: u32 = 13;
pub const TIM_DIER_COMDE_Msk: u32 = 8192;
pub const TIM_DIER_COMDE: u32 = 8192;
pub const TIM_DIER_TDE_Pos: u32 = 14;
pub const TIM_DIER_TDE_Msk: u32 = 16384;
pub const TIM_DIER_TDE: u32 = 16384;
pub const TIM_SR_UIF_Pos: u32 = 0;
pub const TIM_SR_UIF_Msk: u32 = 1;
pub const TIM_SR_UIF: u32 = 1;
pub const TIM_SR_CC1IF_Pos: u32 = 1;
pub const TIM_SR_CC1IF_Msk: u32 = 2;
pub const TIM_SR_CC1IF: u32 = 2;
pub const TIM_SR_CC2IF_Pos: u32 = 2;
pub const TIM_SR_CC2IF_Msk: u32 = 4;
pub const TIM_SR_CC2IF: u32 = 4;
pub const TIM_SR_CC3IF_Pos: u32 = 3;
pub const TIM_SR_CC3IF_Msk: u32 = 8;
pub const TIM_SR_CC3IF: u32 = 8;
pub const TIM_SR_CC4IF_Pos: u32 = 4;
pub const TIM_SR_CC4IF_Msk: u32 = 16;
pub const TIM_SR_CC4IF: u32 = 16;
pub const TIM_SR_COMIF_Pos: u32 = 5;
pub const TIM_SR_COMIF_Msk: u32 = 32;
pub const TIM_SR_COMIF: u32 = 32;
pub const TIM_SR_TIF_Pos: u32 = 6;
pub const TIM_SR_TIF_Msk: u32 = 64;
pub const TIM_SR_TIF: u32 = 64;
pub const TIM_SR_BIF_Pos: u32 = 7;
pub const TIM_SR_BIF_Msk: u32 = 128;
pub const TIM_SR_BIF: u32 = 128;
pub const TIM_SR_B2IF_Pos: u32 = 8;
pub const TIM_SR_B2IF_Msk: u32 = 256;
pub const TIM_SR_B2IF: u32 = 256;
pub const TIM_SR_CC1OF_Pos: u32 = 9;
pub const TIM_SR_CC1OF_Msk: u32 = 512;
pub const TIM_SR_CC1OF: u32 = 512;
pub const TIM_SR_CC2OF_Pos: u32 = 10;
pub const TIM_SR_CC2OF_Msk: u32 = 1024;
pub const TIM_SR_CC2OF: u32 = 1024;
pub const TIM_SR_CC3OF_Pos: u32 = 11;
pub const TIM_SR_CC3OF_Msk: u32 = 2048;
pub const TIM_SR_CC3OF: u32 = 2048;
pub const TIM_SR_CC4OF_Pos: u32 = 12;
pub const TIM_SR_CC4OF_Msk: u32 = 4096;
pub const TIM_SR_CC4OF: u32 = 4096;
pub const TIM_SR_CC5IF_Pos: u32 = 16;
pub const TIM_SR_CC5IF_Msk: u32 = 65536;
pub const TIM_SR_CC5IF: u32 = 65536;
pub const TIM_SR_CC6IF_Pos: u32 = 17;
pub const TIM_SR_CC6IF_Msk: u32 = 131072;
pub const TIM_SR_CC6IF: u32 = 131072;
pub const TIM_EGR_UG_Pos: u32 = 0;
pub const TIM_EGR_UG_Msk: u32 = 1;
pub const TIM_EGR_UG: u32 = 1;
pub const TIM_EGR_CC1G_Pos: u32 = 1;
pub const TIM_EGR_CC1G_Msk: u32 = 2;
pub const TIM_EGR_CC1G: u32 = 2;
pub const TIM_EGR_CC2G_Pos: u32 = 2;
pub const TIM_EGR_CC2G_Msk: u32 = 4;
pub const TIM_EGR_CC2G: u32 = 4;
pub const TIM_EGR_CC3G_Pos: u32 = 3;
pub const TIM_EGR_CC3G_Msk: u32 = 8;
pub const TIM_EGR_CC3G: u32 = 8;
pub const TIM_EGR_CC4G_Pos: u32 = 4;
pub const TIM_EGR_CC4G_Msk: u32 = 16;
pub const TIM_EGR_CC4G: u32 = 16;
pub const TIM_EGR_COMG_Pos: u32 = 5;
pub const TIM_EGR_COMG_Msk: u32 = 32;
pub const TIM_EGR_COMG: u32 = 32;
pub const TIM_EGR_TG_Pos: u32 = 6;
pub const TIM_EGR_TG_Msk: u32 = 64;
pub const TIM_EGR_TG: u32 = 64;
pub const TIM_EGR_BG_Pos: u32 = 7;
pub const TIM_EGR_BG_Msk: u32 = 128;
pub const TIM_EGR_BG: u32 = 128;
pub const TIM_EGR_B2G_Pos: u32 = 8;
pub const TIM_EGR_B2G_Msk: u32 = 256;
pub const TIM_EGR_B2G: u32 = 256;
pub const TIM_CCMR1_CC1S_Pos: u32 = 0;
pub const TIM_CCMR1_CC1S_Msk: u32 = 3;
pub const TIM_CCMR1_CC1S: u32 = 3;
pub const TIM_CCMR1_CC1S_0: u32 = 1;
pub const TIM_CCMR1_CC1S_1: u32 = 2;
pub const TIM_CCMR1_OC1FE_Pos: u32 = 2;
pub const TIM_CCMR1_OC1FE_Msk: u32 = 4;
pub const TIM_CCMR1_OC1FE: u32 = 4;
pub const TIM_CCMR1_OC1PE_Pos: u32 = 3;
pub const TIM_CCMR1_OC1PE_Msk: u32 = 8;
pub const TIM_CCMR1_OC1PE: u32 = 8;
pub const TIM_CCMR1_OC1M_Pos: u32 = 4;
pub const TIM_CCMR1_OC1M_Msk: u32 = 65648;
pub const TIM_CCMR1_OC1M: u32 = 65648;
pub const TIM_CCMR1_OC1M_0: u32 = 16;
pub const TIM_CCMR1_OC1M_1: u32 = 32;
pub const TIM_CCMR1_OC1M_2: u32 = 64;
pub const TIM_CCMR1_OC1M_3: u32 = 65536;
pub const TIM_CCMR1_OC1CE_Pos: u32 = 7;
pub const TIM_CCMR1_OC1CE_Msk: u32 = 128;
pub const TIM_CCMR1_OC1CE: u32 = 128;
pub const TIM_CCMR1_CC2S_Pos: u32 = 8;
pub const TIM_CCMR1_CC2S_Msk: u32 = 768;
pub const TIM_CCMR1_CC2S: u32 = 768;
pub const TIM_CCMR1_CC2S_0: u32 = 256;
pub const TIM_CCMR1_CC2S_1: u32 = 512;
pub const TIM_CCMR1_OC2FE_Pos: u32 = 10;
pub const TIM_CCMR1_OC2FE_Msk: u32 = 1024;
pub const TIM_CCMR1_OC2FE: u32 = 1024;
pub const TIM_CCMR1_OC2PE_Pos: u32 = 11;
pub const TIM_CCMR1_OC2PE_Msk: u32 = 2048;
pub const TIM_CCMR1_OC2PE: u32 = 2048;
pub const TIM_CCMR1_OC2M_Pos: u32 = 12;
pub const TIM_CCMR1_OC2M_Msk: u32 = 16805888;
pub const TIM_CCMR1_OC2M: u32 = 16805888;
pub const TIM_CCMR1_OC2M_0: u32 = 4096;
pub const TIM_CCMR1_OC2M_1: u32 = 8192;
pub const TIM_CCMR1_OC2M_2: u32 = 16384;
pub const TIM_CCMR1_OC2M_3: u32 = 16777216;
pub const TIM_CCMR1_OC2CE_Pos: u32 = 15;
pub const TIM_CCMR1_OC2CE_Msk: u32 = 32768;
pub const TIM_CCMR1_OC2CE: u32 = 32768;
pub const TIM_CCMR1_IC1PSC_Pos: u32 = 2;
pub const TIM_CCMR1_IC1PSC_Msk: u32 = 12;
pub const TIM_CCMR1_IC1PSC: u32 = 12;
pub const TIM_CCMR1_IC1PSC_0: u32 = 4;
pub const TIM_CCMR1_IC1PSC_1: u32 = 8;
pub const TIM_CCMR1_IC1F_Pos: u32 = 4;
pub const TIM_CCMR1_IC1F_Msk: u32 = 240;
pub const TIM_CCMR1_IC1F: u32 = 240;
pub const TIM_CCMR1_IC1F_0: u32 = 16;
pub const TIM_CCMR1_IC1F_1: u32 = 32;
pub const TIM_CCMR1_IC1F_2: u32 = 64;
pub const TIM_CCMR1_IC1F_3: u32 = 128;
pub const TIM_CCMR1_IC2PSC_Pos: u32 = 10;
pub const TIM_CCMR1_IC2PSC_Msk: u32 = 3072;
pub const TIM_CCMR1_IC2PSC: u32 = 3072;
pub const TIM_CCMR1_IC2PSC_0: u32 = 1024;
pub const TIM_CCMR1_IC2PSC_1: u32 = 2048;
pub const TIM_CCMR1_IC2F_Pos: u32 = 12;
pub const TIM_CCMR1_IC2F_Msk: u32 = 61440;
pub const TIM_CCMR1_IC2F: u32 = 61440;
pub const TIM_CCMR1_IC2F_0: u32 = 4096;
pub const TIM_CCMR1_IC2F_1: u32 = 8192;
pub const TIM_CCMR1_IC2F_2: u32 = 16384;
pub const TIM_CCMR1_IC2F_3: u32 = 32768;
pub const TIM_CCMR2_CC3S_Pos: u32 = 0;
pub const TIM_CCMR2_CC3S_Msk: u32 = 3;
pub const TIM_CCMR2_CC3S: u32 = 3;
pub const TIM_CCMR2_CC3S_0: u32 = 1;
pub const TIM_CCMR2_CC3S_1: u32 = 2;
pub const TIM_CCMR2_OC3FE_Pos: u32 = 2;
pub const TIM_CCMR2_OC3FE_Msk: u32 = 4;
pub const TIM_CCMR2_OC3FE: u32 = 4;
pub const TIM_CCMR2_OC3PE_Pos: u32 = 3;
pub const TIM_CCMR2_OC3PE_Msk: u32 = 8;
pub const TIM_CCMR2_OC3PE: u32 = 8;
pub const TIM_CCMR2_OC3M_Pos: u32 = 4;
pub const TIM_CCMR2_OC3M_Msk: u32 = 65648;
pub const TIM_CCMR2_OC3M: u32 = 65648;
pub const TIM_CCMR2_OC3M_0: u32 = 16;
pub const TIM_CCMR2_OC3M_1: u32 = 32;
pub const TIM_CCMR2_OC3M_2: u32 = 64;
pub const TIM_CCMR2_OC3M_3: u32 = 65536;
pub const TIM_CCMR2_OC3CE_Pos: u32 = 7;
pub const TIM_CCMR2_OC3CE_Msk: u32 = 128;
pub const TIM_CCMR2_OC3CE: u32 = 128;
pub const TIM_CCMR2_CC4S_Pos: u32 = 8;
pub const TIM_CCMR2_CC4S_Msk: u32 = 768;
pub const TIM_CCMR2_CC4S: u32 = 768;
pub const TIM_CCMR2_CC4S_0: u32 = 256;
pub const TIM_CCMR2_CC4S_1: u32 = 512;
pub const TIM_CCMR2_OC4FE_Pos: u32 = 10;
pub const TIM_CCMR2_OC4FE_Msk: u32 = 1024;
pub const TIM_CCMR2_OC4FE: u32 = 1024;
pub const TIM_CCMR2_OC4PE_Pos: u32 = 11;
pub const TIM_CCMR2_OC4PE_Msk: u32 = 2048;
pub const TIM_CCMR2_OC4PE: u32 = 2048;
pub const TIM_CCMR2_OC4M_Pos: u32 = 12;
pub const TIM_CCMR2_OC4M_Msk: u32 = 16805888;
pub const TIM_CCMR2_OC4M: u32 = 16805888;
pub const TIM_CCMR2_OC4M_0: u32 = 4096;
pub const TIM_CCMR2_OC4M_1: u32 = 8192;
pub const TIM_CCMR2_OC4M_2: u32 = 16384;
pub const TIM_CCMR2_OC4M_3: u32 = 16777216;
pub const TIM_CCMR2_OC4CE_Pos: u32 = 15;
pub const TIM_CCMR2_OC4CE_Msk: u32 = 32768;
pub const TIM_CCMR2_OC4CE: u32 = 32768;
pub const TIM_CCMR2_IC3PSC_Pos: u32 = 2;
pub const TIM_CCMR2_IC3PSC_Msk: u32 = 12;
pub const TIM_CCMR2_IC3PSC: u32 = 12;
pub const TIM_CCMR2_IC3PSC_0: u32 = 4;
pub const TIM_CCMR2_IC3PSC_1: u32 = 8;
pub const TIM_CCMR2_IC3F_Pos: u32 = 4;
pub const TIM_CCMR2_IC3F_Msk: u32 = 240;
pub const TIM_CCMR2_IC3F: u32 = 240;
pub const TIM_CCMR2_IC3F_0: u32 = 16;
pub const TIM_CCMR2_IC3F_1: u32 = 32;
pub const TIM_CCMR2_IC3F_2: u32 = 64;
pub const TIM_CCMR2_IC3F_3: u32 = 128;
pub const TIM_CCMR2_IC4PSC_Pos: u32 = 10;
pub const TIM_CCMR2_IC4PSC_Msk: u32 = 3072;
pub const TIM_CCMR2_IC4PSC: u32 = 3072;
pub const TIM_CCMR2_IC4PSC_0: u32 = 1024;
pub const TIM_CCMR2_IC4PSC_1: u32 = 2048;
pub const TIM_CCMR2_IC4F_Pos: u32 = 12;
pub const TIM_CCMR2_IC4F_Msk: u32 = 61440;
pub const TIM_CCMR2_IC4F: u32 = 61440;
pub const TIM_CCMR2_IC4F_0: u32 = 4096;
pub const TIM_CCMR2_IC4F_1: u32 = 8192;
pub const TIM_CCMR2_IC4F_2: u32 = 16384;
pub const TIM_CCMR2_IC4F_3: u32 = 32768;
pub const TIM_CCER_CC1E_Pos: u32 = 0;
pub const TIM_CCER_CC1E_Msk: u32 = 1;
pub const TIM_CCER_CC1E: u32 = 1;
pub const TIM_CCER_CC1P_Pos: u32 = 1;
pub const TIM_CCER_CC1P_Msk: u32 = 2;
pub const TIM_CCER_CC1P: u32 = 2;
pub const TIM_CCER_CC1NE_Pos: u32 = 2;
pub const TIM_CCER_CC1NE_Msk: u32 = 4;
pub const TIM_CCER_CC1NE: u32 = 4;
pub const TIM_CCER_CC1NP_Pos: u32 = 3;
pub const TIM_CCER_CC1NP_Msk: u32 = 8;
pub const TIM_CCER_CC1NP: u32 = 8;
pub const TIM_CCER_CC2E_Pos: u32 = 4;
pub const TIM_CCER_CC2E_Msk: u32 = 16;
pub const TIM_CCER_CC2E: u32 = 16;
pub const TIM_CCER_CC2P_Pos: u32 = 5;
pub const TIM_CCER_CC2P_Msk: u32 = 32;
pub const TIM_CCER_CC2P: u32 = 32;
pub const TIM_CCER_CC2NE_Pos: u32 = 6;
pub const TIM_CCER_CC2NE_Msk: u32 = 64;
pub const TIM_CCER_CC2NE: u32 = 64;
pub const TIM_CCER_CC2NP_Pos: u32 = 7;
pub const TIM_CCER_CC2NP_Msk: u32 = 128;
pub const TIM_CCER_CC2NP: u32 = 128;
pub const TIM_CCER_CC3E_Pos: u32 = 8;
pub const TIM_CCER_CC3E_Msk: u32 = 256;
pub const TIM_CCER_CC3E: u32 = 256;
pub const TIM_CCER_CC3P_Pos: u32 = 9;
pub const TIM_CCER_CC3P_Msk: u32 = 512;
pub const TIM_CCER_CC3P: u32 = 512;
pub const TIM_CCER_CC3NE_Pos: u32 = 10;
pub const TIM_CCER_CC3NE_Msk: u32 = 1024;
pub const TIM_CCER_CC3NE: u32 = 1024;
pub const TIM_CCER_CC3NP_Pos: u32 = 11;
pub const TIM_CCER_CC3NP_Msk: u32 = 2048;
pub const TIM_CCER_CC3NP: u32 = 2048;
pub const TIM_CCER_CC4E_Pos: u32 = 12;
pub const TIM_CCER_CC4E_Msk: u32 = 4096;
pub const TIM_CCER_CC4E: u32 = 4096;
pub const TIM_CCER_CC4P_Pos: u32 = 13;
pub const TIM_CCER_CC4P_Msk: u32 = 8192;
pub const TIM_CCER_CC4P: u32 = 8192;
pub const TIM_CCER_CC4NP_Pos: u32 = 15;
pub const TIM_CCER_CC4NP_Msk: u32 = 32768;
pub const TIM_CCER_CC4NP: u32 = 32768;
pub const TIM_CCER_CC5E_Pos: u32 = 16;
pub const TIM_CCER_CC5E_Msk: u32 = 65536;
pub const TIM_CCER_CC5E: u32 = 65536;
pub const TIM_CCER_CC5P_Pos: u32 = 17;
pub const TIM_CCER_CC5P_Msk: u32 = 131072;
pub const TIM_CCER_CC5P: u32 = 131072;
pub const TIM_CCER_CC6E_Pos: u32 = 20;
pub const TIM_CCER_CC6E_Msk: u32 = 1048576;
pub const TIM_CCER_CC6E: u32 = 1048576;
pub const TIM_CCER_CC6P_Pos: u32 = 21;
pub const TIM_CCER_CC6P_Msk: u32 = 2097152;
pub const TIM_CCER_CC6P: u32 = 2097152;
pub const TIM_CNT_CNT_Pos: u32 = 0;
pub const TIM_CNT_CNT_Msk: u32 = 4294967295;
pub const TIM_CNT_CNT: u32 = 4294967295;
pub const TIM_CNT_UIFCPY_Pos: u32 = 31;
pub const TIM_CNT_UIFCPY_Msk: u32 = 2147483648;
pub const TIM_CNT_UIFCPY: u32 = 2147483648;
pub const TIM_PSC_PSC_Pos: u32 = 0;
pub const TIM_PSC_PSC_Msk: u32 = 65535;
pub const TIM_PSC_PSC: u32 = 65535;
pub const TIM_ARR_ARR_Pos: u32 = 0;
pub const TIM_ARR_ARR_Msk: u32 = 4294967295;
pub const TIM_ARR_ARR: u32 = 4294967295;
pub const TIM_RCR_REP_Pos: u32 = 0;
pub const TIM_RCR_REP_Msk: u32 = 65535;
pub const TIM_RCR_REP: u32 = 65535;
pub const TIM_CCR1_CCR1_Pos: u32 = 0;
pub const TIM_CCR1_CCR1_Msk: u32 = 65535;
pub const TIM_CCR1_CCR1: u32 = 65535;
pub const TIM_CCR2_CCR2_Pos: u32 = 0;
pub const TIM_CCR2_CCR2_Msk: u32 = 65535;
pub const TIM_CCR2_CCR2: u32 = 65535;
pub const TIM_CCR3_CCR3_Pos: u32 = 0;
pub const TIM_CCR3_CCR3_Msk: u32 = 65535;
pub const TIM_CCR3_CCR3: u32 = 65535;
pub const TIM_CCR4_CCR4_Pos: u32 = 0;
pub const TIM_CCR4_CCR4_Msk: u32 = 65535;
pub const TIM_CCR4_CCR4: u32 = 65535;
pub const TIM_CCR5_CCR5_Pos: u32 = 0;
pub const TIM_CCR5_CCR5_Msk: u32 = 4294967295;
pub const TIM_CCR5_CCR5: u32 = 4294967295;
pub const TIM_CCR5_GC5C1_Pos: u32 = 29;
pub const TIM_CCR5_GC5C1_Msk: u32 = 536870912;
pub const TIM_CCR5_GC5C1: u32 = 536870912;
pub const TIM_CCR5_GC5C2_Pos: u32 = 30;
pub const TIM_CCR5_GC5C2_Msk: u32 = 1073741824;
pub const TIM_CCR5_GC5C2: u32 = 1073741824;
pub const TIM_CCR5_GC5C3_Pos: u32 = 31;
pub const TIM_CCR5_GC5C3_Msk: u32 = 2147483648;
pub const TIM_CCR5_GC5C3: u32 = 2147483648;
pub const TIM_CCR6_CCR6_Pos: u32 = 0;
pub const TIM_CCR6_CCR6_Msk: u32 = 65535;
pub const TIM_CCR6_CCR6: u32 = 65535;
pub const TIM_BDTR_DTG_Pos: u32 = 0;
pub const TIM_BDTR_DTG_Msk: u32 = 255;
pub const TIM_BDTR_DTG: u32 = 255;
pub const TIM_BDTR_DTG_0: u32 = 1;
pub const TIM_BDTR_DTG_1: u32 = 2;
pub const TIM_BDTR_DTG_2: u32 = 4;
pub const TIM_BDTR_DTG_3: u32 = 8;
pub const TIM_BDTR_DTG_4: u32 = 16;
pub const TIM_BDTR_DTG_5: u32 = 32;
pub const TIM_BDTR_DTG_6: u32 = 64;
pub const TIM_BDTR_DTG_7: u32 = 128;
pub const TIM_BDTR_LOCK_Pos: u32 = 8;
pub const TIM_BDTR_LOCK_Msk: u32 = 768;
pub const TIM_BDTR_LOCK: u32 = 768;
pub const TIM_BDTR_LOCK_0: u32 = 256;
pub const TIM_BDTR_LOCK_1: u32 = 512;
pub const TIM_BDTR_OSSI_Pos: u32 = 10;
pub const TIM_BDTR_OSSI_Msk: u32 = 1024;
pub const TIM_BDTR_OSSI: u32 = 1024;
pub const TIM_BDTR_OSSR_Pos: u32 = 11;
pub const TIM_BDTR_OSSR_Msk: u32 = 2048;
pub const TIM_BDTR_OSSR: u32 = 2048;
pub const TIM_BDTR_BKE_Pos: u32 = 12;
pub const TIM_BDTR_BKE_Msk: u32 = 4096;
pub const TIM_BDTR_BKE: u32 = 4096;
pub const TIM_BDTR_BKP_Pos: u32 = 13;
pub const TIM_BDTR_BKP_Msk: u32 = 8192;
pub const TIM_BDTR_BKP: u32 = 8192;
pub const TIM_BDTR_AOE_Pos: u32 = 14;
pub const TIM_BDTR_AOE_Msk: u32 = 16384;
pub const TIM_BDTR_AOE: u32 = 16384;
pub const TIM_BDTR_MOE_Pos: u32 = 15;
pub const TIM_BDTR_MOE_Msk: u32 = 32768;
pub const TIM_BDTR_MOE: u32 = 32768;
pub const TIM_BDTR_BKF_Pos: u32 = 16;
pub const TIM_BDTR_BKF_Msk: u32 = 983040;
pub const TIM_BDTR_BKF: u32 = 983040;
pub const TIM_BDTR_BK2F_Pos: u32 = 20;
pub const TIM_BDTR_BK2F_Msk: u32 = 15728640;
pub const TIM_BDTR_BK2F: u32 = 15728640;
pub const TIM_BDTR_BK2E_Pos: u32 = 24;
pub const TIM_BDTR_BK2E_Msk: u32 = 16777216;
pub const TIM_BDTR_BK2E: u32 = 16777216;
pub const TIM_BDTR_BK2P_Pos: u32 = 25;
pub const TIM_BDTR_BK2P_Msk: u32 = 33554432;
pub const TIM_BDTR_BK2P: u32 = 33554432;
pub const TIM_DCR_DBA_Pos: u32 = 0;
pub const TIM_DCR_DBA_Msk: u32 = 31;
pub const TIM_DCR_DBA: u32 = 31;
pub const TIM_DCR_DBA_0: u32 = 1;
pub const TIM_DCR_DBA_1: u32 = 2;
pub const TIM_DCR_DBA_2: u32 = 4;
pub const TIM_DCR_DBA_3: u32 = 8;
pub const TIM_DCR_DBA_4: u32 = 16;
pub const TIM_DCR_DBL_Pos: u32 = 8;
pub const TIM_DCR_DBL_Msk: u32 = 7936;
pub const TIM_DCR_DBL: u32 = 7936;
pub const TIM_DCR_DBL_0: u32 = 256;
pub const TIM_DCR_DBL_1: u32 = 512;
pub const TIM_DCR_DBL_2: u32 = 1024;
pub const TIM_DCR_DBL_3: u32 = 2048;
pub const TIM_DCR_DBL_4: u32 = 4096;
pub const TIM_DMAR_DMAB_Pos: u32 = 0;
pub const TIM_DMAR_DMAB_Msk: u32 = 65535;
pub const TIM_DMAR_DMAB: u32 = 65535;
pub const TIM16_OR_TI1_RMP_Pos: u32 = 0;
pub const TIM16_OR_TI1_RMP_Msk: u32 = 3;
pub const TIM16_OR_TI1_RMP: u32 = 3;
pub const TIM16_OR_TI1_RMP_0: u32 = 1;
pub const TIM16_OR_TI1_RMP_1: u32 = 2;
pub const TIM1_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM1_OR_ETR_RMP_Msk: u32 = 15;
pub const TIM1_OR_ETR_RMP: u32 = 15;
pub const TIM1_OR_ETR_RMP_0: u32 = 1;
pub const TIM1_OR_ETR_RMP_1: u32 = 2;
pub const TIM1_OR_ETR_RMP_2: u32 = 4;
pub const TIM1_OR_ETR_RMP_3: u32 = 8;
pub const TIM8_OR_ETR_RMP_Pos: u32 = 0;
pub const TIM8_OR_ETR_RMP_Msk: u32 = 15;
pub const TIM8_OR_ETR_RMP: u32 = 15;
pub const TIM8_OR_ETR_RMP_0: u32 = 1;
pub const TIM8_OR_ETR_RMP_1: u32 = 2;
pub const TIM8_OR_ETR_RMP_2: u32 = 4;
pub const TIM8_OR_ETR_RMP_3: u32 = 8;
pub const TIM_CCMR3_OC5FE_Pos: u32 = 2;
pub const TIM_CCMR3_OC5FE_Msk: u32 = 4;
pub const TIM_CCMR3_OC5FE: u32 = 4;
pub const TIM_CCMR3_OC5PE_Pos: u32 = 3;
pub const TIM_CCMR3_OC5PE_Msk: u32 = 8;
pub const TIM_CCMR3_OC5PE: u32 = 8;
pub const TIM_CCMR3_OC5M_Pos: u32 = 4;
pub const TIM_CCMR3_OC5M_Msk: u32 = 65648;
pub const TIM_CCMR3_OC5M: u32 = 65648;
pub const TIM_CCMR3_OC5M_0: u32 = 16;
pub const TIM_CCMR3_OC5M_1: u32 = 32;
pub const TIM_CCMR3_OC5M_2: u32 = 64;
pub const TIM_CCMR3_OC5M_3: u32 = 65536;
pub const TIM_CCMR3_OC5CE_Pos: u32 = 7;
pub const TIM_CCMR3_OC5CE_Msk: u32 = 128;
pub const TIM_CCMR3_OC5CE: u32 = 128;
pub const TIM_CCMR3_OC6FE_Pos: u32 = 10;
pub const TIM_CCMR3_OC6FE_Msk: u32 = 1024;
pub const TIM_CCMR3_OC6FE: u32 = 1024;
pub const TIM_CCMR3_OC6PE_Pos: u32 = 11;
pub const TIM_CCMR3_OC6PE_Msk: u32 = 2048;
pub const TIM_CCMR3_OC6PE: u32 = 2048;
pub const TIM_CCMR3_OC6M_Pos: u32 = 12;
pub const TIM_CCMR3_OC6M_Msk: u32 = 16805888;
pub const TIM_CCMR3_OC6M: u32 = 16805888;
pub const TIM_CCMR3_OC6M_0: u32 = 4096;
pub const TIM_CCMR3_OC6M_1: u32 = 8192;
pub const TIM_CCMR3_OC6M_2: u32 = 16384;
pub const TIM_CCMR3_OC6M_3: u32 = 16777216;
pub const TIM_CCMR3_OC6CE_Pos: u32 = 15;
pub const TIM_CCMR3_OC6CE_Msk: u32 = 32768;
pub const TIM_CCMR3_OC6CE: u32 = 32768;
pub const TSC_CR_TSCE_Pos: u32 = 0;
pub const TSC_CR_TSCE_Msk: u32 = 1;
pub const TSC_CR_TSCE: u32 = 1;
pub const TSC_CR_START_Pos: u32 = 1;
pub const TSC_CR_START_Msk: u32 = 2;
pub const TSC_CR_START: u32 = 2;
pub const TSC_CR_AM_Pos: u32 = 2;
pub const TSC_CR_AM_Msk: u32 = 4;
pub const TSC_CR_AM: u32 = 4;
pub const TSC_CR_SYNCPOL_Pos: u32 = 3;
pub const TSC_CR_SYNCPOL_Msk: u32 = 8;
pub const TSC_CR_SYNCPOL: u32 = 8;
pub const TSC_CR_IODEF_Pos: u32 = 4;
pub const TSC_CR_IODEF_Msk: u32 = 16;
pub const TSC_CR_IODEF: u32 = 16;
pub const TSC_CR_MCV_Pos: u32 = 5;
pub const TSC_CR_MCV_Msk: u32 = 224;
pub const TSC_CR_MCV: u32 = 224;
pub const TSC_CR_MCV_0: u32 = 32;
pub const TSC_CR_MCV_1: u32 = 64;
pub const TSC_CR_MCV_2: u32 = 128;
pub const TSC_CR_PGPSC_Pos: u32 = 12;
pub const TSC_CR_PGPSC_Msk: u32 = 28672;
pub const TSC_CR_PGPSC: u32 = 28672;
pub const TSC_CR_PGPSC_0: u32 = 4096;
pub const TSC_CR_PGPSC_1: u32 = 8192;
pub const TSC_CR_PGPSC_2: u32 = 16384;
pub const TSC_CR_SSPSC_Pos: u32 = 15;
pub const TSC_CR_SSPSC_Msk: u32 = 32768;
pub const TSC_CR_SSPSC: u32 = 32768;
pub const TSC_CR_SSE_Pos: u32 = 16;
pub const TSC_CR_SSE_Msk: u32 = 65536;
pub const TSC_CR_SSE: u32 = 65536;
pub const TSC_CR_SSD_Pos: u32 = 17;
pub const TSC_CR_SSD_Msk: u32 = 16646144;
pub const TSC_CR_SSD: u32 = 16646144;
pub const TSC_CR_SSD_0: u32 = 131072;
pub const TSC_CR_SSD_1: u32 = 262144;
pub const TSC_CR_SSD_2: u32 = 524288;
pub const TSC_CR_SSD_3: u32 = 1048576;
pub const TSC_CR_SSD_4: u32 = 2097152;
pub const TSC_CR_SSD_5: u32 = 4194304;
pub const TSC_CR_SSD_6: u32 = 8388608;
pub const TSC_CR_CTPL_Pos: u32 = 24;
pub const TSC_CR_CTPL_Msk: u32 = 251658240;
pub const TSC_CR_CTPL: u32 = 251658240;
pub const TSC_CR_CTPL_0: u32 = 16777216;
pub const TSC_CR_CTPL_1: u32 = 33554432;
pub const TSC_CR_CTPL_2: u32 = 67108864;
pub const TSC_CR_CTPL_3: u32 = 134217728;
pub const TSC_CR_CTPH_Pos: u32 = 28;
pub const TSC_CR_CTPH_Msk: u32 = 4026531840;
pub const TSC_CR_CTPH: u32 = 4026531840;
pub const TSC_CR_CTPH_0: u32 = 268435456;
pub const TSC_CR_CTPH_1: u32 = 536870912;
pub const TSC_CR_CTPH_2: u32 = 1073741824;
pub const TSC_CR_CTPH_3: u32 = 2147483648;
pub const TSC_IER_EOAIE_Pos: u32 = 0;
pub const TSC_IER_EOAIE_Msk: u32 = 1;
pub const TSC_IER_EOAIE: u32 = 1;
pub const TSC_IER_MCEIE_Pos: u32 = 1;
pub const TSC_IER_MCEIE_Msk: u32 = 2;
pub const TSC_IER_MCEIE: u32 = 2;
pub const TSC_ICR_EOAIC_Pos: u32 = 0;
pub const TSC_ICR_EOAIC_Msk: u32 = 1;
pub const TSC_ICR_EOAIC: u32 = 1;
pub const TSC_ICR_MCEIC_Pos: u32 = 1;
pub const TSC_ICR_MCEIC_Msk: u32 = 2;
pub const TSC_ICR_MCEIC: u32 = 2;
pub const TSC_ISR_EOAF_Pos: u32 = 0;
pub const TSC_ISR_EOAF_Msk: u32 = 1;
pub const TSC_ISR_EOAF: u32 = 1;
pub const TSC_ISR_MCEF_Pos: u32 = 1;
pub const TSC_ISR_MCEF_Msk: u32 = 2;
pub const TSC_ISR_MCEF: u32 = 2;
pub const TSC_IOHCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOHCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOHCR_G1_IO1: u32 = 1;
pub const TSC_IOHCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOHCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOHCR_G1_IO2: u32 = 2;
pub const TSC_IOHCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOHCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOHCR_G1_IO3: u32 = 4;
pub const TSC_IOHCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOHCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOHCR_G1_IO4: u32 = 8;
pub const TSC_IOHCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOHCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOHCR_G2_IO1: u32 = 16;
pub const TSC_IOHCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOHCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOHCR_G2_IO2: u32 = 32;
pub const TSC_IOHCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOHCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOHCR_G2_IO3: u32 = 64;
pub const TSC_IOHCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOHCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOHCR_G2_IO4: u32 = 128;
pub const TSC_IOHCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOHCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOHCR_G3_IO1: u32 = 256;
pub const TSC_IOHCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOHCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOHCR_G3_IO2: u32 = 512;
pub const TSC_IOHCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOHCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOHCR_G3_IO3: u32 = 1024;
pub const TSC_IOHCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOHCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOHCR_G3_IO4: u32 = 2048;
pub const TSC_IOHCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOHCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOHCR_G4_IO1: u32 = 4096;
pub const TSC_IOHCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOHCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOHCR_G4_IO2: u32 = 8192;
pub const TSC_IOHCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOHCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOHCR_G4_IO3: u32 = 16384;
pub const TSC_IOHCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOHCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOHCR_G4_IO4: u32 = 32768;
pub const TSC_IOHCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOHCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOHCR_G5_IO1: u32 = 65536;
pub const TSC_IOHCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOHCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOHCR_G5_IO2: u32 = 131072;
pub const TSC_IOHCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOHCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOHCR_G5_IO3: u32 = 262144;
pub const TSC_IOHCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOHCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOHCR_G5_IO4: u32 = 524288;
pub const TSC_IOHCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOHCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOHCR_G6_IO1: u32 = 1048576;
pub const TSC_IOHCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOHCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOHCR_G6_IO2: u32 = 2097152;
pub const TSC_IOHCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOHCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOHCR_G6_IO3: u32 = 4194304;
pub const TSC_IOHCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOHCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOHCR_G6_IO4: u32 = 8388608;
pub const TSC_IOHCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOHCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOHCR_G7_IO1: u32 = 16777216;
pub const TSC_IOHCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOHCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOHCR_G7_IO2: u32 = 33554432;
pub const TSC_IOHCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOHCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOHCR_G7_IO3: u32 = 67108864;
pub const TSC_IOHCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOHCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOHCR_G7_IO4: u32 = 134217728;
pub const TSC_IOHCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOHCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOHCR_G8_IO1: u32 = 268435456;
pub const TSC_IOHCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOHCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOHCR_G8_IO2: u32 = 536870912;
pub const TSC_IOHCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOHCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOHCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOHCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOHCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOHCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOASCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOASCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOASCR_G1_IO1: u32 = 1;
pub const TSC_IOASCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOASCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOASCR_G1_IO2: u32 = 2;
pub const TSC_IOASCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOASCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOASCR_G1_IO3: u32 = 4;
pub const TSC_IOASCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOASCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOASCR_G1_IO4: u32 = 8;
pub const TSC_IOASCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOASCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOASCR_G2_IO1: u32 = 16;
pub const TSC_IOASCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOASCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOASCR_G2_IO2: u32 = 32;
pub const TSC_IOASCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOASCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOASCR_G2_IO3: u32 = 64;
pub const TSC_IOASCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOASCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOASCR_G2_IO4: u32 = 128;
pub const TSC_IOASCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOASCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOASCR_G3_IO1: u32 = 256;
pub const TSC_IOASCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOASCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOASCR_G3_IO2: u32 = 512;
pub const TSC_IOASCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOASCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOASCR_G3_IO3: u32 = 1024;
pub const TSC_IOASCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOASCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOASCR_G3_IO4: u32 = 2048;
pub const TSC_IOASCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOASCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOASCR_G4_IO1: u32 = 4096;
pub const TSC_IOASCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOASCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOASCR_G4_IO2: u32 = 8192;
pub const TSC_IOASCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOASCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOASCR_G4_IO3: u32 = 16384;
pub const TSC_IOASCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOASCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOASCR_G4_IO4: u32 = 32768;
pub const TSC_IOASCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOASCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOASCR_G5_IO1: u32 = 65536;
pub const TSC_IOASCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOASCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOASCR_G5_IO2: u32 = 131072;
pub const TSC_IOASCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOASCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOASCR_G5_IO3: u32 = 262144;
pub const TSC_IOASCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOASCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOASCR_G5_IO4: u32 = 524288;
pub const TSC_IOASCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOASCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOASCR_G6_IO1: u32 = 1048576;
pub const TSC_IOASCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOASCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOASCR_G6_IO2: u32 = 2097152;
pub const TSC_IOASCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOASCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOASCR_G6_IO3: u32 = 4194304;
pub const TSC_IOASCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOASCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOASCR_G6_IO4: u32 = 8388608;
pub const TSC_IOASCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOASCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOASCR_G7_IO1: u32 = 16777216;
pub const TSC_IOASCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOASCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOASCR_G7_IO2: u32 = 33554432;
pub const TSC_IOASCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOASCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOASCR_G7_IO3: u32 = 67108864;
pub const TSC_IOASCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOASCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOASCR_G7_IO4: u32 = 134217728;
pub const TSC_IOASCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOASCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOASCR_G8_IO1: u32 = 268435456;
pub const TSC_IOASCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOASCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOASCR_G8_IO2: u32 = 536870912;
pub const TSC_IOASCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOASCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOASCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOASCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOASCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOASCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOSCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOSCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOSCR_G1_IO1: u32 = 1;
pub const TSC_IOSCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOSCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOSCR_G1_IO2: u32 = 2;
pub const TSC_IOSCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOSCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOSCR_G1_IO3: u32 = 4;
pub const TSC_IOSCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOSCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOSCR_G1_IO4: u32 = 8;
pub const TSC_IOSCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOSCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOSCR_G2_IO1: u32 = 16;
pub const TSC_IOSCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOSCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOSCR_G2_IO2: u32 = 32;
pub const TSC_IOSCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOSCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOSCR_G2_IO3: u32 = 64;
pub const TSC_IOSCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOSCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOSCR_G2_IO4: u32 = 128;
pub const TSC_IOSCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOSCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOSCR_G3_IO1: u32 = 256;
pub const TSC_IOSCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOSCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOSCR_G3_IO2: u32 = 512;
pub const TSC_IOSCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOSCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOSCR_G3_IO3: u32 = 1024;
pub const TSC_IOSCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOSCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOSCR_G3_IO4: u32 = 2048;
pub const TSC_IOSCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOSCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOSCR_G4_IO1: u32 = 4096;
pub const TSC_IOSCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOSCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOSCR_G4_IO2: u32 = 8192;
pub const TSC_IOSCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOSCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOSCR_G4_IO3: u32 = 16384;
pub const TSC_IOSCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOSCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOSCR_G4_IO4: u32 = 32768;
pub const TSC_IOSCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOSCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOSCR_G5_IO1: u32 = 65536;
pub const TSC_IOSCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOSCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOSCR_G5_IO2: u32 = 131072;
pub const TSC_IOSCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOSCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOSCR_G5_IO3: u32 = 262144;
pub const TSC_IOSCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOSCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOSCR_G5_IO4: u32 = 524288;
pub const TSC_IOSCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOSCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOSCR_G6_IO1: u32 = 1048576;
pub const TSC_IOSCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOSCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOSCR_G6_IO2: u32 = 2097152;
pub const TSC_IOSCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOSCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOSCR_G6_IO3: u32 = 4194304;
pub const TSC_IOSCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOSCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOSCR_G6_IO4: u32 = 8388608;
pub const TSC_IOSCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOSCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOSCR_G7_IO1: u32 = 16777216;
pub const TSC_IOSCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOSCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOSCR_G7_IO2: u32 = 33554432;
pub const TSC_IOSCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOSCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOSCR_G7_IO3: u32 = 67108864;
pub const TSC_IOSCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOSCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOSCR_G7_IO4: u32 = 134217728;
pub const TSC_IOSCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOSCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOSCR_G8_IO1: u32 = 268435456;
pub const TSC_IOSCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOSCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOSCR_G8_IO2: u32 = 536870912;
pub const TSC_IOSCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOSCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOSCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOSCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOSCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOSCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOCCR_G1_IO1_Pos: u32 = 0;
pub const TSC_IOCCR_G1_IO1_Msk: u32 = 1;
pub const TSC_IOCCR_G1_IO1: u32 = 1;
pub const TSC_IOCCR_G1_IO2_Pos: u32 = 1;
pub const TSC_IOCCR_G1_IO2_Msk: u32 = 2;
pub const TSC_IOCCR_G1_IO2: u32 = 2;
pub const TSC_IOCCR_G1_IO3_Pos: u32 = 2;
pub const TSC_IOCCR_G1_IO3_Msk: u32 = 4;
pub const TSC_IOCCR_G1_IO3: u32 = 4;
pub const TSC_IOCCR_G1_IO4_Pos: u32 = 3;
pub const TSC_IOCCR_G1_IO4_Msk: u32 = 8;
pub const TSC_IOCCR_G1_IO4: u32 = 8;
pub const TSC_IOCCR_G2_IO1_Pos: u32 = 4;
pub const TSC_IOCCR_G2_IO1_Msk: u32 = 16;
pub const TSC_IOCCR_G2_IO1: u32 = 16;
pub const TSC_IOCCR_G2_IO2_Pos: u32 = 5;
pub const TSC_IOCCR_G2_IO2_Msk: u32 = 32;
pub const TSC_IOCCR_G2_IO2: u32 = 32;
pub const TSC_IOCCR_G2_IO3_Pos: u32 = 6;
pub const TSC_IOCCR_G2_IO3_Msk: u32 = 64;
pub const TSC_IOCCR_G2_IO3: u32 = 64;
pub const TSC_IOCCR_G2_IO4_Pos: u32 = 7;
pub const TSC_IOCCR_G2_IO4_Msk: u32 = 128;
pub const TSC_IOCCR_G2_IO4: u32 = 128;
pub const TSC_IOCCR_G3_IO1_Pos: u32 = 8;
pub const TSC_IOCCR_G3_IO1_Msk: u32 = 256;
pub const TSC_IOCCR_G3_IO1: u32 = 256;
pub const TSC_IOCCR_G3_IO2_Pos: u32 = 9;
pub const TSC_IOCCR_G3_IO2_Msk: u32 = 512;
pub const TSC_IOCCR_G3_IO2: u32 = 512;
pub const TSC_IOCCR_G3_IO3_Pos: u32 = 10;
pub const TSC_IOCCR_G3_IO3_Msk: u32 = 1024;
pub const TSC_IOCCR_G3_IO3: u32 = 1024;
pub const TSC_IOCCR_G3_IO4_Pos: u32 = 11;
pub const TSC_IOCCR_G3_IO4_Msk: u32 = 2048;
pub const TSC_IOCCR_G3_IO4: u32 = 2048;
pub const TSC_IOCCR_G4_IO1_Pos: u32 = 12;
pub const TSC_IOCCR_G4_IO1_Msk: u32 = 4096;
pub const TSC_IOCCR_G4_IO1: u32 = 4096;
pub const TSC_IOCCR_G4_IO2_Pos: u32 = 13;
pub const TSC_IOCCR_G4_IO2_Msk: u32 = 8192;
pub const TSC_IOCCR_G4_IO2: u32 = 8192;
pub const TSC_IOCCR_G4_IO3_Pos: u32 = 14;
pub const TSC_IOCCR_G4_IO3_Msk: u32 = 16384;
pub const TSC_IOCCR_G4_IO3: u32 = 16384;
pub const TSC_IOCCR_G4_IO4_Pos: u32 = 15;
pub const TSC_IOCCR_G4_IO4_Msk: u32 = 32768;
pub const TSC_IOCCR_G4_IO4: u32 = 32768;
pub const TSC_IOCCR_G5_IO1_Pos: u32 = 16;
pub const TSC_IOCCR_G5_IO1_Msk: u32 = 65536;
pub const TSC_IOCCR_G5_IO1: u32 = 65536;
pub const TSC_IOCCR_G5_IO2_Pos: u32 = 17;
pub const TSC_IOCCR_G5_IO2_Msk: u32 = 131072;
pub const TSC_IOCCR_G5_IO2: u32 = 131072;
pub const TSC_IOCCR_G5_IO3_Pos: u32 = 18;
pub const TSC_IOCCR_G5_IO3_Msk: u32 = 262144;
pub const TSC_IOCCR_G5_IO3: u32 = 262144;
pub const TSC_IOCCR_G5_IO4_Pos: u32 = 19;
pub const TSC_IOCCR_G5_IO4_Msk: u32 = 524288;
pub const TSC_IOCCR_G5_IO4: u32 = 524288;
pub const TSC_IOCCR_G6_IO1_Pos: u32 = 20;
pub const TSC_IOCCR_G6_IO1_Msk: u32 = 1048576;
pub const TSC_IOCCR_G6_IO1: u32 = 1048576;
pub const TSC_IOCCR_G6_IO2_Pos: u32 = 21;
pub const TSC_IOCCR_G6_IO2_Msk: u32 = 2097152;
pub const TSC_IOCCR_G6_IO2: u32 = 2097152;
pub const TSC_IOCCR_G6_IO3_Pos: u32 = 22;
pub const TSC_IOCCR_G6_IO3_Msk: u32 = 4194304;
pub const TSC_IOCCR_G6_IO3: u32 = 4194304;
pub const TSC_IOCCR_G6_IO4_Pos: u32 = 23;
pub const TSC_IOCCR_G6_IO4_Msk: u32 = 8388608;
pub const TSC_IOCCR_G6_IO4: u32 = 8388608;
pub const TSC_IOCCR_G7_IO1_Pos: u32 = 24;
pub const TSC_IOCCR_G7_IO1_Msk: u32 = 16777216;
pub const TSC_IOCCR_G7_IO1: u32 = 16777216;
pub const TSC_IOCCR_G7_IO2_Pos: u32 = 25;
pub const TSC_IOCCR_G7_IO2_Msk: u32 = 33554432;
pub const TSC_IOCCR_G7_IO2: u32 = 33554432;
pub const TSC_IOCCR_G7_IO3_Pos: u32 = 26;
pub const TSC_IOCCR_G7_IO3_Msk: u32 = 67108864;
pub const TSC_IOCCR_G7_IO3: u32 = 67108864;
pub const TSC_IOCCR_G7_IO4_Pos: u32 = 27;
pub const TSC_IOCCR_G7_IO4_Msk: u32 = 134217728;
pub const TSC_IOCCR_G7_IO4: u32 = 134217728;
pub const TSC_IOCCR_G8_IO1_Pos: u32 = 28;
pub const TSC_IOCCR_G8_IO1_Msk: u32 = 268435456;
pub const TSC_IOCCR_G8_IO1: u32 = 268435456;
pub const TSC_IOCCR_G8_IO2_Pos: u32 = 29;
pub const TSC_IOCCR_G8_IO2_Msk: u32 = 536870912;
pub const TSC_IOCCR_G8_IO2: u32 = 536870912;
pub const TSC_IOCCR_G8_IO3_Pos: u32 = 30;
pub const TSC_IOCCR_G8_IO3_Msk: u32 = 1073741824;
pub const TSC_IOCCR_G8_IO3: u32 = 1073741824;
pub const TSC_IOCCR_G8_IO4_Pos: u32 = 31;
pub const TSC_IOCCR_G8_IO4_Msk: u32 = 2147483648;
pub const TSC_IOCCR_G8_IO4: u32 = 2147483648;
pub const TSC_IOGCSR_G1E_Pos: u32 = 0;
pub const TSC_IOGCSR_G1E_Msk: u32 = 1;
pub const TSC_IOGCSR_G1E: u32 = 1;
pub const TSC_IOGCSR_G2E_Pos: u32 = 1;
pub const TSC_IOGCSR_G2E_Msk: u32 = 2;
pub const TSC_IOGCSR_G2E: u32 = 2;
pub const TSC_IOGCSR_G3E_Pos: u32 = 2;
pub const TSC_IOGCSR_G3E_Msk: u32 = 4;
pub const TSC_IOGCSR_G3E: u32 = 4;
pub const TSC_IOGCSR_G4E_Pos: u32 = 3;
pub const TSC_IOGCSR_G4E_Msk: u32 = 8;
pub const TSC_IOGCSR_G4E: u32 = 8;
pub const TSC_IOGCSR_G5E_Pos: u32 = 4;
pub const TSC_IOGCSR_G5E_Msk: u32 = 16;
pub const TSC_IOGCSR_G5E: u32 = 16;
pub const TSC_IOGCSR_G6E_Pos: u32 = 5;
pub const TSC_IOGCSR_G6E_Msk: u32 = 32;
pub const TSC_IOGCSR_G6E: u32 = 32;
pub const TSC_IOGCSR_G7E_Pos: u32 = 6;
pub const TSC_IOGCSR_G7E_Msk: u32 = 64;
pub const TSC_IOGCSR_G7E: u32 = 64;
pub const TSC_IOGCSR_G8E_Pos: u32 = 7;
pub const TSC_IOGCSR_G8E_Msk: u32 = 128;
pub const TSC_IOGCSR_G8E: u32 = 128;
pub const TSC_IOGCSR_G1S_Pos: u32 = 16;
pub const TSC_IOGCSR_G1S_Msk: u32 = 65536;
pub const TSC_IOGCSR_G1S: u32 = 65536;
pub const TSC_IOGCSR_G2S_Pos: u32 = 17;
pub const TSC_IOGCSR_G2S_Msk: u32 = 131072;
pub const TSC_IOGCSR_G2S: u32 = 131072;
pub const TSC_IOGCSR_G3S_Pos: u32 = 18;
pub const TSC_IOGCSR_G3S_Msk: u32 = 262144;
pub const TSC_IOGCSR_G3S: u32 = 262144;
pub const TSC_IOGCSR_G4S_Pos: u32 = 19;
pub const TSC_IOGCSR_G4S_Msk: u32 = 524288;
pub const TSC_IOGCSR_G4S: u32 = 524288;
pub const TSC_IOGCSR_G5S_Pos: u32 = 20;
pub const TSC_IOGCSR_G5S_Msk: u32 = 1048576;
pub const TSC_IOGCSR_G5S: u32 = 1048576;
pub const TSC_IOGCSR_G6S_Pos: u32 = 21;
pub const TSC_IOGCSR_G6S_Msk: u32 = 2097152;
pub const TSC_IOGCSR_G6S: u32 = 2097152;
pub const TSC_IOGCSR_G7S_Pos: u32 = 22;
pub const TSC_IOGCSR_G7S_Msk: u32 = 4194304;
pub const TSC_IOGCSR_G7S: u32 = 4194304;
pub const TSC_IOGCSR_G8S_Pos: u32 = 23;
pub const TSC_IOGCSR_G8S_Msk: u32 = 8388608;
pub const TSC_IOGCSR_G8S: u32 = 8388608;
pub const TSC_IOGXCR_CNT_Pos: u32 = 0;
pub const TSC_IOGXCR_CNT_Msk: u32 = 16383;
pub const TSC_IOGXCR_CNT: u32 = 16383;
pub const USART_CR1_UE_Pos: u32 = 0;
pub const USART_CR1_UE_Msk: u32 = 1;
pub const USART_CR1_UE: u32 = 1;
pub const USART_CR1_UESM_Pos: u32 = 1;
pub const USART_CR1_UESM_Msk: u32 = 2;
pub const USART_CR1_UESM: u32 = 2;
pub const USART_CR1_RE_Pos: u32 = 2;
pub const USART_CR1_RE_Msk: u32 = 4;
pub const USART_CR1_RE: u32 = 4;
pub const USART_CR1_TE_Pos: u32 = 3;
pub const USART_CR1_TE_Msk: u32 = 8;
pub const USART_CR1_TE: u32 = 8;
pub const USART_CR1_IDLEIE_Pos: u32 = 4;
pub const USART_CR1_IDLEIE_Msk: u32 = 16;
pub const USART_CR1_IDLEIE: u32 = 16;
pub const USART_CR1_RXNEIE_Pos: u32 = 5;
pub const USART_CR1_RXNEIE_Msk: u32 = 32;
pub const USART_CR1_RXNEIE: u32 = 32;
pub const USART_CR1_TCIE_Pos: u32 = 6;
pub const USART_CR1_TCIE_Msk: u32 = 64;
pub const USART_CR1_TCIE: u32 = 64;
pub const USART_CR1_TXEIE_Pos: u32 = 7;
pub const USART_CR1_TXEIE_Msk: u32 = 128;
pub const USART_CR1_TXEIE: u32 = 128;
pub const USART_CR1_PEIE_Pos: u32 = 8;
pub const USART_CR1_PEIE_Msk: u32 = 256;
pub const USART_CR1_PEIE: u32 = 256;
pub const USART_CR1_PS_Pos: u32 = 9;
pub const USART_CR1_PS_Msk: u32 = 512;
pub const USART_CR1_PS: u32 = 512;
pub const USART_CR1_PCE_Pos: u32 = 10;
pub const USART_CR1_PCE_Msk: u32 = 1024;
pub const USART_CR1_PCE: u32 = 1024;
pub const USART_CR1_WAKE_Pos: u32 = 11;
pub const USART_CR1_WAKE_Msk: u32 = 2048;
pub const USART_CR1_WAKE: u32 = 2048;
pub const USART_CR1_M_Pos: u32 = 12;
pub const USART_CR1_M_Msk: u32 = 4096;
pub const USART_CR1_M: u32 = 4096;
pub const USART_CR1_M0_Pos: u32 = 12;
pub const USART_CR1_M0_Msk: u32 = 4096;
pub const USART_CR1_M0: u32 = 4096;
pub const USART_CR1_MME_Pos: u32 = 13;
pub const USART_CR1_MME_Msk: u32 = 8192;
pub const USART_CR1_MME: u32 = 8192;
pub const USART_CR1_CMIE_Pos: u32 = 14;
pub const USART_CR1_CMIE_Msk: u32 = 16384;
pub const USART_CR1_CMIE: u32 = 16384;
pub const USART_CR1_OVER8_Pos: u32 = 15;
pub const USART_CR1_OVER8_Msk: u32 = 32768;
pub const USART_CR1_OVER8: u32 = 32768;
pub const USART_CR1_DEDT_Pos: u32 = 16;
pub const USART_CR1_DEDT_Msk: u32 = 2031616;
pub const USART_CR1_DEDT: u32 = 2031616;
pub const USART_CR1_DEDT_0: u32 = 65536;
pub const USART_CR1_DEDT_1: u32 = 131072;
pub const USART_CR1_DEDT_2: u32 = 262144;
pub const USART_CR1_DEDT_3: u32 = 524288;
pub const USART_CR1_DEDT_4: u32 = 1048576;
pub const USART_CR1_DEAT_Pos: u32 = 21;
pub const USART_CR1_DEAT_Msk: u32 = 65011712;
pub const USART_CR1_DEAT: u32 = 65011712;
pub const USART_CR1_DEAT_0: u32 = 2097152;
pub const USART_CR1_DEAT_1: u32 = 4194304;
pub const USART_CR1_DEAT_2: u32 = 8388608;
pub const USART_CR1_DEAT_3: u32 = 16777216;
pub const USART_CR1_DEAT_4: u32 = 33554432;
pub const USART_CR1_RTOIE_Pos: u32 = 26;
pub const USART_CR1_RTOIE_Msk: u32 = 67108864;
pub const USART_CR1_RTOIE: u32 = 67108864;
pub const USART_CR1_EOBIE_Pos: u32 = 27;
pub const USART_CR1_EOBIE_Msk: u32 = 134217728;
pub const USART_CR1_EOBIE: u32 = 134217728;
pub const USART_CR2_ADDM7_Pos: u32 = 4;
pub const USART_CR2_ADDM7_Msk: u32 = 16;
pub const USART_CR2_ADDM7: u32 = 16;
pub const USART_CR2_LBDL_Pos: u32 = 5;
pub const USART_CR2_LBDL_Msk: u32 = 32;
pub const USART_CR2_LBDL: u32 = 32;
pub const USART_CR2_LBDIE_Pos: u32 = 6;
pub const USART_CR2_LBDIE_Msk: u32 = 64;
pub const USART_CR2_LBDIE: u32 = 64;
pub const USART_CR2_LBCL_Pos: u32 = 8;
pub const USART_CR2_LBCL_Msk: u32 = 256;
pub const USART_CR2_LBCL: u32 = 256;
pub const USART_CR2_CPHA_Pos: u32 = 9;
pub const USART_CR2_CPHA_Msk: u32 = 512;
pub const USART_CR2_CPHA: u32 = 512;
pub const USART_CR2_CPOL_Pos: u32 = 10;
pub const USART_CR2_CPOL_Msk: u32 = 1024;
pub const USART_CR2_CPOL: u32 = 1024;
pub const USART_CR2_CLKEN_Pos: u32 = 11;
pub const USART_CR2_CLKEN_Msk: u32 = 2048;
pub const USART_CR2_CLKEN: u32 = 2048;
pub const USART_CR2_STOP_Pos: u32 = 12;
pub const USART_CR2_STOP_Msk: u32 = 12288;
pub const USART_CR2_STOP: u32 = 12288;
pub const USART_CR2_STOP_0: u32 = 4096;
pub const USART_CR2_STOP_1: u32 = 8192;
pub const USART_CR2_LINEN_Pos: u32 = 14;
pub const USART_CR2_LINEN_Msk: u32 = 16384;
pub const USART_CR2_LINEN: u32 = 16384;
pub const USART_CR2_SWAP_Pos: u32 = 15;
pub const USART_CR2_SWAP_Msk: u32 = 32768;
pub const USART_CR2_SWAP: u32 = 32768;
pub const USART_CR2_RXINV_Pos: u32 = 16;
pub const USART_CR2_RXINV_Msk: u32 = 65536;
pub const USART_CR2_RXINV: u32 = 65536;
pub const USART_CR2_TXINV_Pos: u32 = 17;
pub const USART_CR2_TXINV_Msk: u32 = 131072;
pub const USART_CR2_TXINV: u32 = 131072;
pub const USART_CR2_DATAINV_Pos: u32 = 18;
pub const USART_CR2_DATAINV_Msk: u32 = 262144;
pub const USART_CR2_DATAINV: u32 = 262144;
pub const USART_CR2_MSBFIRST_Pos: u32 = 19;
pub const USART_CR2_MSBFIRST_Msk: u32 = 524288;
pub const USART_CR2_MSBFIRST: u32 = 524288;
pub const USART_CR2_ABREN_Pos: u32 = 20;
pub const USART_CR2_ABREN_Msk: u32 = 1048576;
pub const USART_CR2_ABREN: u32 = 1048576;
pub const USART_CR2_ABRMODE_Pos: u32 = 21;
pub const USART_CR2_ABRMODE_Msk: u32 = 6291456;
pub const USART_CR2_ABRMODE: u32 = 6291456;
pub const USART_CR2_ABRMODE_0: u32 = 2097152;
pub const USART_CR2_ABRMODE_1: u32 = 4194304;
pub const USART_CR2_RTOEN_Pos: u32 = 23;
pub const USART_CR2_RTOEN_Msk: u32 = 8388608;
pub const USART_CR2_RTOEN: u32 = 8388608;
pub const USART_CR2_ADD_Pos: u32 = 24;
pub const USART_CR2_ADD_Msk: u32 = 4278190080;
pub const USART_CR2_ADD: u32 = 4278190080;
pub const USART_CR3_EIE_Pos: u32 = 0;
pub const USART_CR3_EIE_Msk: u32 = 1;
pub const USART_CR3_EIE: u32 = 1;
pub const USART_CR3_IREN_Pos: u32 = 1;
pub const USART_CR3_IREN_Msk: u32 = 2;
pub const USART_CR3_IREN: u32 = 2;
pub const USART_CR3_IRLP_Pos: u32 = 2;
pub const USART_CR3_IRLP_Msk: u32 = 4;
pub const USART_CR3_IRLP: u32 = 4;
pub const USART_CR3_HDSEL_Pos: u32 = 3;
pub const USART_CR3_HDSEL_Msk: u32 = 8;
pub const USART_CR3_HDSEL: u32 = 8;
pub const USART_CR3_NACK_Pos: u32 = 4;
pub const USART_CR3_NACK_Msk: u32 = 16;
pub const USART_CR3_NACK: u32 = 16;
pub const USART_CR3_SCEN_Pos: u32 = 5;
pub const USART_CR3_SCEN_Msk: u32 = 32;
pub const USART_CR3_SCEN: u32 = 32;
pub const USART_CR3_DMAR_Pos: u32 = 6;
pub const USART_CR3_DMAR_Msk: u32 = 64;
pub const USART_CR3_DMAR: u32 = 64;
pub const USART_CR3_DMAT_Pos: u32 = 7;
pub const USART_CR3_DMAT_Msk: u32 = 128;
pub const USART_CR3_DMAT: u32 = 128;
pub const USART_CR3_RTSE_Pos: u32 = 8;
pub const USART_CR3_RTSE_Msk: u32 = 256;
pub const USART_CR3_RTSE: u32 = 256;
pub const USART_CR3_CTSE_Pos: u32 = 9;
pub const USART_CR3_CTSE_Msk: u32 = 512;
pub const USART_CR3_CTSE: u32 = 512;
pub const USART_CR3_CTSIE_Pos: u32 = 10;
pub const USART_CR3_CTSIE_Msk: u32 = 1024;
pub const USART_CR3_CTSIE: u32 = 1024;
pub const USART_CR3_ONEBIT_Pos: u32 = 11;
pub const USART_CR3_ONEBIT_Msk: u32 = 2048;
pub const USART_CR3_ONEBIT: u32 = 2048;
pub const USART_CR3_OVRDIS_Pos: u32 = 12;
pub const USART_CR3_OVRDIS_Msk: u32 = 4096;
pub const USART_CR3_OVRDIS: u32 = 4096;
pub const USART_CR3_DDRE_Pos: u32 = 13;
pub const USART_CR3_DDRE_Msk: u32 = 8192;
pub const USART_CR3_DDRE: u32 = 8192;
pub const USART_CR3_DEM_Pos: u32 = 14;
pub const USART_CR3_DEM_Msk: u32 = 16384;
pub const USART_CR3_DEM: u32 = 16384;
pub const USART_CR3_DEP_Pos: u32 = 15;
pub const USART_CR3_DEP_Msk: u32 = 32768;
pub const USART_CR3_DEP: u32 = 32768;
pub const USART_CR3_SCARCNT_Pos: u32 = 17;
pub const USART_CR3_SCARCNT_Msk: u32 = 917504;
pub const USART_CR3_SCARCNT: u32 = 917504;
pub const USART_CR3_SCARCNT_0: u32 = 131072;
pub const USART_CR3_SCARCNT_1: u32 = 262144;
pub const USART_CR3_SCARCNT_2: u32 = 524288;
pub const USART_CR3_WUS_Pos: u32 = 20;
pub const USART_CR3_WUS_Msk: u32 = 3145728;
pub const USART_CR3_WUS: u32 = 3145728;
pub const USART_CR3_WUS_0: u32 = 1048576;
pub const USART_CR3_WUS_1: u32 = 2097152;
pub const USART_CR3_WUFIE_Pos: u32 = 22;
pub const USART_CR3_WUFIE_Msk: u32 = 4194304;
pub const USART_CR3_WUFIE: u32 = 4194304;
pub const USART_BRR_DIV_FRACTION_Pos: u32 = 0;
pub const USART_BRR_DIV_FRACTION_Msk: u32 = 15;
pub const USART_BRR_DIV_FRACTION: u32 = 15;
pub const USART_BRR_DIV_MANTISSA_Pos: u32 = 4;
pub const USART_BRR_DIV_MANTISSA_Msk: u32 = 65520;
pub const USART_BRR_DIV_MANTISSA: u32 = 65520;
pub const USART_GTPR_PSC_Pos: u32 = 0;
pub const USART_GTPR_PSC_Msk: u32 = 255;
pub const USART_GTPR_PSC: u32 = 255;
pub const USART_GTPR_GT_Pos: u32 = 8;
pub const USART_GTPR_GT_Msk: u32 = 65280;
pub const USART_GTPR_GT: u32 = 65280;
pub const USART_RTOR_RTO_Pos: u32 = 0;
pub const USART_RTOR_RTO_Msk: u32 = 16777215;
pub const USART_RTOR_RTO: u32 = 16777215;
pub const USART_RTOR_BLEN_Pos: u32 = 24;
pub const USART_RTOR_BLEN_Msk: u32 = 4278190080;
pub const USART_RTOR_BLEN: u32 = 4278190080;
pub const USART_RQR_ABRRQ_Pos: u32 = 0;
pub const USART_RQR_ABRRQ_Msk: u32 = 1;
pub const USART_RQR_ABRRQ: u32 = 1;
pub const USART_RQR_SBKRQ_Pos: u32 = 1;
pub const USART_RQR_SBKRQ_Msk: u32 = 2;
pub const USART_RQR_SBKRQ: u32 = 2;
pub const USART_RQR_MMRQ_Pos: u32 = 2;
pub const USART_RQR_MMRQ_Msk: u32 = 4;
pub const USART_RQR_MMRQ: u32 = 4;
pub const USART_RQR_RXFRQ_Pos: u32 = 3;
pub const USART_RQR_RXFRQ_Msk: u32 = 8;
pub const USART_RQR_RXFRQ: u32 = 8;
pub const USART_RQR_TXFRQ_Pos: u32 = 4;
pub const USART_RQR_TXFRQ_Msk: u32 = 16;
pub const USART_RQR_TXFRQ: u32 = 16;
pub const USART_ISR_PE_Pos: u32 = 0;
pub const USART_ISR_PE_Msk: u32 = 1;
pub const USART_ISR_PE: u32 = 1;
pub const USART_ISR_FE_Pos: u32 = 1;
pub const USART_ISR_FE_Msk: u32 = 2;
pub const USART_ISR_FE: u32 = 2;
pub const USART_ISR_NE_Pos: u32 = 2;
pub const USART_ISR_NE_Msk: u32 = 4;
pub const USART_ISR_NE: u32 = 4;
pub const USART_ISR_ORE_Pos: u32 = 3;
pub const USART_ISR_ORE_Msk: u32 = 8;
pub const USART_ISR_ORE: u32 = 8;
pub const USART_ISR_IDLE_Pos: u32 = 4;
pub const USART_ISR_IDLE_Msk: u32 = 16;
pub const USART_ISR_IDLE: u32 = 16;
pub const USART_ISR_RXNE_Pos: u32 = 5;
pub const USART_ISR_RXNE_Msk: u32 = 32;
pub const USART_ISR_RXNE: u32 = 32;
pub const USART_ISR_TC_Pos: u32 = 6;
pub const USART_ISR_TC_Msk: u32 = 64;
pub const USART_ISR_TC: u32 = 64;
pub const USART_ISR_TXE_Pos: u32 = 7;
pub const USART_ISR_TXE_Msk: u32 = 128;
pub const USART_ISR_TXE: u32 = 128;
pub const USART_ISR_LBDF_Pos: u32 = 8;
pub const USART_ISR_LBDF_Msk: u32 = 256;
pub const USART_ISR_LBDF: u32 = 256;
pub const USART_ISR_CTSIF_Pos: u32 = 9;
pub const USART_ISR_CTSIF_Msk: u32 = 512;
pub const USART_ISR_CTSIF: u32 = 512;
pub const USART_ISR_CTS_Pos: u32 = 10;
pub const USART_ISR_CTS_Msk: u32 = 1024;
pub const USART_ISR_CTS: u32 = 1024;
pub const USART_ISR_RTOF_Pos: u32 = 11;
pub const USART_ISR_RTOF_Msk: u32 = 2048;
pub const USART_ISR_RTOF: u32 = 2048;
pub const USART_ISR_EOBF_Pos: u32 = 12;
pub const USART_ISR_EOBF_Msk: u32 = 4096;
pub const USART_ISR_EOBF: u32 = 4096;
pub const USART_ISR_ABRE_Pos: u32 = 14;
pub const USART_ISR_ABRE_Msk: u32 = 16384;
pub const USART_ISR_ABRE: u32 = 16384;
pub const USART_ISR_ABRF_Pos: u32 = 15;
pub const USART_ISR_ABRF_Msk: u32 = 32768;
pub const USART_ISR_ABRF: u32 = 32768;
pub const USART_ISR_BUSY_Pos: u32 = 16;
pub const USART_ISR_BUSY_Msk: u32 = 65536;
pub const USART_ISR_BUSY: u32 = 65536;
pub const USART_ISR_CMF_Pos: u32 = 17;
pub const USART_ISR_CMF_Msk: u32 = 131072;
pub const USART_ISR_CMF: u32 = 131072;
pub const USART_ISR_SBKF_Pos: u32 = 18;
pub const USART_ISR_SBKF_Msk: u32 = 262144;
pub const USART_ISR_SBKF: u32 = 262144;
pub const USART_ISR_RWU_Pos: u32 = 19;
pub const USART_ISR_RWU_Msk: u32 = 524288;
pub const USART_ISR_RWU: u32 = 524288;
pub const USART_ISR_WUF_Pos: u32 = 20;
pub const USART_ISR_WUF_Msk: u32 = 1048576;
pub const USART_ISR_WUF: u32 = 1048576;
pub const USART_ISR_TEACK_Pos: u32 = 21;
pub const USART_ISR_TEACK_Msk: u32 = 2097152;
pub const USART_ISR_TEACK: u32 = 2097152;
pub const USART_ISR_REACK_Pos: u32 = 22;
pub const USART_ISR_REACK_Msk: u32 = 4194304;
pub const USART_ISR_REACK: u32 = 4194304;
pub const USART_ICR_PECF_Pos: u32 = 0;
pub const USART_ICR_PECF_Msk: u32 = 1;
pub const USART_ICR_PECF: u32 = 1;
pub const USART_ICR_FECF_Pos: u32 = 1;
pub const USART_ICR_FECF_Msk: u32 = 2;
pub const USART_ICR_FECF: u32 = 2;
pub const USART_ICR_NCF_Pos: u32 = 2;
pub const USART_ICR_NCF_Msk: u32 = 4;
pub const USART_ICR_NCF: u32 = 4;
pub const USART_ICR_ORECF_Pos: u32 = 3;
pub const USART_ICR_ORECF_Msk: u32 = 8;
pub const USART_ICR_ORECF: u32 = 8;
pub const USART_ICR_IDLECF_Pos: u32 = 4;
pub const USART_ICR_IDLECF_Msk: u32 = 16;
pub const USART_ICR_IDLECF: u32 = 16;
pub const USART_ICR_TCCF_Pos: u32 = 6;
pub const USART_ICR_TCCF_Msk: u32 = 64;
pub const USART_ICR_TCCF: u32 = 64;
pub const USART_ICR_LBDCF_Pos: u32 = 8;
pub const USART_ICR_LBDCF_Msk: u32 = 256;
pub const USART_ICR_LBDCF: u32 = 256;
pub const USART_ICR_CTSCF_Pos: u32 = 9;
pub const USART_ICR_CTSCF_Msk: u32 = 512;
pub const USART_ICR_CTSCF: u32 = 512;
pub const USART_ICR_RTOCF_Pos: u32 = 11;
pub const USART_ICR_RTOCF_Msk: u32 = 2048;
pub const USART_ICR_RTOCF: u32 = 2048;
pub const USART_ICR_EOBCF_Pos: u32 = 12;
pub const USART_ICR_EOBCF_Msk: u32 = 4096;
pub const USART_ICR_EOBCF: u32 = 4096;
pub const USART_ICR_CMCF_Pos: u32 = 17;
pub const USART_ICR_CMCF_Msk: u32 = 131072;
pub const USART_ICR_CMCF: u32 = 131072;
pub const USART_ICR_WUCF_Pos: u32 = 20;
pub const USART_ICR_WUCF_Msk: u32 = 1048576;
pub const USART_ICR_WUCF: u32 = 1048576;
pub const USART_RDR_RDR_Pos: u32 = 0;
pub const USART_RDR_RDR_Msk: u32 = 511;
pub const USART_RDR_RDR: u32 = 511;
pub const USART_TDR_TDR_Pos: u32 = 0;
pub const USART_TDR_TDR_Msk: u32 = 511;
pub const USART_TDR_TDR: u32 = 511;
pub const USB_CNTR: u32 = 1073765440;
pub const USB_ISTR: u32 = 1073765444;
pub const USB_FNR: u32 = 1073765448;
pub const USB_DADDR: u32 = 1073765452;
pub const USB_BTABLE: u32 = 1073765456;
pub const USB_EP0R: u32 = 1073765376;
pub const USB_EP1R: u32 = 1073765380;
pub const USB_EP2R: u32 = 1073765384;
pub const USB_EP3R: u32 = 1073765388;
pub const USB_EP4R: u32 = 1073765392;
pub const USB_EP5R: u32 = 1073765396;
pub const USB_EP6R: u32 = 1073765400;
pub const USB_EP7R: u32 = 1073765404;
pub const WWDG_CR_T_Pos: u32 = 0;
pub const WWDG_CR_T_Msk: u32 = 127;
pub const WWDG_CR_T: u32 = 127;
pub const WWDG_CR_T_0: u32 = 1;
pub const WWDG_CR_T_1: u32 = 2;
pub const WWDG_CR_T_2: u32 = 4;
pub const WWDG_CR_T_3: u32 = 8;
pub const WWDG_CR_T_4: u32 = 16;
pub const WWDG_CR_T_5: u32 = 32;
pub const WWDG_CR_T_6: u32 = 64;
pub const WWDG_CR_T0: u32 = 1;
pub const WWDG_CR_T1: u32 = 2;
pub const WWDG_CR_T2: u32 = 4;
pub const WWDG_CR_T3: u32 = 8;
pub const WWDG_CR_T4: u32 = 16;
pub const WWDG_CR_T5: u32 = 32;
pub const WWDG_CR_T6: u32 = 64;
pub const WWDG_CR_WDGA_Pos: u32 = 7;
pub const WWDG_CR_WDGA_Msk: u32 = 128;
pub const WWDG_CR_WDGA: u32 = 128;
pub const WWDG_CFR_W_Pos: u32 = 0;
pub const WWDG_CFR_W_Msk: u32 = 127;
pub const WWDG_CFR_W: u32 = 127;
pub const WWDG_CFR_W_0: u32 = 1;
pub const WWDG_CFR_W_1: u32 = 2;
pub const WWDG_CFR_W_2: u32 = 4;
pub const WWDG_CFR_W_3: u32 = 8;
pub const WWDG_CFR_W_4: u32 = 16;
pub const WWDG_CFR_W_5: u32 = 32;
pub const WWDG_CFR_W_6: u32 = 64;
pub const WWDG_CFR_W0: u32 = 1;
pub const WWDG_CFR_W1: u32 = 2;
pub const WWDG_CFR_W2: u32 = 4;
pub const WWDG_CFR_W3: u32 = 8;
pub const WWDG_CFR_W4: u32 = 16;
pub const WWDG_CFR_W5: u32 = 32;
pub const WWDG_CFR_W6: u32 = 64;
pub const WWDG_CFR_WDGTB_Pos: u32 = 7;
pub const WWDG_CFR_WDGTB_Msk: u32 = 384;
pub const WWDG_CFR_WDGTB: u32 = 384;
pub const WWDG_CFR_WDGTB_0: u32 = 128;
pub const WWDG_CFR_WDGTB_1: u32 = 256;
pub const WWDG_CFR_WDGTB0: u32 = 128;
pub const WWDG_CFR_WDGTB1: u32 = 256;
pub const WWDG_CFR_EWI_Pos: u32 = 9;
pub const WWDG_CFR_EWI_Msk: u32 = 512;
pub const WWDG_CFR_EWI: u32 = 512;
pub const WWDG_SR_EWIF_Pos: u32 = 0;
pub const WWDG_SR_EWIF_Msk: u32 = 1;
pub const WWDG_SR_EWIF: u32 = 1;
pub const HAL_MAX_DELAY: u32 = 4294967295;
pub const GPIO_PIN_MASK: u32 = 65535;
pub const GPIO_MODE_INPUT: u32 = 0;
pub const GPIO_MODE_OUTPUT_PP: u32 = 1;
pub const GPIO_MODE_OUTPUT_OD: u32 = 17;
pub const GPIO_MODE_AF_PP: u32 = 2;
pub const GPIO_MODE_AF_OD: u32 = 18;
pub const GPIO_MODE_ANALOG: u32 = 3;
pub const GPIO_MODE_IT_RISING: u32 = 269549568;
pub const GPIO_MODE_IT_FALLING: u32 = 270598144;
pub const GPIO_MODE_IT_RISING_FALLING: u32 = 271646720;
pub const GPIO_MODE_EVT_RISING: u32 = 269615104;
pub const GPIO_MODE_EVT_FALLING: u32 = 270663680;
pub const GPIO_MODE_EVT_RISING_FALLING: u32 = 271712256;
pub const GPIO_SPEED_FREQ_LOW: u32 = 0;
pub const GPIO_SPEED_FREQ_MEDIUM: u32 = 1;
pub const GPIO_SPEED_FREQ_HIGH: u32 = 3;
pub const GPIO_NOPULL: u32 = 0;
pub const GPIO_PULLUP: u32 = 1;
pub const GPIO_PULLDOWN: u32 = 2;
#[doc = "< 2 Non Maskable Interrupt"]
pub const IRQn_Type_NonMaskableInt_IRQn: IRQn_Type = -14;
#[doc = "< 3 Cortex-M4 Hard Fault Interrupt"]
pub const IRQn_Type_HardFault_IRQn: IRQn_Type = -13;
#[doc = "< 4 Cortex-M4 Memory Management Interrupt"]
pub const IRQn_Type_MemoryManagement_IRQn: IRQn_Type = -12;
#[doc = "< 5 Cortex-M4 Bus Fault Interrupt"]
pub const IRQn_Type_BusFault_IRQn: IRQn_Type = -11;
#[doc = "< 6 Cortex-M4 Usage Fault Interrupt"]
pub const IRQn_Type_UsageFault_IRQn: IRQn_Type = -10;
#[doc = "< 11 Cortex-M4 SV Call Interrupt"]
pub const IRQn_Type_SVCall_IRQn: IRQn_Type = -5;
#[doc = "< 12 Cortex-M4 Debug Monitor Interrupt"]
pub const IRQn_Type_DebugMonitor_IRQn: IRQn_Type = -4;
#[doc = "< 14 Cortex-M4 Pend SV Interrupt"]
pub const IRQn_Type_PendSV_IRQn: IRQn_Type = -2;
#[doc = "< 15 Cortex-M4 System Tick Interrupt"]
pub const IRQn_Type_SysTick_IRQn: IRQn_Type = -1;
#[doc = "< Window WatchDog Interrupt"]
pub const IRQn_Type_WWDG_IRQn: IRQn_Type = 0;
#[doc = "< PVD through EXTI Line detection Interrupt"]
pub const IRQn_Type_PVD_IRQn: IRQn_Type = 1;
#[doc = "< Tamper and TimeStamp interrupts through the EXTI line 19"]
pub const IRQn_Type_TAMP_STAMP_IRQn: IRQn_Type = 2;
#[doc = "< RTC Wakeup interrupt through the EXTI line 20"]
pub const IRQn_Type_RTC_WKUP_IRQn: IRQn_Type = 3;
#[doc = "< FLASH global Interrupt"]
pub const IRQn_Type_FLASH_IRQn: IRQn_Type = 4;
#[doc = "< RCC global Interrupt"]
pub const IRQn_Type_RCC_IRQn: IRQn_Type = 5;
#[doc = "< EXTI Line0 Interrupt"]
pub const IRQn_Type_EXTI0_IRQn: IRQn_Type = 6;
#[doc = "< EXTI Line1 Interrupt"]
pub const IRQn_Type_EXTI1_IRQn: IRQn_Type = 7;
#[doc = "< EXTI Line2 Interrupt and Touch Sense Controller Interrupt"]
pub const IRQn_Type_EXTI2_TSC_IRQn: IRQn_Type = 8;
#[doc = "< EXTI Line3 Interrupt"]
pub const IRQn_Type_EXTI3_IRQn: IRQn_Type = 9;
#[doc = "< EXTI Line4 Interrupt"]
pub const IRQn_Type_EXTI4_IRQn: IRQn_Type = 10;
#[doc = "< DMA1 Channel 1 Interrupt"]
pub const IRQn_Type_DMA1_Channel1_IRQn: IRQn_Type = 11;
#[doc = "< DMA1 Channel 2 Interrupt"]
pub const IRQn_Type_DMA1_Channel2_IRQn: IRQn_Type = 12;
#[doc = "< DMA1 Channel 3 Interrupt"]
pub const IRQn_Type_DMA1_Channel3_IRQn: IRQn_Type = 13;
#[doc = "< DMA1 Channel 4 Interrupt"]
pub const IRQn_Type_DMA1_Channel4_IRQn: IRQn_Type = 14;
#[doc = "< DMA1 Channel 5 Interrupt"]
pub const IRQn_Type_DMA1_Channel5_IRQn: IRQn_Type = 15;
#[doc = "< DMA1 Channel 6 Interrupt"]
pub const IRQn_Type_DMA1_Channel6_IRQn: IRQn_Type = 16;
#[doc = "< DMA1 Channel 7 Interrupt"]
pub const IRQn_Type_DMA1_Channel7_IRQn: IRQn_Type = 17;
#[doc = "< ADC1 & ADC2 Interrupts"]
pub const IRQn_Type_ADC1_2_IRQn: IRQn_Type = 18;
#[doc = "< USB Device High Priority or CAN TX Interrupts"]
pub const IRQn_Type_USB_HP_CAN_TX_IRQn: IRQn_Type = 19;
#[doc = "< USB Device Low Priority or CAN RX0 Interrupts"]
pub const IRQn_Type_USB_LP_CAN_RX0_IRQn: IRQn_Type = 20;
#[doc = "< CAN RX1 Interrupt"]
pub const IRQn_Type_CAN_RX1_IRQn: IRQn_Type = 21;
#[doc = "< CAN SCE Interrupt"]
pub const IRQn_Type_CAN_SCE_IRQn: IRQn_Type = 22;
#[doc = "< External Line[9:5] Interrupts"]
pub const IRQn_Type_EXTI9_5_IRQn: IRQn_Type = 23;
#[doc = "< TIM1 Break and TIM15 Interrupts"]
pub const IRQn_Type_TIM1_BRK_TIM15_IRQn: IRQn_Type = 24;
#[doc = "< TIM1 Update and TIM16 Interrupts"]
pub const IRQn_Type_TIM1_UP_TIM16_IRQn: IRQn_Type = 25;
#[doc = "< TIM1 Trigger and Commutation and TIM17 Interrupt"]
pub const IRQn_Type_TIM1_TRG_COM_TIM17_IRQn: IRQn_Type = 26;
#[doc = "< TIM1 Capture Compare Interrupt"]
pub const IRQn_Type_TIM1_CC_IRQn: IRQn_Type = 27;
#[doc = "< TIM2 global Interrupt"]
pub const IRQn_Type_TIM2_IRQn: IRQn_Type = 28;
#[doc = "< TIM3 global Interrupt"]
pub const IRQn_Type_TIM3_IRQn: IRQn_Type = 29;
#[doc = "< TIM4 global Interrupt"]
pub const IRQn_Type_TIM4_IRQn: IRQn_Type = 30;
#[doc = "< I2C1 Event Interrupt & EXTI Line23 Interrupt (I2C1 wakeup)"]
pub const IRQn_Type_I2C1_EV_IRQn: IRQn_Type = 31;
#[doc = "< I2C1 Error Interrupt"]
pub const IRQn_Type_I2C1_ER_IRQn: IRQn_Type = 32;
#[doc = "< I2C2 Event Interrupt & EXTI Line24 Interrupt (I2C2 wakeup)"]
pub const IRQn_Type_I2C2_EV_IRQn: IRQn_Type = 33;
#[doc = "< I2C2 Error Interrupt"]
pub const IRQn_Type_I2C2_ER_IRQn: IRQn_Type = 34;
#[doc = "< SPI1 global Interrupt"]
pub const IRQn_Type_SPI1_IRQn: IRQn_Type = 35;
#[doc = "< SPI2 global Interrupt"]
pub const IRQn_Type_SPI2_IRQn: IRQn_Type = 36;
#[doc = "< USART1 global Interrupt & EXTI Line25 Interrupt (USART1 wakeup)"]
pub const IRQn_Type_USART1_IRQn: IRQn_Type = 37;
#[doc = "< USART2 global Interrupt & EXTI Line26 Interrupt (USART2 wakeup)"]
pub const IRQn_Type_USART2_IRQn: IRQn_Type = 38;
#[doc = "< USART3 global Interrupt & EXTI Line28 Interrupt (USART3 wakeup)"]
pub const IRQn_Type_USART3_IRQn: IRQn_Type = 39;
#[doc = "< External Line[15:10] Interrupts"]
pub const IRQn_Type_EXTI15_10_IRQn: IRQn_Type = 40;
#[doc = "< RTC Alarm (A and B) through EXTI Line 17 Interrupt"]
pub const IRQn_Type_RTC_Alarm_IRQn: IRQn_Type = 41;
#[doc = "< USB Wakeup Interrupt"]
pub const IRQn_Type_USBWakeUp_IRQn: IRQn_Type = 42;
#[doc = "< TIM8 Break Interrupt"]
pub const IRQn_Type_TIM8_BRK_IRQn: IRQn_Type = 43;
#[doc = "< TIM8 Update Interrupt"]
pub const IRQn_Type_TIM8_UP_IRQn: IRQn_Type = 44;
#[doc = "< TIM8 Trigger and Commutation Interrupt"]
pub const IRQn_Type_TIM8_TRG_COM_IRQn: IRQn_Type = 45;
#[doc = "< TIM8 Capture Compare Interrupt"]
pub const IRQn_Type_TIM8_CC_IRQn: IRQn_Type = 46;
#[doc = "< ADC3 global Interrupt"]
pub const IRQn_Type_ADC3_IRQn: IRQn_Type = 47;
#[doc = "< SPI3 global Interrupt"]
pub const IRQn_Type_SPI3_IRQn: IRQn_Type = 51;
#[doc = "< UART4 global Interrupt & EXTI Line34 Interrupt (UART4 wakeup)"]
pub const IRQn_Type_UART4_IRQn: IRQn_Type = 52;
#[doc = "< UART5 global Interrupt & EXTI Line35 Interrupt (UART5 wakeup)"]
pub const IRQn_Type_UART5_IRQn: IRQn_Type = 53;
#[doc = "< TIM6 global and DAC underrun error Interrupt"]
pub const IRQn_Type_TIM6_DAC_IRQn: IRQn_Type = 54;
#[doc = "< TIM7 global Interrupt"]
pub const IRQn_Type_TIM7_IRQn: IRQn_Type = 55;
#[doc = "< DMA2 Channel 1 global Interrupt"]
pub const IRQn_Type_DMA2_Channel1_IRQn: IRQn_Type = 56;
#[doc = "< DMA2 Channel 2 global Interrupt"]
pub const IRQn_Type_DMA2_Channel2_IRQn: IRQn_Type = 57;
#[doc = "< DMA2 Channel 3 global Interrupt"]
pub const IRQn_Type_DMA2_Channel3_IRQn: IRQn_Type = 58;
#[doc = "< DMA2 Channel 4 global Interrupt"]
pub const IRQn_Type_DMA2_Channel4_IRQn: IRQn_Type = 59;
#[doc = "< DMA2 Channel 5 global Interrupt"]
pub const IRQn_Type_DMA2_Channel5_IRQn: IRQn_Type = 60;
#[doc = "< ADC4  global Interrupt"]
pub const IRQn_Type_ADC4_IRQn: IRQn_Type = 61;
#[doc = "< COMP1, COMP2 and COMP3 global Interrupt via EXTI Line21, 22 and 29"]
pub const IRQn_Type_COMP1_2_3_IRQn: IRQn_Type = 64;
#[doc = "< COMP4, COMP5 and COMP6 global Interrupt via EXTI Line30, 31 and 32"]
pub const IRQn_Type_COMP4_5_6_IRQn: IRQn_Type = 65;
#[doc = "< COMP7 global Interrupt via EXTI Line33"]
pub const IRQn_Type_COMP7_IRQn: IRQn_Type = 66;
#[doc = "< USB High Priority global Interrupt"]
pub const IRQn_Type_USB_HP_IRQn: IRQn_Type = 74;
#[doc = "< USB Low Priority global Interrupt"]
pub const IRQn_Type_USB_LP_IRQn: IRQn_Type = 75;
#[doc = "< USB Wakeup Interrupt remap"]
pub const IRQn_Type_USBWakeUp_RMP_IRQn: IRQn_Type = 76;
#[doc = "< Floating point Interrupt"]
pub const IRQn_Type_FPU_IRQn: IRQn_Type = 81;
#[doc = " @brief STM32F303xC devices Interrupt Number Definition, according to the selected device"]
#[doc = "        in @ref Library_configuration_section"]
pub type IRQn_Type = i32;
pub type __u_char = libc::c_uchar;
pub type __u_short = libc::c_ushort;
pub type __u_int = libc::c_uint;
pub type __u_long = libc::c_ulong;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = libc::c_long;
pub type __u_quad_t = libc::c_ulong;
pub type __intmax_t = libc::c_long;
pub type __uintmax_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __ino64_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __pid_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = libc::c_long;
pub type __rlim_t = libc::c_ulong;
pub type __rlim64_t = libc::c_ulong;
pub type __id_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __useconds_t = libc::c_uint;
pub type __suseconds_t = libc::c_long;
pub type __suseconds64_t = libc::c_long;
pub type __daddr_t = libc::c_int;
pub type __key_t = libc::c_int;
pub type __clockid_t = libc::c_int;
pub type __timer_t = *mut libc::c_void;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __blkcnt64_t = libc::c_long;
pub type __fsblkcnt_t = libc::c_ulong;
pub type __fsblkcnt64_t = libc::c_ulong;
pub type __fsfilcnt_t = libc::c_ulong;
pub type __fsfilcnt64_t = libc::c_ulong;
pub type __fsword_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type __syscall_ulong_t = libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut libc::c_char;
pub type __intptr_t = libc::c_long;
pub type __socklen_t = libc::c_uint;
pub type __sig_atomic_t = libc::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = libc::c_schar;
pub type int_fast16_t = libc::c_long;
pub type int_fast32_t = libc::c_long;
pub type int_fast64_t = libc::c_long;
pub type uint_fast8_t = libc::c_uchar;
pub type uint_fast16_t = libc::c_ulong;
pub type uint_fast32_t = libc::c_ulong;
pub type uint_fast64_t = libc::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32 {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32() {
    assert_eq!(
        ::core::mem::size_of::<T_UINT32>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<T_UINT32>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_WRITE {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_WRITE() {
    assert_eq!(
        ::core::mem::size_of::<T_UINT16_WRITE>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT16_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<T_UINT16_WRITE>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_READ {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_READ() {
    assert_eq!(
        ::core::mem::size_of::<T_UINT16_READ>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT16_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<T_UINT16_READ>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_READ),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_WRITE {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_WRITE() {
    assert_eq!(
        ::core::mem::size_of::<T_UINT32_WRITE>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<T_UINT32_WRITE>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_READ {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_READ() {
    assert_eq!(
        ::core::mem::size_of::<T_UINT32_READ>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<T_UINT32_READ>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_READ),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_APSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type__bindgen_ty_1))
    );
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 7u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_APSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<APSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<APSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<APSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_IPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type__bindgen_ty_1))
    );
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_IPSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IPSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IPSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_xPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type__bindgen_ty_1))
    );
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        ICI_IT_1: u32,
        GE: u32,
        _reserved1: u32,
        T: u32,
        ICI_IT_2: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let ICI_IT_1: u32 = unsafe { ::core::mem::transmute(ICI_IT_1) };
            ICI_IT_1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let ICI_IT_2: u32 = unsafe { ::core::mem::transmute(ICI_IT_2) };
            ICI_IT_2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_xPSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_CONTROL_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::core::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_CONTROL_Type() {
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CONTROL_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CONTROL_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NVIC_Type {
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    pub ICER: [u32; 8usize],
    pub RSERVED1: [u32; 24usize],
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    pub STIR: u32,
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    assert_eq!(
        ::core::mem::size_of::<NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(NVIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ISER as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ICER as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RSERVED1 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RSERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ISPR as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED2 as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ICPR as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED3 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).IABR as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED4 as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).IP as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED5 as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).STIR as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub VTOR: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub SHP: [u8; 12usize],
    pub SHCSR: u32,
    pub CFSR: u32,
    pub HFSR: u32,
    pub DFSR: u32,
    pub MMFAR: u32,
    pub BFAR: u32,
    pub AFSR: u32,
    pub PFR: [u32; 2usize],
    pub DFR: u32,
    pub ADR: u32,
    pub MMFR: [u32; 4usize],
    pub ISAR: [u32; 5usize],
    pub RESERVED0: [u32; 5usize],
    pub CPACR: u32,
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    assert_eq!(
        ::core::mem::size_of::<SCB_Type>(),
        140usize,
        concat!("Size of: ", stringify!(SCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCB_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CPUID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ICSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).VTOR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).AIRCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SCR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SHP as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SHCSR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CFSR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).HFSR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).DFSR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).MMFAR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).BFAR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).AFSR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).PFR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).DFR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ADR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).MMFR as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ISAR as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).RESERVED0 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CPACR as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPACR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 1usize],
    pub ICTR: u32,
    pub ACTLR: u32,
}
#[test]
fn bindgen_test_layout_SCnSCB_Type() {
    assert_eq!(
        ::core::mem::size_of::<SCnSCB_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCnSCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).RESERVED0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).ICTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).ACTLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ACTLR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    assert_eq!(
        ::core::mem::size_of::<SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SysTick_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SysTick_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).CTRL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).LOAD as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).VAL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).CALIB as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ITM_Type {
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    pub TCR: u32,
    pub RESERVED3: [u32; 29usize],
    pub IWR: u32,
    pub IRR: u32,
    pub IMCR: u32,
    pub RESERVED4: [u32; 43usize],
    pub LAR: u32,
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    pub PID4: u32,
    pub PID5: u32,
    pub PID6: u32,
    pub PID7: u32,
    pub PID0: u32,
    pub PID1: u32,
    pub PID2: u32,
    pub PID3: u32,
    pub CID0: u32,
    pub CID1: u32,
    pub CID2: u32,
    pub CID3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ITM_Type__bindgen_ty_1 {
    pub u8_: u8,
    pub u16_: u16,
    pub u32_: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_ITM_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u8_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u16_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
#[test]
fn bindgen_test_layout_ITM_Type() {
    assert_eq!(
        ::core::mem::size_of::<ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(ITM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PORT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED0 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TER as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED1 as *const _ as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TPR as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED2 as *const _ as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TCR as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED3 as *const _ as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IWR as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IWR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IRR as *const _ as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IMCR as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IMCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED4 as *const _ as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).LAR as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).LSR as *const _ as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED5 as *const _ as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID4 as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID5 as *const _ as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID6 as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID7 as *const _ as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID0 as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID1 as *const _ as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID2 as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID3 as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID0 as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID1 as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID2 as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID3 as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DWT_Type {
    pub CTRL: u32,
    pub CYCCNT: u32,
    pub CPICNT: u32,
    pub EXCCNT: u32,
    pub SLEEPCNT: u32,
    pub LSUCNT: u32,
    pub FOLDCNT: u32,
    pub PCSR: u32,
    pub COMP0: u32,
    pub MASK0: u32,
    pub FUNCTION0: u32,
    pub RESERVED0: [u32; 1usize],
    pub COMP1: u32,
    pub MASK1: u32,
    pub FUNCTION1: u32,
    pub RESERVED1: [u32; 1usize],
    pub COMP2: u32,
    pub MASK2: u32,
    pub FUNCTION2: u32,
    pub RESERVED2: [u32; 1usize],
    pub COMP3: u32,
    pub MASK3: u32,
    pub FUNCTION3: u32,
}
#[test]
fn bindgen_test_layout_DWT_Type() {
    assert_eq!(
        ::core::mem::size_of::<DWT_Type>(),
        92usize,
        concat!("Size of: ", stringify!(DWT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<DWT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(DWT_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CTRL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CYCCNT as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CYCCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CPICNT as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CPICNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).EXCCNT as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(EXCCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).SLEEPCNT as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(SLEEPCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).LSUCNT as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(LSUCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FOLDCNT as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FOLDCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).PCSR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(PCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION0 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED0 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK1 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK2 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED2 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP3 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK3 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION3 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TPI_Type {
    pub SSPSR: u32,
    pub CSPSR: u32,
    pub RESERVED0: [u32; 2usize],
    pub ACPR: u32,
    pub RESERVED1: [u32; 55usize],
    pub SPPR: u32,
    pub RESERVED2: [u32; 131usize],
    pub FFSR: u32,
    pub FFCR: u32,
    pub FSCR: u32,
    pub RESERVED3: [u32; 759usize],
    pub TRIGGER: u32,
    pub FIFO0: u32,
    pub ITATBCTR2: u32,
    pub RESERVED4: [u32; 1usize],
    pub ITATBCTR0: u32,
    pub FIFO1: u32,
    pub ITCTRL: u32,
    pub RESERVED5: [u32; 39usize],
    pub CLAIMSET: u32,
    pub CLAIMCLR: u32,
    pub RESERVED7: [u32; 8usize],
    pub DEVID: u32,
    pub DEVTYPE: u32,
}
#[test]
fn bindgen_test_layout_TPI_Type() {
    assert_eq!(
        ::core::mem::size_of::<TPI_Type>(),
        4048usize,
        concat!("Size of: ", stringify!(TPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TPI_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).SSPSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SSPSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CSPSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CSPSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ACPR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ACPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).SPPR as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SPPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED2 as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FFSR as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FFCR as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FSCR as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FSCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED3 as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).TRIGGER as *const _ as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(TRIGGER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FIFO0 as *const _ as usize },
        3820usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITATBCTR2 as *const _ as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED4 as *const _ as usize },
        3828usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITATBCTR0 as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FIFO1 as *const _ as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITCTRL as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITCTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED5 as *const _ as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CLAIMSET as *const _ as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMSET)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CLAIMCLR as *const _ as usize },
        4004usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMCLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED7 as *const _ as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).DEVID as *const _ as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).DEVTYPE as *const _ as usize },
        4044usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVTYPE)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPU_Type {
    pub TYPE: u32,
    pub CTRL: u32,
    pub RNR: u32,
    pub RBAR: u32,
    pub RASR: u32,
    pub RBAR_A1: u32,
    pub RASR_A1: u32,
    pub RBAR_A2: u32,
    pub RASR_A2: u32,
    pub RBAR_A3: u32,
    pub RASR_A3: u32,
}
#[test]
fn bindgen_test_layout_MPU_Type() {
    assert_eq!(
        ::core::mem::size_of::<MPU_Type>(),
        44usize,
        concat!("Size of: ", stringify!(MPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MPU_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).TYPE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(TYPE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).CTRL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RNR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RNR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A3 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPU_Type {
    pub RESERVED0: [u32; 1usize],
    pub FPCCR: u32,
    pub FPCAR: u32,
    pub FPDSCR: u32,
    pub MVFR0: u32,
    pub MVFR1: u32,
}
#[test]
fn bindgen_test_layout_FPU_Type() {
    assert_eq!(
        ::core::mem::size_of::<FPU_Type>(),
        24usize,
        concat!("Size of: ", stringify!(FPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FPU_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).RESERVED0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPCCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPCAR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPDSCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPDSCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).MVFR0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).MVFR1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoreDebug_Type {
    pub DHCSR: u32,
    pub DCRSR: u32,
    pub DCRDR: u32,
    pub DEMCR: u32,
}
#[test]
fn bindgen_test_layout_CoreDebug_Type() {
    assert_eq!(
        ::core::mem::size_of::<CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DHCSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DCRSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DCRDR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DEMCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARM_MPU_Region_t {
    pub RBAR: u32,
    pub RASR: u32,
}
#[test]
fn bindgen_test_layout_ARM_MPU_Region_t() {
    assert_eq!(
        ::core::mem::size_of::<ARM_MPU_Region_t>(),
        8usize,
        concat!("Size of: ", stringify!(ARM_MPU_Region_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ARM_MPU_Region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ARM_MPU_Region_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ARM_MPU_Region_t>())).RBAR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARM_MPU_Region_t),
            "::",
            stringify!(RBAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ARM_MPU_Region_t>())).RASR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ARM_MPU_Region_t),
            "::",
            stringify!(RASR)
        )
    );
}
extern "C" {
    pub static mut ITM_RxBuffer: i32;
}
extern "C" {
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    pub static AHBPrescTable: [u8; 16usize];
}
extern "C" {
    pub static APBPrescTable: [u8; 8usize];
}
extern "C" {
    #[doc = " @addtogroup STM32F3xx_System_Exported_Functions"]
    #[doc = " @{"]
    pub fn SystemInit();
}
extern "C" {
    pub fn SystemCoreClockUpdate();
}
#[doc = " @brief Analog to Digital Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_TypeDef {
    #[doc = "< ADC Interrupt and Status Register,                 Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< ADC Interrupt Enable Register,                     Address offset: 0x04"]
    pub IER: u32,
    #[doc = "< ADC control register,                              Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< ADC Configuration register,                        Address offset: 0x0C"]
    pub CFGR: u32,
    #[doc = "< Reserved, 0x010"]
    pub RESERVED0: u32,
    #[doc = "< ADC sample time register 1,                        Address offset: 0x14"]
    pub SMPR1: u32,
    #[doc = "< ADC sample time register 2,                        Address offset: 0x18"]
    pub SMPR2: u32,
    #[doc = "< Reserved, 0x01C"]
    pub RESERVED1: u32,
    #[doc = "< ADC watchdog threshold register 1,                 Address offset: 0x20"]
    pub TR1: u32,
    #[doc = "< ADC watchdog threshold register 2,                 Address offset: 0x24"]
    pub TR2: u32,
    #[doc = "< ADC watchdog threshold register 3,                 Address offset: 0x28"]
    pub TR3: u32,
    #[doc = "< Reserved, 0x02C"]
    pub RESERVED2: u32,
    #[doc = "< ADC regular sequence register 1,                   Address offset: 0x30"]
    pub SQR1: u32,
    #[doc = "< ADC regular sequence register 2,                   Address offset: 0x34"]
    pub SQR2: u32,
    #[doc = "< ADC regular sequence register 3,                   Address offset: 0x38"]
    pub SQR3: u32,
    #[doc = "< ADC regular sequence register 4,                   Address offset: 0x3C"]
    pub SQR4: u32,
    #[doc = "< ADC regular data register,                         Address offset: 0x40"]
    pub DR: u32,
    #[doc = "< Reserved, 0x044"]
    pub RESERVED3: u32,
    #[doc = "< Reserved, 0x048"]
    pub RESERVED4: u32,
    #[doc = "< ADC injected sequence register,                    Address offset: 0x4C"]
    pub JSQR: u32,
    #[doc = "< Reserved, 0x050 - 0x05C"]
    pub RESERVED5: [u32; 4usize],
    #[doc = "< ADC offset register 1,                             Address offset: 0x60"]
    pub OFR1: u32,
    #[doc = "< ADC offset register 2,                             Address offset: 0x64"]
    pub OFR2: u32,
    #[doc = "< ADC offset register 3,                             Address offset: 0x68"]
    pub OFR3: u32,
    #[doc = "< ADC offset register 4,                             Address offset: 0x6C"]
    pub OFR4: u32,
    #[doc = "< Reserved, 0x070 - 0x07C"]
    pub RESERVED6: [u32; 4usize],
    #[doc = "< ADC injected data register 1,                      Address offset: 0x80"]
    pub JDR1: u32,
    #[doc = "< ADC injected data register 2,                      Address offset: 0x84"]
    pub JDR2: u32,
    #[doc = "< ADC injected data register 3,                      Address offset: 0x88"]
    pub JDR3: u32,
    #[doc = "< ADC injected data register 4,                      Address offset: 0x8C"]
    pub JDR4: u32,
    #[doc = "< Reserved, 0x090 - 0x09C"]
    pub RESERVED7: [u32; 4usize],
    #[doc = "< ADC  Analog Watchdog 2 Configuration Register,     Address offset: 0xA0"]
    pub AWD2CR: u32,
    #[doc = "< ADC  Analog Watchdog 3 Configuration Register,     Address offset: 0xA4"]
    pub AWD3CR: u32,
    #[doc = "< Reserved, 0x0A8"]
    pub RESERVED8: u32,
    #[doc = "< Reserved, 0x0AC"]
    pub RESERVED9: u32,
    #[doc = "< ADC  Differential Mode Selection Register,         Address offset: 0xB0"]
    pub DIFSEL: u32,
    #[doc = "< ADC  Calibration Factors,                          Address offset: 0xB4"]
    pub CALFACT: u32,
}
#[test]
fn bindgen_test_layout_ADC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<ADC_TypeDef>(),
        184usize,
        concat!("Size of: ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).ISR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).IER as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).CR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).CFGR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SMPR1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SMPR2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).TR1 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(TR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).TR2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(TR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).TR3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(TR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED2 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR2 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR3 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR4 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).DR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED3 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED4 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JSQR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JSQR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED5 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).OFR1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).OFR2 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).OFR3 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).OFR4 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(OFR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED6 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR1 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR2 as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR3 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR4 as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED7 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).AWD2CR as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(AWD2CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).AWD3CR as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(AWD3CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED8 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).RESERVED9 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).DIFSEL as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DIFSEL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).CALFACT as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CALFACT)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_Common_TypeDef {
    #[doc = "< ADC Common status register,                  Address offset: ADC1/3 base address + 0x300"]
    pub CSR: u32,
    #[doc = "< Reserved, ADC1/3 base address + 0x304"]
    pub RESERVED: u32,
    #[doc = "< ADC common control register,                 Address offset: ADC1/3 base address + 0x308"]
    pub CCR: u32,
    #[doc = "< ADC common regular data register for dual"]
    #[doc = "AND triple modes,                            Address offset: ADC1/3 base address + 0x30C"]
    pub CDR: u32,
}
#[test]
fn bindgen_test_layout_ADC_Common_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<ADC_Common_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).RESERVED as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CCR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CDR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CDR)
        )
    );
}
#[doc = " @brief Controller Area Network TxMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_TxMailBox_TypeDef {
    #[doc = "< CAN TX mailbox identifier register"]
    pub TIR: u32,
    #[doc = "< CAN mailbox data length control and time stamp register"]
    pub TDTR: u32,
    #[doc = "< CAN mailbox data low register"]
    pub TDLR: u32,
    #[doc = "< CAN mailbox data high register"]
    pub TDHR: u32,
}
#[test]
fn bindgen_test_layout_CAN_TxMailBox_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CAN_TxMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_TxMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TxMailBox_TypeDef>())).TIR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TIR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TxMailBox_TypeDef>())).TDTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TxMailBox_TypeDef>())).TDLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TxMailBox_TypeDef>())).TDHR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDHR)
        )
    );
}
#[doc = " @brief Controller Area Network FIFOMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_FIFOMailBox_TypeDef {
    #[doc = "< CAN receive FIFO mailbox identifier register"]
    pub RIR: u32,
    #[doc = "< CAN receive FIFO mailbox data length control and time stamp register"]
    pub RDTR: u32,
    #[doc = "< CAN receive FIFO mailbox data low register"]
    pub RDLR: u32,
    #[doc = "< CAN receive FIFO mailbox data high register"]
    pub RDHR: u32,
}
#[test]
fn bindgen_test_layout_CAN_FIFOMailBox_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CAN_FIFOMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_FIFOMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FIFOMailBox_TypeDef>())).RIR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RIR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FIFOMailBox_TypeDef>())).RDTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FIFOMailBox_TypeDef>())).RDLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FIFOMailBox_TypeDef>())).RDHR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDHR)
        )
    );
}
#[doc = " @brief Controller Area Network FilterRegister"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_FilterRegister_TypeDef {
    #[doc = "< CAN Filter bank register 1"]
    pub FR1: u32,
    #[doc = "< CAN Filter bank register 1"]
    pub FR2: u32,
}
#[test]
fn bindgen_test_layout_CAN_FilterRegister_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CAN_FilterRegister_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(CAN_FilterRegister_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_FilterRegister_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_FilterRegister_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FilterRegister_TypeDef>())).FR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_FilterRegister_TypeDef>())).FR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR2)
        )
    );
}
#[doc = " @brief Controller Area Network"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CAN_TypeDef {
    #[doc = "< CAN master control register,         Address offset: 0x00"]
    pub MCR: u32,
    #[doc = "< CAN master status register,          Address offset: 0x04"]
    pub MSR: u32,
    #[doc = "< CAN transmit status register,        Address offset: 0x08"]
    pub TSR: u32,
    #[doc = "< CAN receive FIFO 0 register,         Address offset: 0x0C"]
    pub RF0R: u32,
    #[doc = "< CAN receive FIFO 1 register,         Address offset: 0x10"]
    pub RF1R: u32,
    #[doc = "< CAN interrupt enable register,       Address offset: 0x14"]
    pub IER: u32,
    #[doc = "< CAN error status register,           Address offset: 0x18"]
    pub ESR: u32,
    #[doc = "< CAN bit timing register,             Address offset: 0x1C"]
    pub BTR: u32,
    #[doc = "< Reserved, 0x020 - 0x17F"]
    pub RESERVED0: [u32; 88usize],
    #[doc = "< CAN Tx MailBox,                      Address offset: 0x180 - 0x1AC"]
    pub sTxMailBox: [CAN_TxMailBox_TypeDef; 3usize],
    #[doc = "< CAN FIFO MailBox,                    Address offset: 0x1B0 - 0x1CC"]
    pub sFIFOMailBox: [CAN_FIFOMailBox_TypeDef; 2usize],
    #[doc = "< Reserved, 0x1D0 - 0x1FF"]
    pub RESERVED1: [u32; 12usize],
    #[doc = "< CAN filter master register,          Address offset: 0x200"]
    pub FMR: u32,
    #[doc = "< CAN filter mode register,            Address offset: 0x204"]
    pub FM1R: u32,
    #[doc = "< Reserved, 0x208"]
    pub RESERVED2: u32,
    #[doc = "< CAN filter scale register,           Address offset: 0x20C"]
    pub FS1R: u32,
    #[doc = "< Reserved, 0x210"]
    pub RESERVED3: u32,
    #[doc = "< CAN filter FIFO assignment register, Address offset: 0x214"]
    pub FFA1R: u32,
    #[doc = "< Reserved, 0x218"]
    pub RESERVED4: u32,
    #[doc = "< CAN filter activation register,      Address offset: 0x21C"]
    pub FA1R: u32,
    #[doc = "< Reserved, 0x220-0x23F"]
    pub RESERVED5: [u32; 8usize],
    #[doc = "< CAN Filter Register,                 Address offset: 0x240-0x31C"]
    pub sFilterRegister: [CAN_FilterRegister_TypeDef; 28usize],
}
#[test]
fn bindgen_test_layout_CAN_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CAN_TypeDef>(),
        800usize,
        concat!("Size of: ", stringify!(CAN_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).MCR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).MSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(MSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).TSR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(TSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RF0R as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RF0R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RF1R as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RF1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).IER as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).ESR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(ESR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).BTR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(BTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).sTxMailBox as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sTxMailBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).sFIFOMailBox as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sFIFOMailBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED1 as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).FMR as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FMR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).FM1R as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FM1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED2 as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).FS1R as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FS1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED3 as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).FFA1R as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FFA1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED4 as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).FA1R as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FA1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).RESERVED5 as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CAN_TypeDef>())).sFilterRegister as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sFilterRegister)
        )
    );
}
#[doc = " @brief Analog Comparators"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMP_TypeDef {
    #[doc = "< COMP control and status register, Address offset: 0x00"]
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_COMP_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<COMP_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(COMP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<COMP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(COMP_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<COMP_TypeDef>())).CSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COMP_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COMP_Common_TypeDef {
    #[doc = "< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00"]
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_COMP_Common_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<COMP_Common_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(COMP_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<COMP_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(COMP_Common_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<COMP_Common_TypeDef>())).CSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COMP_Common_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[doc = " @brief CRC calculation unit"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_TypeDef {
    #[doc = "< CRC Data register,                           Address offset: 0x00"]
    pub DR: u32,
    #[doc = "< CRC Independent data register,               Address offset: 0x04"]
    pub IDR: u8,
    #[doc = "< Reserved,                                                    0x05"]
    pub RESERVED0: u8,
    #[doc = "< Reserved,                                                    0x06"]
    pub RESERVED1: u16,
    #[doc = "< CRC Control register,                        Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< Reserved,                                                    0x0C"]
    pub RESERVED2: u32,
    #[doc = "< Initial CRC value register,                  Address offset: 0x10"]
    pub INIT: u32,
    #[doc = "< CRC polynomial register,                     Address offset: 0x14"]
    pub POL: u32,
}
#[test]
fn bindgen_test_layout_CRC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CRC_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).DR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).IDR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).RESERVED0 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).RESERVED1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).CR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).RESERVED2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).INIT as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(INIT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).POL as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(POL)
        )
    );
}
#[doc = " @brief Digital to Analog Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_TypeDef {
    #[doc = "< DAC control register,                                    Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< DAC software trigger register,                           Address offset: 0x04"]
    pub SWTRIGR: u32,
    #[doc = "< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08"]
    pub DHR12R1: u32,
    #[doc = "< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C"]
    pub DHR12L1: u32,
    #[doc = "< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10"]
    pub DHR8R1: u32,
    #[doc = "< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14"]
    pub DHR12R2: u32,
    #[doc = "< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18"]
    pub DHR12L2: u32,
    #[doc = "< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C"]
    pub DHR8R2: u32,
    #[doc = "< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20"]
    pub DHR12RD: u32,
    #[doc = "< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24"]
    pub DHR12LD: u32,
    #[doc = "< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28"]
    pub DHR8RD: u32,
    #[doc = "< DAC channel1 data output register,                       Address offset: 0x2C"]
    pub DOR1: u32,
    #[doc = "< DAC channel2 data output register,                       Address offset: 0x30"]
    pub DOR2: u32,
    #[doc = "< DAC status register,                                     Address offset: 0x34"]
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_DAC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DAC_TypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).SWTRIGR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SWTRIGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12R1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12L1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR8R1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12R2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12L2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR8R2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12RD as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12RD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR12LD as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12LD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DHR8RD as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8RD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DOR1 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).DOR2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DAC_TypeDef>())).SR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[doc = " @brief Debug MCU"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBGMCU_TypeDef {
    #[doc = "< MCU device ID code,               Address offset: 0x00"]
    pub IDCODE: u32,
    #[doc = "< Debug MCU configuration register, Address offset: 0x04"]
    pub CR: u32,
    #[doc = "< Debug MCU APB1 freeze register,   Address offset: 0x08"]
    pub APB1FZ: u32,
    #[doc = "< Debug MCU APB2 freeze register,   Address offset: 0x0C"]
    pub APB2FZ: u32,
}
#[test]
fn bindgen_test_layout_DBGMCU_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DBGMCU_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DBGMCU_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).IDCODE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(IDCODE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).CR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).APB1FZ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB1FZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).APB2FZ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB2FZ)
        )
    );
}
#[doc = " @brief DMA Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_Channel_TypeDef {
    #[doc = "< DMA channel x configuration register"]
    pub CCR: u32,
    #[doc = "< DMA channel x number of data register"]
    pub CNDTR: u32,
    #[doc = "< DMA channel x peripheral address register"]
    pub CPAR: u32,
    #[doc = "< DMA channel x memory address register"]
    pub CMAR: u32,
}
#[test]
fn bindgen_test_layout_DMA_Channel_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DMA_Channel_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DMA_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Channel_TypeDef>())).CCR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Channel_TypeDef>())).CNDTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CNDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Channel_TypeDef>())).CPAR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CPAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Channel_TypeDef>())).CMAR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CMAR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_TypeDef {
    #[doc = "< DMA interrupt status register,                            Address offset: 0x00"]
    pub ISR: u32,
    #[doc = "< DMA interrupt flag clear register,                        Address offset: 0x04"]
    pub IFCR: u32,
}
#[test]
fn bindgen_test_layout_DMA_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DMA_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).ISR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).IFCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
}
#[doc = " @brief External Interrupt/Event Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_TypeDef {
    #[doc = "<EXTI Interrupt mask register,                             Address offset: 0x00"]
    pub IMR: u32,
    #[doc = "<EXTI Event mask register,                                 Address offset: 0x04"]
    pub EMR: u32,
    #[doc = "<EXTI Rising trigger selection register ,                  Address offset: 0x08"]
    pub RTSR: u32,
    #[doc = "<EXTI Falling trigger selection register,                  Address offset: 0x0C"]
    pub FTSR: u32,
    #[doc = "<EXTI Software interrupt event register,                   Address offset: 0x10"]
    pub SWIER: u32,
    #[doc = "<EXTI Pending register,                                    Address offset: 0x14"]
    pub PR: u32,
    #[doc = "< Reserved, 0x18"]
    pub RESERVED1: u32,
    #[doc = "< Reserved, 0x1C"]
    pub RESERVED2: u32,
    #[doc = "< EXTI Interrupt mask register,                            Address offset: 0x20"]
    pub IMR2: u32,
    #[doc = "< EXTI Event mask register,                                Address offset: 0x24"]
    pub EMR2: u32,
    #[doc = "< EXTI Rising trigger selection register,                  Address offset: 0x28"]
    pub RTSR2: u32,
    #[doc = "< EXTI Falling trigger selection register,                 Address offset: 0x2C"]
    pub FTSR2: u32,
    #[doc = "< EXTI Software interrupt event register,                  Address offset: 0x30"]
    pub SWIER2: u32,
    #[doc = "< EXTI Pending register,                                   Address offset: 0x34"]
    pub PR2: u32,
}
#[test]
fn bindgen_test_layout_EXTI_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<EXTI_TypeDef>(),
        56usize,
        concat!("Size of: ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).IMR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).EMR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).RTSR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).FTSR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).SWIER as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).PR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).RESERVED1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).RESERVED2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).IMR2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).EMR2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).RTSR2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).FTSR2 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).SWIER2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).PR2 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR2)
        )
    );
}
#[doc = " @brief FLASH Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_TypeDef {
    #[doc = "< FLASH access control register,              Address offset: 0x00"]
    pub ACR: u32,
    #[doc = "< FLASH key register,                         Address offset: 0x04"]
    pub KEYR: u32,
    #[doc = "< FLASH option key register,                  Address offset: 0x08"]
    pub OPTKEYR: u32,
    #[doc = "< FLASH status register,                      Address offset: 0x0C"]
    pub SR: u32,
    #[doc = "< FLASH control register,                     Address offset: 0x10"]
    pub CR: u32,
    #[doc = "< FLASH address register,                     Address offset: 0x14"]
    pub AR: u32,
    #[doc = "< Reserved, 0x18"]
    pub RESERVED: u32,
    #[doc = "< FLASH Option byte register,                 Address offset: 0x1C"]
    pub OBR: u32,
    #[doc = "< FLASH Write register,                       Address offset: 0x20"]
    pub WRPR: u32,
}
#[test]
fn bindgen_test_layout_FLASH_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<FLASH_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).ACR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ACR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).KEYR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(KEYR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).OPTKEYR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTKEYR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).SR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).CR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).AR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(AR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).RESERVED as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).OBR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OBR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).WRPR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WRPR)
        )
    );
}
#[doc = " @brief Option Bytes Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OB_TypeDef {
    #[doc = "<FLASH option byte Read protection,             Address offset: 0x00"]
    pub RDP: u16,
    #[doc = "<FLASH option byte user options,                Address offset: 0x02"]
    pub USER: u16,
    #[doc = "<FLASH option byte Data0 options,               Address offset: 0x04"]
    pub Data0: u16,
    #[doc = "<FLASH option byte Data1 options,               Address offset: 0x06"]
    pub Data1: u16,
    #[doc = "<FLASH option byte write protection 0,          Address offset: 0x08"]
    pub WRP0: u16,
    #[doc = "<FLASH option byte write protection 1,          Address offset: 0x0C"]
    pub WRP1: u16,
    #[doc = "<FLASH option byte write protection 2,          Address offset: 0x10"]
    pub WRP2: u16,
    #[doc = "<FLASH option byte write protection 3,          Address offset: 0x12"]
    pub WRP3: u16,
}
#[test]
fn bindgen_test_layout_OB_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<OB_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(OB_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<OB_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(OB_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).RDP as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(RDP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).USER as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(USER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).Data0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(Data0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).Data1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).WRP0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).WRP1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).WRP2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OB_TypeDef>())).WRP3 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP3)
        )
    );
}
#[doc = " @brief General Purpose I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_TypeDef {
    #[doc = "< GPIO port mode register,               Address offset: 0x00"]
    pub MODER: u32,
    #[doc = "< GPIO port output type register,        Address offset: 0x04"]
    pub OTYPER: u32,
    #[doc = "< GPIO port output speed register,       Address offset: 0x08"]
    pub OSPEEDR: u32,
    #[doc = "< GPIO port pull-up/pull-down register,  Address offset: 0x0C"]
    pub PUPDR: u32,
    #[doc = "< GPIO port input data register,         Address offset: 0x10"]
    pub IDR: u32,
    #[doc = "< GPIO port output data register,        Address offset: 0x14"]
    pub ODR: u32,
    #[doc = "< GPIO port bit set/reset register,      Address offset: 0x1A"]
    pub BSRR: u32,
    #[doc = "< GPIO port configuration lock register, Address offset: 0x1C"]
    pub LCKR: u32,
    #[doc = "< GPIO alternate function registers,     Address offset: 0x20-0x24"]
    pub AFR: [u32; 2usize],
    #[doc = "< GPIO bit reset register,               Address offset: 0x28"]
    pub BRR: u32,
}
#[test]
fn bindgen_test_layout_GPIO_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<GPIO_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).MODER as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(MODER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).OTYPER as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OTYPER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).OSPEEDR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OSPEEDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).PUPDR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(PUPDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).IDR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).ODR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(ODR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).BSRR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BSRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).LCKR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(LCKR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).AFR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(AFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).BRR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
}
#[doc = " @brief Operational Amplifier (OPAMP)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OPAMP_TypeDef {
    #[doc = "< OPAMP control and status register,            Address offset: 0x00"]
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_OPAMP_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<OPAMP_TypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(OPAMP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<OPAMP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(OPAMP_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<OPAMP_TypeDef>())).CSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OPAMP_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[doc = " @brief System configuration controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSCFG_TypeDef {
    #[doc = "< SYSCFG configuration register 1,                      Address offset: 0x00"]
    pub CFGR1: u32,
    #[doc = "< SYSCFG CCM SRAM protection register,               Address offset: 0x04"]
    pub RCR: u32,
    #[doc = "< SYSCFG external interrupt configuration registers, Address offset: 0x14-0x08"]
    pub EXTICR: [u32; 4usize],
    #[doc = "< SYSCFG configuration register 2,                      Address offset: 0x18"]
    pub CFGR2: u32,
}
#[test]
fn bindgen_test_layout_SYSCFG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<SYSCFG_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SYSCFG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).CFGR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CFGR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).RCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).EXTICR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(EXTICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).CFGR2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CFGR2)
        )
    );
}
#[doc = " @brief Inter-integrated Circuit Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_TypeDef {
    #[doc = "< I2C Control register 1,            Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< I2C Control register 2,            Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< I2C Own address 1 register,        Address offset: 0x08"]
    pub OAR1: u32,
    #[doc = "< I2C Own address 2 register,        Address offset: 0x0C"]
    pub OAR2: u32,
    #[doc = "< I2C Timing register,               Address offset: 0x10"]
    pub TIMINGR: u32,
    #[doc = "< I2C Timeout register,              Address offset: 0x14"]
    pub TIMEOUTR: u32,
    #[doc = "< I2C Interrupt and status register, Address offset: 0x18"]
    pub ISR: u32,
    #[doc = "< I2C Interrupt clear register,      Address offset: 0x1C"]
    pub ICR: u32,
    #[doc = "< I2C PEC register,                  Address offset: 0x20"]
    pub PECR: u32,
    #[doc = "< I2C Receive data register,         Address offset: 0x24"]
    pub RXDR: u32,
    #[doc = "< I2C Transmit data register,        Address offset: 0x28"]
    pub TXDR: u32,
}
#[test]
fn bindgen_test_layout_I2C_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<I2C_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).OAR1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).OAR2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).TIMINGR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TIMINGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).TIMEOUTR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TIMEOUTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).ISR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).ICR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).PECR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(PECR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).RXDR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RXDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).TXDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TXDR)
        )
    );
}
#[doc = " @brief Independent WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_TypeDef {
    #[doc = "< IWDG Key register,       Address offset: 0x00"]
    pub KR: u32,
    #[doc = "< IWDG Prescaler register, Address offset: 0x04"]
    pub PR: u32,
    #[doc = "< IWDG Reload register,    Address offset: 0x08"]
    pub RLR: u32,
    #[doc = "< IWDG Status register,    Address offset: 0x0C"]
    pub SR: u32,
    #[doc = "< IWDG Window register,    Address offset: 0x10"]
    pub WINR: u32,
}
#[test]
fn bindgen_test_layout_IWDG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<IWDG_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).KR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(KR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).PR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).RLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).SR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).WINR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(WINR)
        )
    );
}
#[doc = " @brief Power Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_TypeDef {
    #[doc = "< PWR power control register,        Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< PWR power control/status register, Address offset: 0x04"]
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_PWR_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<PWR_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWR_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PWR_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PWR_TypeDef>())).CSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[doc = " @brief Reset and Clock Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_TypeDef {
    #[doc = "< RCC clock control register,                                  Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< RCC clock configuration register,                            Address offset: 0x04"]
    pub CFGR: u32,
    #[doc = "< RCC clock interrupt register,                                Address offset: 0x08"]
    pub CIR: u32,
    #[doc = "< RCC APB2 peripheral reset register,                          Address offset: 0x0C"]
    pub APB2RSTR: u32,
    #[doc = "< RCC APB1 peripheral reset register,                          Address offset: 0x10"]
    pub APB1RSTR: u32,
    #[doc = "< RCC AHB peripheral clock register,                           Address offset: 0x14"]
    pub AHBENR: u32,
    #[doc = "< RCC APB2 peripheral clock enable register,                   Address offset: 0x18"]
    pub APB2ENR: u32,
    #[doc = "< RCC APB1 peripheral clock enable register,                   Address offset: 0x1C"]
    pub APB1ENR: u32,
    #[doc = "< RCC Backup domain control register,                          Address offset: 0x20"]
    pub BDCR: u32,
    #[doc = "< RCC clock control & status register,                         Address offset: 0x24"]
    pub CSR: u32,
    #[doc = "< RCC AHB peripheral reset register,                           Address offset: 0x28"]
    pub AHBRSTR: u32,
    #[doc = "< RCC clock configuration register 2,                          Address offset: 0x2C"]
    pub CFGR2: u32,
    #[doc = "< RCC clock configuration register 3,                          Address offset: 0x30"]
    pub CFGR3: u32,
}
#[test]
fn bindgen_test_layout_RCC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<RCC_TypeDef>(),
        52usize,
        concat!("Size of: ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CFGR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CIR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CIR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB2RSTR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB1RSTR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHBENR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHBENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB2ENR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB1ENR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).BDCR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(BDCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CSR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHBRSTR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHBRSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CFGR2 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CFGR3 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR3)
        )
    );
}
#[doc = " @brief Real-Time Clock"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TypeDef {
    #[doc = "< RTC time register,                                        Address offset: 0x00"]
    pub TR: u32,
    #[doc = "< RTC date register,                                        Address offset: 0x04"]
    pub DR: u32,
    #[doc = "< RTC control register,                                     Address offset: 0x08"]
    pub CR: u32,
    #[doc = "< RTC initialization and status register,                   Address offset: 0x0C"]
    pub ISR: u32,
    #[doc = "< RTC prescaler register,                                   Address offset: 0x10"]
    pub PRER: u32,
    #[doc = "< RTC wakeup timer register,                                Address offset: 0x14"]
    pub WUTR: u32,
    #[doc = "< Reserved, 0x18"]
    pub RESERVED0: u32,
    #[doc = "< RTC alarm A register,                                     Address offset: 0x1C"]
    pub ALRMAR: u32,
    #[doc = "< RTC alarm B register,                                     Address offset: 0x20"]
    pub ALRMBR: u32,
    #[doc = "< RTC write protection register,                            Address offset: 0x24"]
    pub WPR: u32,
    #[doc = "< RTC sub second register,                                  Address offset: 0x28"]
    pub SSR: u32,
    #[doc = "< RTC shift control register,                               Address offset: 0x2C"]
    pub SHIFTR: u32,
    #[doc = "< RTC time stamp time register,                             Address offset: 0x30"]
    pub TSTR: u32,
    #[doc = "< RTC time stamp date register,                             Address offset: 0x34"]
    pub TSDR: u32,
    #[doc = "< RTC time-stamp sub second register,                       Address offset: 0x38"]
    pub TSSSR: u32,
    #[doc = "< RTC calibration register,                                 Address offset: 0x3C"]
    pub CALR: u32,
    #[doc = "< RTC tamper and alternate function configuration register, Address offset: 0x40"]
    pub TAFCR: u32,
    #[doc = "< RTC alarm A sub second register,                          Address offset: 0x44"]
    pub ALRMASSR: u32,
    #[doc = "< RTC alarm B sub second register,                          Address offset: 0x48"]
    pub ALRMBSSR: u32,
    #[doc = "< Reserved, 0x4C"]
    pub RESERVED7: u32,
    #[doc = "< RTC backup register 0,                                    Address offset: 0x50"]
    pub BKP0R: u32,
    #[doc = "< RTC backup register 1,                                    Address offset: 0x54"]
    pub BKP1R: u32,
    #[doc = "< RTC backup register 2,                                    Address offset: 0x58"]
    pub BKP2R: u32,
    #[doc = "< RTC backup register 3,                                    Address offset: 0x5C"]
    pub BKP3R: u32,
    #[doc = "< RTC backup register 4,                                    Address offset: 0x60"]
    pub BKP4R: u32,
    #[doc = "< RTC backup register 5,                                    Address offset: 0x64"]
    pub BKP5R: u32,
    #[doc = "< RTC backup register 6,                                    Address offset: 0x68"]
    pub BKP6R: u32,
    #[doc = "< RTC backup register 7,                                    Address offset: 0x6C"]
    pub BKP7R: u32,
    #[doc = "< RTC backup register 8,                                    Address offset: 0x70"]
    pub BKP8R: u32,
    #[doc = "< RTC backup register 9,                                    Address offset: 0x74"]
    pub BKP9R: u32,
    #[doc = "< RTC backup register 10,                                   Address offset: 0x78"]
    pub BKP10R: u32,
    #[doc = "< RTC backup register 11,                                   Address offset: 0x7C"]
    pub BKP11R: u32,
    #[doc = "< RTC backup register 12,                                   Address offset: 0x80"]
    pub BKP12R: u32,
    #[doc = "< RTC backup register 13,                                   Address offset: 0x84"]
    pub BKP13R: u32,
    #[doc = "< RTC backup register 14,                                   Address offset: 0x88"]
    pub BKP14R: u32,
    #[doc = "< RTC backup register 15,                                   Address offset: 0x8C"]
    pub BKP15R: u32,
}
#[test]
fn bindgen_test_layout_RTC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<RTC_TypeDef>(),
        144usize,
        concat!("Size of: ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).DR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).CR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ISR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).PRER as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(PRER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).WUTR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WUTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).RESERVED0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMAR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMBR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).WPR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).SSR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).SHIFTR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SHIFTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSTR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSDR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSSSR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSSSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).CALR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CALR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TAFCR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TAFCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMASSR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMASSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMBSSR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBSSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).RESERVED7 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP0R as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP0R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP1R as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP2R as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP2R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP3R as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP3R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP4R as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP4R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP5R as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP5R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP6R as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP6R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP7R as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP7R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP8R as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP8R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP9R as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP9R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP10R as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP10R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP11R as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP11R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP12R as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP12R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP13R as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP13R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP14R as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP14R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP15R as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP15R)
        )
    );
}
#[doc = " @brief Serial Peripheral Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_TypeDef {
    #[doc = "< SPI Control register 1,                              Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< SPI Control register 2,                              Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< SPI Status register,                                 Address offset: 0x08"]
    pub SR: u32,
    #[doc = "< SPI data register,                                   Address offset: 0x0C"]
    pub DR: u32,
    #[doc = "< SPI CRC polynomial register,                         Address offset: 0x10"]
    pub CRCPR: u32,
    #[doc = "< SPI Rx CRC register,                                 Address offset: 0x14"]
    pub RXCRCR: u32,
    #[doc = "< SPI Tx CRC register,                                 Address offset: 0x18"]
    pub TXCRCR: u32,
    #[doc = "< SPI_I2S configuration register,                      Address offset: 0x1C"]
    pub I2SCFGR: u32,
    #[doc = "< SPI_I2S prescaler register,                          Address offset: 0x20"]
    pub I2SPR: u32,
}
#[test]
fn bindgen_test_layout_SPI_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<SPI_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).SR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).DR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CRCPR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CRCPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).RXCRCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RXCRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).TXCRCR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(TXCRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).I2SCFGR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SCFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).I2SPR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SPR)
        )
    );
}
#[doc = " @brief TIM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_TypeDef {
    #[doc = "< TIM control register 1,              Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< TIM control register 2,              Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< TIM slave mode control register,     Address offset: 0x08"]
    pub SMCR: u32,
    #[doc = "< TIM DMA/interrupt enable register,   Address offset: 0x0C"]
    pub DIER: u32,
    #[doc = "< TIM status register,                 Address offset: 0x10"]
    pub SR: u32,
    #[doc = "< TIM event generation register,       Address offset: 0x14"]
    pub EGR: u32,
    #[doc = "< TIM capture/compare mode register 1, Address offset: 0x18"]
    pub CCMR1: u32,
    #[doc = "< TIM capture/compare mode register 2, Address offset: 0x1C"]
    pub CCMR2: u32,
    #[doc = "< TIM capture/compare enable register, Address offset: 0x20"]
    pub CCER: u32,
    #[doc = "< TIM counter register,                Address offset: 0x24"]
    pub CNT: u32,
    #[doc = "< TIM prescaler,                       Address offset: 0x28"]
    pub PSC: u32,
    #[doc = "< TIM auto-reload register,            Address offset: 0x2C"]
    pub ARR: u32,
    #[doc = "< TIM repetition counter register,     Address offset: 0x30"]
    pub RCR: u32,
    #[doc = "< TIM capture/compare register 1,      Address offset: 0x34"]
    pub CCR1: u32,
    #[doc = "< TIM capture/compare register 2,      Address offset: 0x38"]
    pub CCR2: u32,
    #[doc = "< TIM capture/compare register 3,      Address offset: 0x3C"]
    pub CCR3: u32,
    #[doc = "< TIM capture/compare register 4,      Address offset: 0x40"]
    pub CCR4: u32,
    #[doc = "< TIM break and dead-time register,    Address offset: 0x44"]
    pub BDTR: u32,
    #[doc = "< TIM DMA control register,            Address offset: 0x48"]
    pub DCR: u32,
    #[doc = "< TIM DMA address for full transfer,   Address offset: 0x4C"]
    pub DMAR: u32,
    #[doc = "< TIM option register,                 Address offset: 0x50"]
    pub OR: u32,
    #[doc = "< TIM capture/compare mode register 3, Address offset: 0x54"]
    pub CCMR3: u32,
    #[doc = "< TIM capture/compare register5,       Address offset: 0x58"]
    pub CCR5: u32,
    #[doc = "< TIM capture/compare register 4,      Address offset: 0x5C"]
    pub CCR6: u32,
}
#[test]
fn bindgen_test_layout_TIM_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<TIM_TypeDef>(),
        96usize,
        concat!("Size of: ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).SMCR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SMCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DIER as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DIER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).SR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).EGR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(EGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCMR1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCMR2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCER as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CNT as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).PSC as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(PSC)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).ARR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).RCR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR1 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR3 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR4 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).BDTR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(BDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DCR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DMAR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DMAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).OR as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(OR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCMR3 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR5 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR6 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR6)
        )
    );
}
#[doc = " @brief Touch Sensing Controller (TSC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSC_TypeDef {
    #[doc = "< TSC control register,                                     Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< TSC interrupt enable register,                            Address offset: 0x04"]
    pub IER: u32,
    #[doc = "< TSC interrupt clear register,                             Address offset: 0x08"]
    pub ICR: u32,
    #[doc = "< TSC interrupt status register,                            Address offset: 0x0C"]
    pub ISR: u32,
    #[doc = "< TSC I/O hysteresis control register,                      Address offset: 0x10"]
    pub IOHCR: u32,
    #[doc = "< Reserved,                                                 Address offset: 0x14"]
    pub RESERVED1: u32,
    #[doc = "< TSC I/O analog switch control register,                   Address offset: 0x18"]
    pub IOASCR: u32,
    #[doc = "< Reserved,                                                 Address offset: 0x1C"]
    pub RESERVED2: u32,
    #[doc = "< TSC I/O sampling control register,                        Address offset: 0x20"]
    pub IOSCR: u32,
    #[doc = "< Reserved,                                                 Address offset: 0x24"]
    pub RESERVED3: u32,
    #[doc = "< TSC I/O channel control register,                         Address offset: 0x28"]
    pub IOCCR: u32,
    #[doc = "< Reserved,                                                 Address offset: 0x2C"]
    pub RESERVED4: u32,
    #[doc = "< TSC I/O group control status register,                    Address offset: 0x30"]
    pub IOGCSR: u32,
    #[doc = "< TSC I/O group x counter register,                         Address offset: 0x34-50"]
    pub IOGXCR: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_TSC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<TSC_TypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(TSC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TSC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TSC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IER as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).ICR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).ISR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOHCR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOHCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).RESERVED1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOASCR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOASCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).RESERVED2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOSCR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOSCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).RESERVED3 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOCCR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOCCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).RESERVED4 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOGCSR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOGCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TSC_TypeDef>())).IOGXCR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TSC_TypeDef),
            "::",
            stringify!(IOGXCR)
        )
    );
}
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_TypeDef {
    #[doc = "< USART Control register 1,                 Address offset: 0x00"]
    pub CR1: u32,
    #[doc = "< USART Control register 2,                 Address offset: 0x04"]
    pub CR2: u32,
    #[doc = "< USART Control register 3,                 Address offset: 0x08"]
    pub CR3: u32,
    #[doc = "< USART Baud rate register,                 Address offset: 0x0C"]
    pub BRR: u32,
    #[doc = "< USART Guard time and prescaler register,  Address offset: 0x10"]
    pub GTPR: u32,
    #[doc = "< USART Receiver Time Out register,         Address offset: 0x14"]
    pub RTOR: u32,
    #[doc = "< USART Request register,                   Address offset: 0x18"]
    pub RQR: u32,
    #[doc = "< USART Interrupt and status register,      Address offset: 0x1C"]
    pub ISR: u32,
    #[doc = "< USART Interrupt flag Clear register,      Address offset: 0x20"]
    pub ICR: u32,
    #[doc = "< USART Receive Data register,              Address offset: 0x24"]
    pub RDR: u16,
    #[doc = "< Reserved, 0x26"]
    pub RESERVED1: u16,
    #[doc = "< USART Transmit Data register,             Address offset: 0x28"]
    pub TDR: u16,
    #[doc = "< Reserved, 0x2A"]
    pub RESERVED2: u16,
}
#[test]
fn bindgen_test_layout_USART_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USART_TypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).BRR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).GTPR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(GTPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).RTOR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RTOR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).RQR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RQR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).ISR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).ICR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).RDR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).RESERVED1 as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).TDR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(TDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).RESERVED2 as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
}
#[doc = " @brief Universal Serial Bus Full Speed Device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_TypeDef {
    #[doc = "< USB Endpoint 0 register,                Address offset: 0x00"]
    pub EP0R: u16,
    #[doc = "< Reserved"]
    pub RESERVED0: u16,
    #[doc = "< USB Endpoint 1 register,                Address offset: 0x04"]
    pub EP1R: u16,
    #[doc = "< Reserved"]
    pub RESERVED1: u16,
    #[doc = "< USB Endpoint 2 register,                Address offset: 0x08"]
    pub EP2R: u16,
    #[doc = "< Reserved"]
    pub RESERVED2: u16,
    #[doc = "< USB Endpoint 3 register,                Address offset: 0x0C"]
    pub EP3R: u16,
    #[doc = "< Reserved"]
    pub RESERVED3: u16,
    #[doc = "< USB Endpoint 4 register,                Address offset: 0x10"]
    pub EP4R: u16,
    #[doc = "< Reserved"]
    pub RESERVED4: u16,
    #[doc = "< USB Endpoint 5 register,                Address offset: 0x14"]
    pub EP5R: u16,
    #[doc = "< Reserved"]
    pub RESERVED5: u16,
    #[doc = "< USB Endpoint 6 register,                Address offset: 0x18"]
    pub EP6R: u16,
    #[doc = "< Reserved"]
    pub RESERVED6: u16,
    #[doc = "< USB Endpoint 7 register,                Address offset: 0x1C"]
    pub EP7R: u16,
    #[doc = "< Reserved"]
    pub RESERVED7: [u16; 17usize],
    #[doc = "< Control register,                       Address offset: 0x40"]
    pub CNTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED8: u16,
    #[doc = "< Interrupt status register,              Address offset: 0x44"]
    pub ISTR: u16,
    #[doc = "< Reserved"]
    pub RESERVED9: u16,
    #[doc = "< Frame number register,                  Address offset: 0x48"]
    pub FNR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDA: u16,
    #[doc = "< Device address register,                Address offset: 0x4C"]
    pub DADDR: u16,
    #[doc = "< Reserved"]
    pub RESERVEDB: u16,
    #[doc = "< Buffer Table address register,          Address offset: 0x50"]
    pub BTABLE: u16,
    #[doc = "< Reserved"]
    pub RESERVEDC: u16,
}
#[test]
fn bindgen_test_layout_USB_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_TypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(USB_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(USB_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP0R as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP0R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED0 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP1R as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP2R as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP2R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP3R as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP3R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED3 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP4R as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP4R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED4 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP5R as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP5R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED5 as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP6R as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP6R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED6 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).EP7R as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(EP7R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED7 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).CNTR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(CNTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED8 as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).ISTR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(ISTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVED9 as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).FNR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(FNR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVEDA as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVEDA)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).DADDR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(DADDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVEDB as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVEDB)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).BTABLE as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(BTABLE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_TypeDef>())).RESERVEDC as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_TypeDef),
            "::",
            stringify!(RESERVEDC)
        )
    );
}
#[doc = " @brief Window WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_TypeDef {
    #[doc = "< WWDG Control register,       Address offset: 0x00"]
    pub CR: u32,
    #[doc = "< WWDG Configuration register, Address offset: 0x04"]
    pub CFR: u32,
    #[doc = "< WWDG Status register,        Address offset: 0x08"]
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_WWDG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<WWDG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).CFR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).SR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
pub const FlagStatus_RESET: FlagStatus = 0;
pub const FlagStatus_SET: FlagStatus = 1;
#[doc = " @addtogroup Exported_types"]
#[doc = " @{"]
pub type FlagStatus = u32;
#[doc = " @addtogroup Exported_types"]
#[doc = " @{"]
pub use self::FlagStatus as ITStatus;
pub const FunctionalState_DISABLE: FunctionalState = 0;
pub const FunctionalState_ENABLE: FunctionalState = 1;
pub type FunctionalState = u32;
pub const ErrorStatus_SUCCESS: ErrorStatus = 0;
pub const ErrorStatus_ERROR: ErrorStatus = 1;
pub type ErrorStatus = u32;
pub type size_t = libc::c_ulong;
pub type wchar_t = libc::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: libc::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const HAL_StatusTypeDef_HAL_OK: HAL_StatusTypeDef = 0;
pub const HAL_StatusTypeDef_HAL_ERROR: HAL_StatusTypeDef = 1;
pub const HAL_StatusTypeDef_HAL_BUSY: HAL_StatusTypeDef = 2;
pub const HAL_StatusTypeDef_HAL_TIMEOUT: HAL_StatusTypeDef = 3;
#[doc = " @brief  HAL Status structures definition"]
pub type HAL_StatusTypeDef = u32;
pub const HAL_LockTypeDef_HAL_UNLOCKED: HAL_LockTypeDef = 0;
pub const HAL_LockTypeDef_HAL_LOCKED: HAL_LockTypeDef = 1;
#[doc = " @brief  HAL Lock structures definition"]
pub type HAL_LockTypeDef = u32;
#[doc = " @defgroup GPIO_Exported_Types GPIO Exported Types"]
#[doc = " @{"]
#[doc = " @brief   GPIO Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_InitTypeDef {
    #[doc = "< Specifies the GPIO pins to be configured."]
    #[doc = "This parameter can be any value of @ref GPIO_pins"]
    pub Pin: u32,
    #[doc = "< Specifies the operating mode for the selected pins."]
    #[doc = "This parameter can be a value of @ref GPIO_mode"]
    pub Mode: u32,
    #[doc = "< Specifies the Pull-up or Pull-Down activation for the selected pins."]
    #[doc = "This parameter can be a value of @ref GPIO_pull"]
    pub Pull: u32,
    #[doc = "< Specifies the speed for the selected pins."]
    #[doc = "This parameter can be a value of @ref GPIO_speed"]
    pub Speed: u32,
    #[doc = "< Peripheral to be connected to the selected pins"]
    #[doc = "This parameter can be a value of @ref GPIOEx_Alternate_function_selection"]
    pub Alternate: u32,
}
#[test]
fn bindgen_test_layout_GPIO_InitTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<GPIO_InitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_InitTypeDef>())).Pin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Pin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_InitTypeDef>())).Mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_InitTypeDef>())).Pull as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Pull)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_InitTypeDef>())).Speed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_InitTypeDef>())).Alternate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(Alternate)
        )
    );
}
pub const GPIO_PinState_GPIO_PIN_RESET: GPIO_PinState = 0;
pub const GPIO_PinState_GPIO_PIN_SET: GPIO_PinState = 1;
#[doc = " @brief  GPIO Bit SET and Bit RESET enumeration"]
pub type GPIO_PinState = u32;
extern "C" {
    #[doc = " @addtogroup GPIO_Exported_Functions_Group1 Initialization/de-initialization functions"]
    #[doc = "  @brief    Initialization and Configuration functions"]
    #[doc = " @{"]
    pub fn HAL_GPIO_Init(GPIOx: *mut GPIO_TypeDef, GPIO_Init: *mut GPIO_InitTypeDef);
}
extern "C" {
    pub fn HAL_GPIO_DeInit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u32);
}
extern "C" {
    #[doc = " @addtogroup GPIO_Exported_Functions_Group2 IO operation functions"]
    #[doc = " @{"]
    pub fn HAL_GPIO_ReadPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> GPIO_PinState;
}
extern "C" {
    pub fn HAL_GPIO_WritePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16, PinState: GPIO_PinState);
}
extern "C" {
    pub fn HAL_GPIO_TogglePin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_LockPin(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> HAL_StatusTypeDef;
}
extern "C" {
    pub fn HAL_GPIO_EXTI_IRQHandler(GPIO_Pin: u16);
}
extern "C" {
    pub fn HAL_GPIO_EXTI_Callback(GPIO_Pin: u16);
}
